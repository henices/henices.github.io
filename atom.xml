<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>安全代码</title>
  
  <subtitle>关注科技、投资、健康，和个人成长</subtitle>
  <link href="http://usmacd.com/atom.xml" rel="self"/>
  
  <link href="http://usmacd.com/"/>
  <updated>2024-03-23T16:00:00.000Z</updated>
  <id>http://usmacd.com/</id>
  
  <author>
    <name>henices</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我正在使用的 Logseq Plugin (插件)</title>
    <link href="http://usmacd.com/cn/logseq_plugins/"/>
    <id>http://usmacd.com/cn/logseq_plugins/</id>
    <published>2024-03-18T16:00:00.000Z</published>
    <updated>2024-03-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>推荐一些我正在使用的 <a href="https://github.com/logseq/logseq">Logseq</a> 插件，这些插件的功能都非常实用。Logseq 安装插件的方法可以参考我以前写的文章 <a href="https://www.usmacd.com/cn/logseq2/">Logseq 使用小结 （二）</a> 。</p><h2 id="logseq-random-note"><a href="#logseq-random-note" class="headerlink" title="logseq-random-note"></a>logseq-random-note</h2><p><a href="https://github.com/TankCool/logseq-random-note">https://github.com/TankCool/logseq-random-note</a></p><p>在 Logseq 中随机浏览笔记的插件。Logseq 没有默认的随机笔记功能可能是一个失误，反观 Obsidian 就有内置 open random note 的功能。关于随机发现笔记的作用，我专门写过一篇文章 <a href="https://www.usmacd.com/cn/note_review/">定期回顾笔记的好处</a>。在我的 Logseq 工作流(workflow) 中，定期回顾笔记是非常重要的部分，经常都能获得意想不到的收获。</p><p>logseq random note 插件在使用中有一个问题，生成随机数时使用了 javascript math.random 函数，这个函数生成的随机数质量不高，导致 random note 插件经常会访问同一个笔记。我向原仓库提交了修改后的源码，但是原作者没有合并。如果在使用的时候遇上我说的这个问题，可以试试我的修改版插件 <a href="https://github.com/henices/logseq-random-note">https://github.com/henices/logseq-random-note</a></p><h2 id="Logseq-Banners-plugin"><a href="#Logseq-Banners-plugin" class="headerlink" title="Logseq Banners plugin"></a>Logseq Banners plugin</h2><p><a href="https://github.com/yoyurec/logseq-banners-plugin">https://github.com/yoyurec/logseq-banners-plugin</a><br>在 Logseq 的 Journal 或者 page 页面显示 banner 。Banner 中可以添加Calendar，Weather，Pomodoro，Random quote 的显示，提供自定义功能，可以自由组合。我只使用了 random note 的功能，每天都可以不经意的看到以前的笔记，感觉非常不错。</p><h2 id="Page-tags-and-Hierarchy"><a href="#Page-tags-and-Hierarchy" class="headerlink" title="Page-tags and Hierarchy"></a>Page-tags and Hierarchy</h2><p><a href="https://github.com/YU000jp/logseq-page-tags-and-hierarchy">https://github.com/YU000jp/logseq-page-tags-and-hierarchy</a></p><p>在页面中直观得看见 Page-tags 和 Hierarchy，不用滚动到页面底部的插件。Logseq Page-tags 和 namespace 特性，并不像其他特性被人们熟知。比较遗憾的是我没有在 Logseq 的文档中找到明确的说明。</p><p>namespace 定义了 page 之间的层级关系，可以在一个页面的底部看出层级关系。namespace 有两种表示方式：<code>#topic/topic0/topic1</code> 或者 <code>[[topic/topic0/topic1]]</code>。我一般都使用前面的表达方式，比较简单，输入 <code>#topic</code> Logseq 就会自动提示 <code>#topic/topic0</code> 和 <code>#topic/topic0/topic1</code> 非常方便。</p><p>Page-tags 是一个特殊的属性，在一个 page 的第一个block 使用 <code>tags:: #topic</code> 可以在topic 页面底部反向查看到这个 page。</p><p>实际使用的过程中会发现，一旦页面的内容多了，要查看 Page-tags 和 namespace 的 Hierarchy 必须滚动到页面底部非常费事，这个插件就是为了解决这个问题而开发的。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/logseq4-page-tags.png" alt="page-tags"></p><h2 id="logseq-assets-plus"><a href="#logseq-assets-plus" class="headerlink" title="logseq-assets-plus"></a>logseq-assets-plus</h2><p><a href="https://github.com/xyhp915/logseq-assets-plus">https://github.com/xyhp915/logseq-assets-plus</a></p><p>方便插入资源 asset 的插件，快捷键  ctrl&#x2F;cmd+Shift+O 。在Logseq 中插入 asset 的方法是，使用 &#x2F;upload a asset 命令，回车后会弹出一个对话框选择你要保存的文件即可。但是要在一个 block 中插入一个已有的 asset ，只能使用名字搜索，Logseq assets plus 提供了更加丰富的过滤方法。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/logseq4-asset-plus.png" alt="asset-plus"></p><h2 id="logseq-plugin-mark-map"><a href="#logseq-plugin-mark-map" class="headerlink" title="logseq-plugin-mark-map"></a>logseq-plugin-mark-map</h2><p><a href="https://github.com/vipzhicheng/logseq-plugin-mark-map">https://github.com/vipzhicheng/logseq-plugin-mark-map</a></p><p>将大纲笔记展示为思维导图插件，触发快捷键 mm 。将大纲笔记转化为思维导图，对内容记忆有一些帮助。</p><p><img src="https://github.com/henices/pictures/raw/master/logseq3_5.png" alt="mark-map"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>Logseq 使用小结 （二）<a href="https://www.usmacd.com/cn/logseq2/">https://www.usmacd.com/cn/logseq2/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;推荐一些我正在使用的 &lt;a href=&quot;https://github.com/logseq/logseq&quot;&gt;Logseq&lt;/a&gt; 插件，这些插件的功能都非常实用。Logseq 安装插件的方法可以参考我以前写的文章 &lt;a href=&quot;https://www.usmacd.co</summary>
      
    
    
    
    
    <category term="Software" scheme="http://usmacd.com/tags/Software/"/>
    
  </entry>
  
  <entry>
    <title>金融市场中的不同流派</title>
    <link href="http://usmacd.com/cn/investment_category/"/>
    <id>http://usmacd.com/cn/investment_category/</id>
    <published>2024-03-07T16:00:00.000Z</published>
    <updated>2024-03-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>价值投资：价值低估、价值成长 (巴菲特)</li><li>趋势交易：分析市场的方向动力并寻找参与该走势的方法的过程 (理查德.丹尼斯)</li><li>量化交易：高频交易、动量交易、统计套利等  (詹姆斯·西蒙斯)</li><li>市场博弈：以徐总舵主为代表的打板派</li><li>技术分析：通过研究历史交易数据（主要是价格和成交量），来预测未来的价格走势（威廉.江恩）</li><li>投资策略：ETF 指数投资、网格交易、基金定投，投资组合理论 等</li><li>投资哲学：投资方法建立于个人的金融哲学观上 （乔治·索罗斯, 既有宏观择时，又有趋势交易（反身性))</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;价值投资：价值低估、价值成长 (巴菲特)&lt;/li&gt;
&lt;li&gt;趋势交易：分析市场的方向动力并寻找参与该走势的方法的过程 (理查德.丹尼斯)&lt;/li&gt;
&lt;li&gt;量化交易：高频交易、动量交易、统计套利等  (詹姆斯·西蒙斯)&lt;/li&gt;
&lt;li&gt;市场博弈：以徐总舵主为代</summary>
      
    
    
    
    
    <category term="investment" scheme="http://usmacd.com/tags/investment/"/>
    
  </entry>
  
  <entry>
    <title>Android 手机使用 PC 代理上网的方法</title>
    <link href="http://usmacd.com/cn/android_use_proxy_of_pc/"/>
    <id>http://usmacd.com/cn/android_use_proxy_of_pc/</id>
    <published>2024-02-26T16:00:00.000Z</published>
    <updated>2024-02-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在一些特殊的情况下，可能需要使用 Android 手机或者 PC 的线路访问外部网络资源，同时没有条件连接 wifi 网络，这时候可以使用 Android Platform Tools 的 adb 工具来达到目的。</p><p>Android Platform Tools 的下载地址：<a href="https://developer.android.com/tools/releases/platform-tools#downloads">https://developer.android.com/tools/releases/platform-tools#downloads</a></p><h2 id="Android-手机使用-PC-的代理上网的方法"><a href="#Android-手机使用-PC-的代理上网的方法" class="headerlink" title="Android 手机使用 PC 的代理上网的方法"></a>Android 手机使用 PC 的代理上网的方法</h2><p>用 USB 数据线连接 Android 手机和 PC，在 PC 中执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell settings put global http_proxy 127.0.0.1:7890<br>adb reverse tcp:7890 tcp:7890<br></code></pre></td></tr></table></figure><p>首先设置 Android 手机 http 全局代理为 127.0.0.1:7890，然后将手机的 127.0.0.1:7890 转发到 PC 127.0.0.1:7890 （没有找到设置 Android 系统全局使用 socks5 代理的方法）</p><p>设置 Android 全局代理需要 android.permission.WRITE_SECURE_SETTINGS 权限，ColorOS 需要在开发者选项中开启 「禁止权限监控」具体方法可以参考：<a href="https://sspai.com/post/67110">在 ColorOS 上免 root 玩机，请先打开这个开关</a>，如果是小米手机可能需要在开发者选项中打开 「USB调试（安全设置）」，我没有小米手机未测试。</p><p>如果需要恢复Android 无代理状态，需要使用下面的命令，一定要记得执行这条恢复命令，否则手机可能无法联网。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell settings delete global http_proxy<br>adb shell settings delete global global_http_proxy_host<br>adb shell settings delete global global_http_proxy_port<br></code></pre></td></tr></table></figure><p>执行 <code>adb reverse</code> 命令后，可以使用 <code>adb reverse --list</code> 查看连接建立情况：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UsbFfs</span> tcp:<span class="hljs-number">7890</span> tcp:<span class="hljs-number">7890</span><br></code></pre></td></tr></table></figure><p>不需要使用时，可以使用 <code>adb reverse --remove</code> 移除转发</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">adb <span class="hljs-keyword">reverse</span> <span class="hljs-comment">--remove tcp:7890</span><br></code></pre></td></tr></table></figure><p>参考 adb 的帮助，执行命令 <code>adb help</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">reverse</span> --<span class="hljs-keyword">list</span>           <span class="hljs-keyword">list</span> <span class="hljs-keyword">all</span> <span class="hljs-built_in">reverse</span> socket connections from device<br><span class="hljs-built_in">reverse</span> [--<span class="hljs-keyword">no</span>-rebind] REMOTE LOCAL<br>    <span class="hljs-built_in">reverse</span> socket connection using:<br>      tcp:<span class="hljs-symbol">&lt;port&gt;</span> (<span class="hljs-symbol">&lt;remote&gt;</span> may <span class="hljs-keyword">be</span> <span class="hljs-string">&quot;tcp:0&quot;</span> <span class="hljs-keyword">to</span> pick any <span class="hljs-keyword">open</span> port)<br>      localabstract:&lt;unix domain socket name&gt;<br>      localreserved:&lt;unix domain socket name&gt;<br>      localfilesystem:&lt;unix domain socket name&gt;<br><span class="hljs-built_in">reverse</span> --<span class="hljs-built_in">remove</span> REMOTE  <span class="hljs-built_in">remove</span> specific <span class="hljs-built_in">reverse</span> socket connection<br><span class="hljs-built_in">reverse</span> --<span class="hljs-built_in">remove</span>-<span class="hljs-keyword">all</span>     <span class="hljs-built_in">remove</span> <span class="hljs-keyword">all</span> <span class="hljs-built_in">reverse</span> socket connections from device<br></code></pre></td></tr></table></figure><h2 id="PC-使用-Android-手机代理上网的方法"><a href="#PC-使用-Android-手机代理上网的方法" class="headerlink" title="PC 使用 Android 手机代理上网的方法"></a>PC 使用 Android 手机代理上网的方法</h2><p>首先在手机上开启 socks5 代理 127.0.0.1:9999, 然后用 USB 数据线连接 Android 手机和 PC，在 PC 中执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb forward tcp:7890 tcp:9999<br></code></pre></td></tr></table></figure><p>这样会把 PC 127.0.0.1:7890 转发到手机 127.0.0.1:9999</p><p>使用 <code>adb forward --list</code> 查看连接建立情况</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">94e22910</span> tcp:<span class="hljs-number">7890</span> tcp:<span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><p>不需要使用时，可以使用 <code>adb forward --remove</code> 移除转发</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">adb <span class="hljs-keyword">forward</span> --<span class="hljs-keyword">remove</span> tcp:<span class="hljs-number">7890</span><br></code></pre></td></tr></table></figure><p>参考 adb 的帮助，执行命令 <code>adb help</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vim">forward --<span class="hljs-keyword">list</span>           <span class="hljs-keyword">list</span> <span class="hljs-keyword">all</span> forward socket connections<br>forward [--<span class="hljs-keyword">no</span>-rebind] LOCAL REMOTE<br>    forward socket connection using:<br>      tcp:<span class="hljs-symbol">&lt;port&gt;</span> (<span class="hljs-symbol">&lt;local&gt;</span> may <span class="hljs-keyword">be</span> <span class="hljs-string">&quot;tcp:0&quot;</span> <span class="hljs-keyword">to</span> pick any <span class="hljs-keyword">open</span> port)<br>      localabstract:&lt;unix domain socket name&gt;<br>      localreserved:&lt;unix domain socket name&gt;<br>      localfilesystem:&lt;unix domain socket name&gt;<br>      dev:&lt;character device name&gt;<br>      jdwp:&lt;process pid&gt; (remote <span class="hljs-keyword">only</span>)<br>      vsock:<span class="hljs-symbol">&lt;CID&gt;</span>:<span class="hljs-symbol">&lt;port&gt;</span> (remote <span class="hljs-keyword">only</span>)<br>      acceptfd:<span class="hljs-symbol">&lt;fd&gt;</span> (listen <span class="hljs-keyword">only</span>)<br>forward --<span class="hljs-built_in">remove</span> LOCAL   <span class="hljs-built_in">remove</span> specific forward socket connection<br>forward --<span class="hljs-built_in">remove</span>-<span class="hljs-keyword">all</span>     <span class="hljs-built_in">remove</span> <span class="hljs-keyword">all</span> forward socket connections<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] 在 ColorOS 上免 root 玩机，请先打开这个开关 - 克莱德 2021.06.08<br><a href="https://sspai.com/post/67110">https://sspai.com/post/67110</a></p><p>[2] 在 Android 手机上的使用 stunnel - zz 2021.2.24<br><a href="https://www.usmacd.com/cn/android_stunnel/">https://www.usmacd.com/cn/android_stunnel/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在一些特殊的情况下，可能需要使用 Android 手机或者 PC 的线路访问外部网络资源，同时没有条件连接 wifi 网络，这时候可以使用 Android Platform Tools 的 adb 工具来达到目的。&lt;/p&gt;
&lt;p&gt;Android Platform Tools</summary>
      
    
    
    
    
    <category term="Android" scheme="http://usmacd.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>如何写好一篇技术笔记</title>
    <link href="http://usmacd.com/cn/how_to_write_technique_note/"/>
    <id>http://usmacd.com/cn/how_to_write_technique_note/</id>
    <published>2024-02-03T16:00:00.000Z</published>
    <updated>2024-02-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>翻看前些年的笔记，发现笔记内容的详尽程度将决定未来能留下来多少有用的知识。不论记性多好，大多数内容都会随着时间遗忘在历史的长河中。在得到听了很多课程，基本上能记住的不多，最终能用上的可能还是记录下来的一些东西，古人云：「不动笔墨不读书」还是挺有道理的。</p><p>技术笔记和其他的一般笔记不同，详尽程度将决定笔记的质量，有一些十多年前的笔记我现在已经完全看不懂了，有的文档仅仅写了短短几句，明显没有写完，但真的就再也想不起任何内容了。痛定思痛后，我决定总结一篇如何写技术笔记的文章。</p><h2 id="写技术技术记笔记时，应该注意内容"><a href="#写技术技术记笔记时，应该注意内容" class="headerlink" title="写技术技术记笔记时，应该注意内容"></a>写技术技术记笔记时，应该注意内容</h2><p>写详细的记录是为了在若干年后，可以重现所有的操作，如果上下文有丢失，将遇到很大的困难。反复学习，不断迭代，所有的积累才能有效累加，为了达到这个目的，写技术笔记至少需要做到以下几点：</p><ul><li><ol><li>完整性：必须包括原始需求、先验知识、现有解决方案、具体实践、参考文献。</li></ol><ul><li>具体实践包括不但包括成功的经验还包括失败的尝试</li></ul></li><li><ol start="2"><li>严谨性：所有笔记内容都经过验证，包括参考文献中的结论，没有验证过的就说未验证。</li></ol></li><li><ol start="3"><li>可复现：完整展示环境搭建过程，命令行的所有参数，完整的命令行输出，完整的源代码和编译参数。</li></ol></li><li><ol start="4"><li>深入细节：魔鬼都在细节之中。笔记详细说明各种坑点，关键细节的细微差异。</li></ol><ul><li>刨根问底，使用调试器等工具展示底层的细节。</li></ul></li><li><ol start="5"><li>持续性：反复迭代，在自己感兴趣领域的不断积累。</li></ol></li></ul><p>失败的尝试可能是最容易忽略的地方，明明查询了很多资料，尝试了很多不同的方法，最后记录的只有成功的那一条。有一种可能，在极端的情况下，所有的尝试都失败了，是不是就完全放弃了？<br>如果记录了所有失败的尝试，过一段时间后，你可能重新尝试，但有个前提上下文没有丢失，不然很可能重复走上次失败的尝试。</p><h2 id="参考资料的学问"><a href="#参考资料的学问" class="headerlink" title="参考资料的学问"></a>参考资料的学问</h2><p>我以前写参考资料的时候，只有一个链接，总是觉得这样就足够了，最近感觉应该要写个标题，这样一下就可以看出参考资料的主题。但如果只记录参考资料的链接和标题，其实是存在信息缺失的。<br>从技术演进的角度看，文章发表的时间是非常有意义的，从总体上看技术是进步的，我们应该优先学习先进的方法。作者信息则可以让我们认识领域的专家，靠谱的作者的可信度，应该上调一个级别。</p><p>scz 在微博上举例利用参考资料的时间信息，搜索的例子：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">有些十多年前的微软blog，可能形如:<br>h__p://blogs.technet.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">b</span>/<span class="hljs-symbol">&lt;part0&gt;</span>/archive/<span class="hljs-symbol">&lt;year&gt;</span>/<span class="hljs-symbol">&lt;month&gt;</span>/<span class="hljs-symbol">&lt;day&gt;</span>/<span class="hljs-symbol">&lt;part1&gt;</span>.aspx<br>原链接肯定不存在了，其中一部分可以换成下面这种样子去访问<br>h__ps://learn.microsoft.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">en</span>-us/archive/blogs/<span class="hljs-symbol">&lt;part0&gt;</span>/<span class="hljs-symbol">&lt;part1&gt;</span><br></code></pre></td></tr></table></figure><p>所以，参考资料应该记录：标题、作者、日期、链接</p><h2 id="严谨的记录带来一种有序"><a href="#严谨的记录带来一种有序" class="headerlink" title="严谨的记录带来一种有序"></a>严谨的记录带来一种有序</h2><p>严谨的记录是对内心的一种拷问，要求不断地问自己是否真搞清楚了，有没有遗漏前提条件，是否只是某种巧合。严谨的记录带来一种新的有序，不断完善的基础概念，不断增加的各种尝试&#x2F;方法，从而提供跨出知识边界，跳出思维定势的可能性。</p><h2 id="记笔记的态度比笔记方法重要"><a href="#记笔记的态度比笔记方法重要" class="headerlink" title="记笔记的态度比笔记方法重要"></a>记笔记的态度比笔记方法重要</h2><p>笔记是一笔可以积累的财富，认真写笔记可以在未来的时间里获得复利，态度决定一切，这比所谓第二大脑，卡片笔记法都重要。任何可以持续积累并获得进步的习惯应该坚持下去。对于个人成长来说，不断记录，不断总结，不断分析，才能螺旋前进。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以 scz 的话结尾：</p><blockquote><p>若自己写的技术文档三个月之后乃至更长时间跨度，不能指导自己的相关工作，该文档严重不合格。该标准很靠谱，诸君可自行检验。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] 网络安全学习方法之一  scz    2023-09-07 19:43<br>    <a href="https://scz.617.cn/misc/202309071943.txt">https://scz.617.cn/misc/202309071943.txt</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;翻看前些年的笔记，发现笔记内容的详尽程度将决定未来能留下来多少有用的知识。不论记性多好，大多数内容都会随着时间遗忘在历史的长河中。在得到听了很多课程，基本上能记住的不多，最终能用上的可能还是记录下来的一些东西，古人云：「不动笔墨不读书」还是挺有道理的。&lt;/p&gt;
&lt;p&gt;技术笔</summary>
      
    
    
    
    
    <category term="PKM" scheme="http://usmacd.com/tags/PKM/"/>
    
  </entry>
  
  <entry>
    <title>《笔记的方法》 如何做筛选，获取高质量信息</title>
    <link href="http://usmacd.com/cn/how_to_get_good_info/"/>
    <id>http://usmacd.com/cn/how_to_get_good_info/</id>
    <published>2024-01-31T16:00:00.000Z</published>
    <updated>2024-02-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在信息爆炸时代，我觉得研究如何获得有效信息是非常重要的。在《笔记的方法》中，少楠分享了如何获取优质的信息的方法，分别是：</p><ul><li>做减法：削减你的信息</li><li>做加法：添加书本以外的信息源</li><li>做乘法：用多重视角看待信息</li></ul><h2 id="做减法：削减你的信息源"><a href="#做减法：削减你的信息源" class="headerlink" title="做减法：削减你的信息源"></a>做减法：削减你的信息源</h2><p>稀缺的不是信息，而是我们的注意力。我们需要避免信息过载，分散我们的注意力，这样才能专注有价值的信息。</p><h3 id="方法1：削减利用你情绪的信息源"><a href="#方法1：削减利用你情绪的信息源" class="headerlink" title="方法1：削减利用你情绪的信息源"></a>方法1：削减利用你情绪的信息源</h3><ul><li>比如将被 GPT 取代的 30 个岗位，其中有你的吗？</li></ul><h3 id="方法2：削减让自己过于舒适的信息源"><a href="#方法2：削减让自己过于舒适的信息源" class="headerlink" title="方法2：削减让自己过于舒适的信息源"></a>方法2：削减让自己过于舒适的信息源</h3><ul><li>比如没有增量信息，不能带来新知和启发信息源</li><li>观点很熟悉和认同的信息源，容易培养惰性</li></ul><h3 id="方法3：削减缺乏具体事实的信息源"><a href="#方法3：削减缺乏具体事实的信息源" class="headerlink" title="方法3：削减缺乏具体事实的信息源"></a>方法3：削减缺乏具体事实的信息源</h3><ul><li>没有事实依据、大量春秋笔法、不符合基本逻辑的过于主观的观点的信息源</li></ul><h2 id="做加法：添加书本以外的信息源"><a href="#做加法：添加书本以外的信息源" class="headerlink" title="做加法：添加书本以外的信息源"></a>做加法：添加书本以外的信息源</h2><ul><li>书本信息的第一个问题：书本上的知识不够及时，跟不上新技术</li><li>书本信息的第二个问题：书本上学来的大多是理论，理论和实际情况总是有些差别</li></ul><h3 id="方法1：把他人作为信息源，听实践者言"><a href="#方法1：把他人作为信息源，听实践者言" class="headerlink" title="方法1：把他人作为信息源，听实践者言"></a>方法1：把他人作为信息源，听实践者言</h3><ul><li>1）听实践者讲述事实时，注意他在叙述过程中提及的细节。充满细节的事实信息，远比充满戏剧性的宏大叙事更有价值</li><li>2）听实践者讲述事实时，重点听他复盘失败的经历</li><li>3）尽量不要看第三方的叙述，而要看实践者自己写的文章或接受的采访，确保得到一手的信息</li></ul><h3 id="方法2：亲自下场实践"><a href="#方法2：亲自下场实践" class="headerlink" title="方法2：亲自下场实践"></a>方法2：亲自下场实践</h3><ul><li>1）现场观察，现场调研</li><li>2）投入时间，投入金钱，亲身感受</li></ul><h2 id="做乘法：用多重视角看待信息"><a href="#做乘法：用多重视角看待信息" class="headerlink" title="做乘法：用多重视角看待信息"></a>做乘法：用多重视角看待信息</h2><h3 id="方法1-考察概念"><a href="#方法1-考察概念" class="headerlink" title="方法1: 考察概念"></a>方法1: 考察概念</h3><ul><li>向下看，将模糊的概念界定地更清晰，对客观事物、客观事实的认识会更加深入</li></ul><h3 id="方法2-寻找范式"><a href="#方法2-寻找范式" class="headerlink" title="方法2: 寻找范式"></a>方法2: 寻找范式</h3><ul><li>向上看，寻找可迁移范式，抽象一层</li></ul><h3 id="方法3-顺藤摸瓜"><a href="#方法3-顺藤摸瓜" class="headerlink" title="方法3: 顺藤摸瓜"></a>方法3: 顺藤摸瓜</h3><ul><li>向四周看, 找到信息相关联的线索，逐一捋清</li></ul><h2 id="多个独立信息源，交叉验证"><a href="#多个独立信息源，交叉验证" class="headerlink" title="多个独立信息源，交叉验证"></a>多个独立信息源，交叉验证</h2><p>这点是我补充的，独立信息源很重要，有些时候多个地方的信息其实来自同一个信息源，这样的信息仍然是不可靠的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在信息爆炸时代，我觉得研究如何获得有效信息是非常重要的。在《笔记的方法》中，少楠分享了如何获取优质的信息的方法，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;做减法：削减你的信息&lt;/li&gt;
&lt;li&gt;做加法：添加书本以外的信息源&lt;/li&gt;
&lt;li&gt;做乘法：用多重视角看待信息&lt;/li&gt;
</summary>
      
    
    
    
    
    <category term="PKM" scheme="http://usmacd.com/tags/PKM/"/>
    
  </entry>
  
  <entry>
    <title>卡片盒笔记法总体思路与工作流</title>
    <link href="http://usmacd.com/cn/zel_note_flow/"/>
    <id>http://usmacd.com/cn/zel_note_flow/</id>
    <published>2024-01-28T16:00:00.000Z</published>
    <updated>2024-01-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我经常在少数派等网站上看到卡片盒笔记的文章，这些文章少则几千字，多则上万字。过于复杂的方法是很难实践的，我尝试用一种简单的方法把卡片盒笔记法说清楚，希望能给大家带来一些帮助。</p><h2 id="卡片盒笔记法核心要义"><a href="#卡片盒笔记法核心要义" class="headerlink" title="卡片盒笔记法核心要义"></a>卡片盒笔记法核心要义</h2><p>1）用自己的话记录最感兴趣，最有用的知识，记录自己的洞见，而不是单纯记录信息<br>2）处理各种想法，探寻想法之间的关联、冲突、拓展，建立成熟的想法集群，并和其他的想法集群联系在一起<br>3) 针对项目或主题调整笔记顺序，根据笔记的邻近度聚合不同的想法，从更高的思维层次上完成各个想法的再拼图</p><h2 id="卡片盒笔记法的关键思路"><a href="#卡片盒笔记法的关键思路" class="headerlink" title="卡片盒笔记法的关键思路"></a>卡片盒笔记法的关键思路</h2><p>卢曼的卡片盒笔记系统不使用预先设定的系统的次序，不按照主题、子主题的方式存放笔记，而是使用固定编号的系统结构。</p><ul><li>卢曼认为卡片盒笔记系统和我们自己是不断发展的，不可能提前几十年就把笔记束缚在某个次序上。</li><li>使用固定编号的方法，将减少我们安排笔记位置的复杂性，使我们可以创造高度复杂的笔记卡片。</li><li>使用固定编号是任意基于内容的系统结构的抽象，将使我们的卡片和笔记系统达到一个更高类型的秩序。</li></ul><p>卢曼的卡片盒笔记系统使用固定编号的方法标记唯一的一条笔记，这种编号系统有很大的优势。</p><ul><li>固定编号使笔记之间能够相互连接</li><li>固定编号使笔记能够任意的内部分叉 (internal branching)，内部生长 (internal growth)</li></ul><hr><ul><li>57&#x2F;12<ul><li>57&#x2F;12a<ul><li>57&#x2F;12a1</li><li>57&#x2F;12a2</li></ul></li><li>57&#x2F;12b</li></ul></li><li>57&#x2F;13</li></ul><hr><p>由于缺乏系统的顺序，需要维护关键字登记册（Register），登记册用于查找笔记，固定编号对于登记册来说是不可或缺的。(这里说的登记册相当于索引卡片)</p><h2 id="四种不同类型笔记"><a href="#四种不同类型笔记" class="headerlink" title="四种不同类型笔记"></a>四种不同类型笔记</h2><p>闪念笔记 ( fleeting notes )，记录脑海中闪过的想法 （必须拥有随时记录想法的工具）</p><p>文献笔记 ( literature notes )，阅读资料都要记笔记，用自己的话记简要记录不想遗忘的、感兴趣的内容。</p><ul><li>内容要精心选择，引文要格外挑剔</li><li>记录参考资料的细节，利于后期跟踪回顾</li></ul><p>永久笔记 ( permanent notes )，参考前两类笔记，用完整的句子准确记录新的想法</p><ul><li>思考前两类笔记和自己的研究、感兴趣的内容，和近期的思考是否有关联</li><li>新输入的信息是否和以前记录的信息或者脑海里的想法有矛盾，互相印证，或者产生了新的想法。新想法是否又引出了什么新问题？</li><li>用完整的句子准确记录新的想法，标注来源和参考资料，做到精确、清晰、简短。</li></ul><p>项目笔记 ( project notes ), 项目笔记只和某个特定的项目有关，项目结束后可以归档或者丢弃</p><ul><li>待办事项、备忘录、文献收集、草稿片段和手稿评论等</li></ul><h2 id="四种不同类型的索引卡片"><a href="#四种不同类型的索引卡片" class="headerlink" title="四种不同类型的索引卡片"></a>四种不同类型的索引卡片</h2><ul><li>主题索引，汇集所有主题相关的笔记，每条笔记用几个关键词简要说明核心内容</li><li>卡片索引，逻辑相关笔记的前一条和后一条，这些笔记可能并不相互邻近</li><li>关联索引，位置相近的不同主题的概览，这些笔记可能具有相同的某个更大主题</li><li>双向索引，两条笔记可以完全没有关系，关联到一起却有可能出现预想不到的效果</li></ul><h2 id="卡片盒笔记法工作流-workflow"><a href="#卡片盒笔记法工作流-workflow" class="headerlink" title="卡片盒笔记法工作流 (workflow)"></a>卡片盒笔记法工作流 (workflow)</h2><h3 id="步骤1：收集资料，写资源笔记"><a href="#步骤1：收集资料，写资源笔记" class="headerlink" title="步骤1：收集资料，写资源笔记"></a>步骤1：收集资料，写资源笔记</h3><ul><li>关注 P.A.R.A 里 Areas 里的领域和 Resources 里感兴趣主题相关的书籍、文章、论文等资料，将他们保存到资料库</li><li>一份资料写一条资源笔记 (block)，在资源笔记中链接原始出处</li></ul><h3 id="步骤2：捕捉灵感，写闪念笔记"><a href="#步骤2：捕捉灵感，写闪念笔记" class="headerlink" title="步骤2：捕捉灵感，写闪念笔记"></a>步骤2：捕捉灵感，写闪念笔记</h3><ul><li>我们可以使用快速笔记软件简要记录飞逝的灵感，在时间紧迫的情况下可以只记录关键字。</li></ul><h3 id="步骤3：阅读资料，写引文笔记"><a href="#步骤3：阅读资料，写引文笔记" class="headerlink" title="步骤3：阅读资料，写引文笔记"></a>步骤3：阅读资料，写引文笔记</h3><ul><li>我们在阅读资料时为每一份资源创建一个页面 (page)，在这个页面中链接原始的资源笔记</li><li>在阅读资料时将感兴趣的引文加粗 ，将加粗后的引文保存在为资料创建的的页面里</li><li>在阅读资料时将最好的引文高亮，这样的引文是加粗的并且是高亮的</li></ul><h3 id="步骤4：参考引文笔记，写文献笔记"><a href="#步骤4：参考引文笔记，写文献笔记" class="headerlink" title="步骤4：参考引文笔记，写文献笔记"></a>步骤4：参考引文笔记，写文献笔记</h3><ul><li>参考引文笔记写文献笔记，做到精简摘要的核心原则：原子原则，用自己的话，保留上下文</li><li>将文献笔记和参考的引文原文 block 做连接</li></ul><h3 id="步骤5：参考闪念笔记和文献笔记，写永久笔记"><a href="#步骤5：参考闪念笔记和文献笔记，写永久笔记" class="headerlink" title="步骤5：参考闪念笔记和文献笔记，写永久笔记"></a>步骤5：参考闪念笔记和文献笔记，写永久笔记</h3><ul><li>参考闪念笔记和文献笔记写永久笔记，永久笔记需要用完整的句子记录新的想法 (洞见)。</li><li>将永久笔记和文献笔记做链接，将永久笔记和其他永久笔记做链接</li><li>如果写永久笔记时参考了闪念笔记，将闪念笔记归档或者删除</li></ul><h3 id="步骤6：参考永久笔记，写-MOCs-笔记"><a href="#步骤6：参考永久笔记，写-MOCs-笔记" class="headerlink" title="步骤6：参考永久笔记，写 MOCs 笔记"></a>步骤6：参考永久笔记，写 MOCs 笔记</h3><ul><li>当永久笔记积累到一定数量，基于永久笔记的内容邻近度使用 MOCs 自顶向下组织相关内容</li></ul><h3 id="步骤7：定期漫游笔记-Random-Notes"><a href="#步骤7：定期漫游笔记-Random-Notes" class="headerlink" title="步骤7：定期漫游笔记 (Random Notes)"></a>步骤7：定期漫游笔记 (Random Notes)</h3><ul><li>在漫游笔记过程中用新视角去审视旧想法，不断迭代自已的想法，螺旋前进。</li></ul><h3 id="步骤8：定期制作索引卡片"><a href="#步骤8：定期制作索引卡片" class="headerlink" title="步骤8：定期制作索引卡片"></a>步骤8：定期制作索引卡片</h3><ul><li>为了能够方便的索引我们的笔记，需要制作索引卡片，按照不同的主题整理。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p>定期回顾笔记的好处<br><a href="https://www.usmacd.com/cn/note_review/">https://www.usmacd.com/cn/note_review/</a></p></li><li><p>关于笔记的一些思考<br><a href="https://www.usmacd.com/cn/note/">https://www.usmacd.com/cn/note/</a></p></li><li><p>Communicating with slip boxes - Niklas Luhmann<br><a href="https://luhmann.surge.sh/communicating-with-slip-boxes">https://luhmann.surge.sh/communicating-with-slip-boxes</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我经常在少数派等网站上看到卡片盒笔记的文章，这些文章少则几千字，多则上万字。过于复杂的方法是很难实践的，我尝试用一种简单的方法把卡片盒笔记法说清楚，希望能给大家带来一些帮助。&lt;/p&gt;
&lt;h2 id=&quot;卡片盒笔记法核心要义&quot;&gt;&lt;a href=&quot;#卡片盒笔记法核心要义&quot; cla</summary>
      
    
    
    
    
    <category term="PKM" scheme="http://usmacd.com/tags/PKM/"/>
    
  </entry>
  
  <entry>
    <title>python3 pip loading egg is deprecated 警告的解决方法</title>
    <link href="http://usmacd.com/cn/egg-is-deprecated/"/>
    <id>http://usmacd.com/cn/egg-is-deprecated/</id>
    <published>2024-01-16T16:00:00.000Z</published>
    <updated>2024-02-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决-egg-is-deprecation-警告"><a href="#解决-egg-is-deprecation-警告" class="headerlink" title="解决 egg is deprecation 警告"></a>解决 egg is deprecation 警告</h2><p>python3 -m pip install some_package 时发现 exploitable 有警告：</p><blockquote><p>DEPRECATION: Loading egg at exploitable-1.32-py3.12.egg is deprecated. pip 24.3 will enforce this behaviour change. A possible replacement is to use pip for package installation.<br>Discussion can be found at <a href="https://github.com/pypa/pip/issues/12330">https://github.com/pypa/pip/issues/12330</a></p></blockquote><p>pip 24.3 将废弃 egg 形式的 python package, 根据 github issue [1] 的信息 pip 24.3 将在 October 2024 发布。可以使用下面的方法，要去掉上面的警告信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br><span class="hljs-built_in">cd</span> exploitable_src_dir<br><br><span class="hljs-comment"># 删除老的 build 结果</span><br><span class="hljs-built_in">rm</span> -rf build dist htmlcov *.egg-info<br><br><span class="hljs-comment"># 升级 pip</span><br>python3 -m pip install --upgrade build<br><br><span class="hljs-comment"># 重新 build</span><br>python3 -m build --wheel<br><br><span class="hljs-comment"># 使用 wheel 的方式安装</span><br>python3 -m pip install . --user<br><br></code></pre></td></tr></table></figure><p>一般情况下，不用重新写 pyproject.toml ，执行上面命令就可以了。</p><h2 id="在-Wheel-中添加二进制文件的方法"><a href="#在-Wheel-中添加二进制文件的方法" class="headerlink" title="在 Wheel 中添加二进制文件的方法"></a>在 Wheel 中添加二进制文件的方法</h2><p>根据python 官方的文档，MANIFEST.in 只对 source distributions (sdist) 起作用。</p><blockquote><p>MANIFEST.in does not affect binary distributions such as wheels.</p></blockquote><p>要想给 wheel 添加非纯 python 的文件，有一些困难，主要是一些使用 Extension 的 Python Package 会遇上这个问题。通过研究发现，可以控制 <code>setup.py bdist_wheel</code> 的参数达到打包so 文件的效果。</p><p>执行 <code>python3 setup.py bdist_wheel --help</code> ，可以看到详细的参数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">Options <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;bdist_wheel&#x27;</span> command:<br>  <span class="hljs-comment">--bdist-dir (-b)  temporary directory for creating the distribution</span><br>  <span class="hljs-comment">--plat-name (-p)  platform name to embed in generated filenames (default:</span><br>                    linux_x86_64)<br>  <span class="hljs-comment">--keep-temp (-k)  keep the pseudo-installation tree around after creating</span><br>                    the distribution archive<br>  <span class="hljs-comment">--dist-dir (-d)   directory to put final built distributions in</span><br>  <span class="hljs-comment">--skip-build      skip rebuilding everything (for testing/debugging)</span><br>  <span class="hljs-comment">--relative        build the archive using relative paths (default: false)</span><br>  <span class="hljs-comment">--owner (-u)      Owner name used when creating a tar file [default: current</span><br>                    <span class="hljs-keyword">user</span>]<br>  <span class="hljs-comment">--group (-g)      Group name used when creating a tar file [default: current</span><br>                    <span class="hljs-keyword">group</span>]<br>  <span class="hljs-comment">--universal       make a universal wheel (default: false)</span><br>  <span class="hljs-comment">--compression     zipfile compression (one of: stored, deflated) (default:</span><br>                    <span class="hljs-string">&#x27;deflated&#x27;</span>)<br>  <span class="hljs-comment">--python-tag      Python implementation compatibility tag (default: &#x27;py3&#x27;)</span><br>  <span class="hljs-comment">--build-number    Build number for this particular version. As specified in</span><br>                    PEP<span class="hljs-number">-0427</span>, this must <span class="hljs-keyword">start</span> <span class="hljs-keyword">with</span> a digit. [<span class="hljs-keyword">default</span>: <span class="hljs-keyword">None</span>]<br>  <span class="hljs-comment">--py-limited-api  Python tag (cp32|cp33|cpNN) for abi3 wheel tag (default:</span><br>                    <span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><p>利用<code>--bdist-dir</code> 参数，修改生成wheel distributions 的目录可以达到目的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> setuptools <span class="hljs-keyword">import</span> setup, Extension, find_packages<br><br>lib_name = Extension()<br>setup(name=<span class="hljs-string">&#x27;package_name&#x27;</span>,<br>      packages=find_packages(),<br>      package_data=&#123;<span class="hljs-string">&#x27;&#x27;</span>: [<span class="hljs-string">&#x27;*.so&#x27;</span>]&#125;,<br>      include_package_data=<span class="hljs-literal">True</span>,<br>      ...,<br>      ext_modules=[lib_name],<br>      options=&#123;<br>          <span class="hljs-string">&#x27;bdist_wheel&#x27;</span>: &#123;<span class="hljs-string">&#x27;python_tag&#x27;</span>: <span class="hljs-string">&#x27;cp30&#x27;</span>, <span class="hljs-string">&#x27;py_limited_api&#x27;</span>: <span class="hljs-string">&#x27;cp32&#x27;</span>, <span class="hljs-string">&#x27;bdist_dir&#x27;</span>: <span class="hljs-string">&#x27;build&#x27;</span>&#125;,<br>          <span class="hljs-string">&#x27;build_ext&#x27;</span>: &#123;<span class="hljs-string">&#x27;build_lib&#x27;</span>: <span class="hljs-string">&#x27;build/package_name&#x27;</span>&#125;,<br>      &#125;<br>)<br></code></pre></td></tr></table></figure><p>修改 setup.py 后，重新执行 <code>python3 -m build --wheel</code> 即可。</p><h2 id="参考信息"><a href="#参考信息" class="headerlink" title="参考信息"></a>参考信息</h2><p>[1] <a href="https://github.com/pypa/pip/issues/12330">Remove support for installed .egg distributions</a><br>[2] <a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-your-project-to-pypi">Packaging Python Projects</a><br>[3] <a href="https://docs.python.org/3.11/distutils/setupscript.html">Writing the Setup Script</a><br>[4] <a href="https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/">Packaging and distributing projects</a><br>[5] <a href="https://buildmedia.readthedocs.org/media/pdf/wheel/stable/wheel.pdf">wheel Documentation</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解决-egg-is-deprecation-警告&quot;&gt;&lt;a href=&quot;#解决-egg-is-deprecation-警告&quot; class=&quot;headerlink&quot; title=&quot;解决 egg is deprecation 警告&quot;&gt;&lt;/a&gt;解决 egg is depr</summary>
      
    
    
    
    
    <category term="Programming" scheme="http://usmacd.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>公开写作的好处和坚持不懈</title>
    <link href="http://usmacd.com/cn/public_writing/"/>
    <id>http://usmacd.com/cn/public_writing/</id>
    <published>2023-12-04T16:00:00.000Z</published>
    <updated>2023-12-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="公开写作的好处"><a href="#公开写作的好处" class="headerlink" title="公开写作的好处"></a>公开写作的好处</h2><p>只有将想法写出来的时候，你才会发现似乎严密的论证中的逻辑漏洞和无知之处，不动笔的思考往往马虎。</p><ul><li>写下你学习的东西，可以加深你对该主题的理解，有时候向别人解释时你会发现自己的知识缺口。写作不仅是一个记录的方法，它是一个加深理解和暴露知识差距的强大工具。</li><li>写作使我们更加彻底地探索主题，并以更加连贯和准确的方式清晰地表达自己的想法。</li></ul><h2 id="坚持不懈（Consistency）的重要性"><a href="#坚持不懈（Consistency）的重要性" class="headerlink" title="坚持不懈（Consistency）的重要性"></a>坚持不懈（Consistency）的重要性</h2><p>虽然动机可能会点燃写作或任何其他创造性活动的兴趣火花，但真正点燃成功之火的是持续性。</p><ul><li>构建习惯：坚持不懈有利于习惯的建立。习惯一旦建立，将形成自动的行为，需要更少的努力保持行为模式，同时更加自然并享受其中的过程</li><li>逐步提高：持续练习可以带来逐步的提高，每次练习可能获得一个很小的进步，但拉长时间看，微小的进步会积累成显著的进步</li><li>保持动力：坚持不懈有助于保持动力。定期参加练习可以不断获得灵感，并形成肌肉记忆，显著减小开始练习时的阻力。</li><li>达到长期目标：成功通常是长期持续努力的结果。坚持不懈将日常行动和长期目标结合起来，创建一条通往成功之路。</li></ul><h2 id="坚持不懈的挑战"><a href="#坚持不懈的挑战" class="headerlink" title="坚持不懈的挑战"></a>坚持不懈的挑战</h2><ul><li>克服拖延症：拖延是坚持不懈最大的障碍，制定一个有规律的时间计划表，创造一个有利的环境，都有助于克服拖延这一挑战</li><li>处理倦怠：坚持不懈并不是不休息，平衡的生活是防止倦怠的关键，休息和充电与奋力向前同样重要</li><li>管理预期：并不是每一次练习都可以获得丰硕的成果，拥抱不完美，不要太过关注直接的成果，这样才能和坚持不懈的努力建立健康的关系。</li></ul><h2 id="保持坚持不懈的策略"><a href="#保持坚持不懈的策略" class="headerlink" title="保持坚持不懈的策略"></a>保持坚持不懈的策略</h2><ul><li>设定现实的目标： 将长期目标分解成较小的、可实现的阶段性目标，注重取得的进步而非过程完美</li><li>创建例程：创建固定的例程，创建保持坚持不懈的日常安排</li><li>寻求责任感：和朋友分享你的目标或者加入群组，从别人那里获得鼓励和责任感</li><li>庆祝进步：认可并庆祝取得的进步，哪怕是微小的进步，也能产生积极的正反馈，激发继续前进的动力</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://addyosmani.com/blog/write-learn/">https://addyosmani.com/blog/write-learn/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;公开写作的好处&quot;&gt;&lt;a href=&quot;#公开写作的好处&quot; class=&quot;headerlink&quot; title=&quot;公开写作的好处&quot;&gt;&lt;/a&gt;公开写作的好处&lt;/h2&gt;&lt;p&gt;只有将想法写出来的时候，你才会发现似乎严密的论证中的逻辑漏洞和无知之处，不动笔的思考往往马虎。&lt;/p</summary>
      
    
    
    
    
    <category term="KNOWLEDGE" scheme="http://usmacd.com/tags/KNOWLEDGE/"/>
    
  </entry>
  
  <entry>
    <title>VMware Workstation Windows 10 host Ubuntu 18.04 Guest 中加载 Linux 内核 kvm 模块</title>
    <link href="http://usmacd.com/cn/qemu_kvm/"/>
    <id>http://usmacd.com/cn/qemu_kvm/</id>
    <published>2023-11-27T16:00:00.000Z</published>
    <updated>2023-11-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里在 VMware Workstation Guset OS 里使用 qemu 的用法，有点像俄罗斯套娃。</p><p>qemu.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">qemu-system-x86_64 \<br>  -m 2G \<br>  -smp 2 \<br>  -kernel <span class="hljs-variable">$KERNEL</span>/arch/x86——64/boot/bzImage \<br>  -append <span class="hljs-string">&quot;console=ttyS0 root=/dev/sda earlyprintk=serial net.ifnames=0&quot;</span> \<br>  -drive file=<span class="hljs-variable">$IMAGE</span>/bullseye.img,format=raw \<br>  -net user,host=10.0.2.10,hostfwd=tcp:127.0.0.1:10021-:22 \<br>  -net nic,model=e1000 \<br>  -enable-kvm \<br>  -nographic \<br>  -pidfile vm.pid \<br>  2&gt;&amp;1 | <span class="hljs-built_in">tee</span> vm.log<br></code></pre></td></tr></table></figure><p>执行命令后 <code>bash ./qemu.sh</code> 后报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">Could not access KVM kernel module: No such file or directory. <br>qemu-system-x86_64: failed to initialize KVM: No such file or directory<br></code></pre></td></tr></table></figure><h2 id="解决-failed-to-initialize-KVM-错误"><a href="#解决-failed-to-initialize-KVM-错误" class="headerlink" title="解决 failed to initialize KVM 错误"></a>解决 failed to initialize KVM 错误</h2><p><code>lsmod | grep -i kvm</code> 发现没有加载 kvm 内核模块</p><p>使用 kvm-ok 检查具体情况。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo /usr/sbin/kvm-ok<br><br>INFO: Your CPU does not support KVM extension<br>KVM acceleration can NOT be used<br></code></pre></td></tr></table></figure><p>首先检查 VMware Workstation 的设置，发现处理器没有勾选虚拟化相关的设置。</p><ul><li>关机，调整 VMware 设置，设置 -&gt; 硬件 -&gt; 处理器 -&gt; 虚拟化引擎 -&gt; 选择 虚拟化 Intel VT-x &#x2F; EPT 或 AMD-V &#x2F; RVI</li></ul><p>重新打开 Ubuntu Guest 虚拟机报错 <code>此平台不支持虚拟化的Intel VT-x/EPT</code></p><h2 id="解决此平台不支持虚拟化的Intel-VT-x-EPT"><a href="#解决此平台不支持虚拟化的Intel-VT-x-EPT" class="headerlink" title="解决此平台不支持虚拟化的Intel VT-x&#x2F;EPT"></a>解决此平台不支持虚拟化的Intel VT-x&#x2F;EPT</h2><p>首先检查 BIOS 的设置是否正确，任务右键打开任务管理器 -&gt; 性能 -&gt; CPU 右下角，虚拟化：已启用，说明 BIOS 设置没有问题。</p><p>网络上的资料说需要禁用 Hyper-V，使用命令行的方法比较方便。</p><ul><li>以管理员权限打开 CMD 执行命令 <code>bcdedit /set hypervisorlaunchtype off</code> 关闭 hypervisorlaunchtype，重启系统</li></ul><p>重新执行 <code>/usr/sbin/kvm-ok</code> 显示一切正常</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">INFO:</span> <span class="hljs-keyword">/dev/</span>kvm exists<br>KVM acceleration can be used<br></code></pre></td></tr></table></figure><p><code>egrep &quot;vmx|svm&quot; /proc/cpuinfo</code> 匹配 vmx，<code>lsmod | grep -i kvm</code> 显示加载了 <code>kvm_intel</code> 和 <code>kvm</code> 内核模块。</p><p>重新验证 Ubuntu Guest 里 qemu 是否正常工作，执行执行 qemu.sh，报错 <code>Could not access KVM kernel module: Permission denied</code></p><h2 id="解决-failed-to-initialize-KVM-Permission-denied"><a href="#解决-failed-to-initialize-KVM-Permission-denied" class="headerlink" title="解决 failed to initialize KVM: Permission denied"></a>解决 failed to initialize KVM: Permission denied</h2><p>看上去是权限问题，将当前用户添加在 kvm 组，<code>sudo usermod -a -G kvm &quot;test&quot;</code>，重启系统，执行 <code>bash ./qemu.sh</code> 成功启动</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">early <span class="hljs-built_in">console</span> in setup code<br>early <span class="hljs-built_in">console</span> in extract_kerne<br>...<br></code></pre></td></tr></table></figure><p>此文档可能有不完备之处，后续会继续更新此文档。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.xda-developers.com/disable-hyper-v-windows-11/">https://www.xda-developers.com/disable-hyper-v-windows-11/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里在 VMware Workstation Guset OS 里使用 qemu 的用法，有点像俄罗斯套娃。&lt;/p&gt;
&lt;p&gt;qemu.sh&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    
    <category term="linux" scheme="http://usmacd.com/tags/linux/"/>
    
    <category term="Security" scheme="http://usmacd.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>comprehensible input  英语学习方法</title>
    <link href="http://usmacd.com/cn/learning_english/"/>
    <id>http://usmacd.com/cn/learning_english/</id>
    <published>2023-11-22T16:00:00.000Z</published>
    <updated>2023-11-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>youtube 上有 youtuber 在不出国的情况下，将第二外语学习到母语者水平的成功案例。</p><p>Makoto 是一位会说中日英三门语言的 Youtuber，他总结自己学习第二外语的成功经验，可以简单地归纳成一句话：掌握第二外语最重要的是必须有大量地道的 comprehensible input (可理解的输入)。</p><p>Comprehensible input 是 Stephen D. Krashen 提出的语言习得假说，强调语言学习是获得的，而不是通过学习得到的。听力或者阅读获取的内容都可以是有效的输入，获取内容的语言难度必须略高于学习者的水平。</p><p>多大的地道语言输入量才是合适的 ？Makoto 推荐的时长为 1 个小时，30 分钟后休息 5 分钟，然后再继续下一个 30 分钟的学习。</p><p>Youtuber Makoto comprehensible input 英语学习具体步骤：<br>1）使用传统的学习方法，掌握 2000 个单词<br>2）在 youtube 上看视频，打开字幕边看边听，接受一些搞不懂的内容 (如果大量单词不认识就放弃)<br>3）在 youtube 上看视频，如果难度不够 (能听懂 80%以上)，就提高难度<br>4）将口语练习放到最后的步骤，只有输入够了，才能说出地道的外语</p><p>从理解内容到流利地说还有一段距离，Makoto 使用的方法是付费真人聊天，算是比较常规的方法。详细内容可以参考原视频。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;youtube 上有 youtuber 在不出国的情况下，将第二外语学习到母语者水平的成功案例。&lt;/p&gt;
&lt;p&gt;Makoto 是一位会说中日英三门语言的 Youtuber，他总结自己学习第二外语的成功经验，可以简单地归纳成一句话：掌握第二外语最重要的是必须有大量地道的 co</summary>
      
    
    
    
    
    <category term="KNOWLEDGE" scheme="http://usmacd.com/tags/KNOWLEDGE/"/>
    
  </entry>
  
  <entry>
    <title>定期回顾笔记的好处</title>
    <link href="http://usmacd.com/cn/note_review/"/>
    <id>http://usmacd.com/cn/note_review/</id>
    <published>2023-11-14T16:00:00.000Z</published>
    <updated>2023-11-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>少楠在 《笔记的方法》中介绍了一种 「通过回顾持续刺激」的笔记技术，我以前曾简称为「漫游笔记」技术。</p><p>定期回顾自己的笔记大体有下面几个好处：</p><ul><li>对抗遗忘曲线：尤其是文献笔记等自己不熟悉的笔记</li><li>推动知识内化，想法迭代：知识结构优化，新旧知识连接</li><li>遇见过去的自己 （挺好玩，挺有趣）</li><li>影响现实：促进自我审视，提供思路和线索</li></ul><p>对抗遗忘曲线：我们可能遗忘笔记的内容，尤其是文献笔记等不熟悉的内容。人的思维、行为、习惯具有惯性，观念、思维、方法并不容易改变，必须不断提醒自己。</p><p>知识内化：前提是笔记的上下文没有丢失，如果看不懂笔记了，笔记就失去了价值。所以，这里有一个关键点，笔记是写给未来的自己看的，应该假设未来的自己对文本背后的思想，原文背景一无所知，只具备相关的领域知识。</p><p>子曰：「温故而知新，可以为师矣」回顾笔记提供了再次学习的机会，不断加深对知识的理解，也能促进新的洞见的产生。</p><p>想法迭代：回顾笔记是用新视角去审视旧想法，总体来说人是会不断进步的，经过一段时间后再去重温自己某个时刻的想法，可能以前的一些疑惑现在已经没有了，也可能对某个问题有了更进一步的思路，这是促使想法迭代的一种方法。</p><p>影响现实：如果你长期关注特定的领域，以前的笔记可能给你现在做的事提供思路和线索，幸运的话，能迸发出新的灵感。</p><p>回顾笔记提供了过去和现在连接的机会。现在是否具备实践的机会？笔记中的思路、方法、知识都已经成功应用了吗？计划是否如期完成？错误是否已经纠正？坦诚地面对过去的自己，回到现实，可能你将迎来崭新的自己。</p><p>参考：<a href="https://www.usmacd.com/cn/note/">https://www.usmacd.com/cn/note/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;少楠在 《笔记的方法》中介绍了一种 「通过回顾持续刺激」的笔记技术，我以前曾简称为「漫游笔记」技术。&lt;/p&gt;
&lt;p&gt;定期回顾自己的笔记大体有下面几个好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对抗遗忘曲线：尤其是文献笔记等自己不熟悉的笔记&lt;/li&gt;
&lt;li&gt;推动知识内化，想法迭代：知</summary>
      
    
    
    
    
    <category term="PKM" scheme="http://usmacd.com/tags/PKM/"/>
    
  </entry>
  
  <entry>
    <title>万维钢谈第一性原理</title>
    <link href="http://usmacd.com/cn/diyixingyuanli/"/>
    <id>http://usmacd.com/cn/diyixingyuanli/</id>
    <published>2023-11-13T16:00:00.000Z</published>
    <updated>2023-11-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>伊隆·马斯克解释 第一性原理，我们思考老问题，不一定需要使用类比思维考虑前人的做法，直接从最基本的原理出发，可能会找到全新的办法。创业者说第一性原理，精神的主旨为「抛开成见，拒绝套路」，回到最基本的限制条件，重新认识和解决问题。</p><p>马斯克使用第一性原理计算电池价值的例子，可能不太正确。电池的根本价值，重要的不是组成它的材料，而是材料的结合方式 - 凝结在它身上的信息。电池身上的信息，是技术和专利，这是几代人智慧的结晶。</p><p>从物理学上说，所谓第一性原理，是最基本的物理定律。数学学科的所有内容都是建立在第一性原理上的，从几条公理出发，推导出各种定律，所以数学是百分之百正确的学科。</p><p>从第一性原理出发做计算，有时候问题太复杂了，科学家不能使用第一性原理时，通常有两个解法方法：<br>1）把问题简化，做一些基本假设，忽略一些「次要」条件，这些假设构成一个模型，基于模型的计算，结果可能错误<br>2）淡化计算，借助历史经验（实验），比如化学和材料科学，大量的知识是实验积累的结果，不是谁从基本物理定律算出来</p><p>模型和经验既然不是从第一性原理出发的，就有可能是错的，就有被改进的余地，将来就有可能被取代。而取代它们的，往往是更好的……模型和经验。</p><p>马斯克的精神是对的，我们不应被前人的经验束缚，应该改革和创新。但是我们需要知道，什么情况下忽略前人的经验才是理性的行为。<br>1）有了新的工具：比如有新的工具让你对事物有了全新的理解或更深的理解<br>2）环境变了：比如今天的基础设施、原材料价格、消费者状况和以前有重大差别，老一套的方法不使用了，你就需要一个全新的商业模式</p><p>万维钢：作为一个前物理学家，我对第一性原理的第一反应是最基本的物理定律，所以谁跟我说要从第一性原理出发、重新建立一套新东西，我深表怀疑 —— 因为我尊重人类文明。</p><p>SpaceX 为什么可以使用第一性原理</p><ol><li>航天不是一个竞争充分有效的市场：航天基本是 NASA 垄断的领域，NASA 自己基本上只负责设计和科学研究，它会把火箭的制造工程转包给各个小公司</li><li>NASA 现在不怎么创新：NASA 在科学探索方面没问题，一直在进步，但它就像其他大型企业一样，得了大企业病。流程会让公司一直按照惯性行事</li></ol><p>《像火箭科学家一样思考》书中，瓦罗尔分析了 SpaceX 使用第一性原理的 6 个办法</p><ul><li>尽量不外包，80%的零部件自己生产</li><li>采购的方式更加灵活：可能到 ebay，废品厂去买二手零部件</li><li>和大市场对接：利用民用的产业链做火箭 (可能是最重要的一点)</li><li>回收，尽量重复使用火箭</li><li>用人不只用航天人才，也到大市场找人：从汽车、手机等快速迭代的领域寻找人才</li><li>“奥姆卡剃刀”，尽量简化制造流程</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;伊隆·马斯克解释 第一性原理，我们思考老问题，不一定需要使用类比思维考虑前人的做法，直接从最基本的原理出发，可能会找到全新的办法。创业者说第一性原理，精神的主旨为「抛开成见，拒绝套路」，回到最基本的限制条件，重新认识和解决问题。&lt;/p&gt;
&lt;p&gt;马斯克使用第一性原理计算电池价</summary>
      
    
    
    
    
    <category term="KNOWLEDGE" scheme="http://usmacd.com/tags/KNOWLEDGE/"/>
    
  </entry>
  
  <entry>
    <title>个人对技术分析的一些理解</title>
    <link href="http://usmacd.com/cn/jishufenxi/"/>
    <id>http://usmacd.com/cn/jishufenxi/</id>
    <published>2023-11-13T16:00:00.000Z</published>
    <updated>2023-11-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>技术分析分三个层次：趋势跟随、支撑&#x2F;阻力，模式识别  (分先后顺序，靠前的重要)。</p></li><li><p>金融投资中的技术分析工具最主要的作用是区别出哪些标的不可以交易，所谓不可以交易就是从概率上讲胜算不理想。顺势交易的胜率要远远超过逆势交易，技术分析工具则可以帮我们识别出「正确的方向」。</p></li><li><p>传统技术分析多数利用模式识别或者统计学的方法来识别交易机会，这些方法没法从底层逻辑上进行剖析，只是在概率上有一定优势罢了，实战起来就是有时灵验有时不灵验了。</p></li><li><p>但技术分析并不是毫无价值，如果把市场看成是一个复杂系统，复杂系统的重要特征在不同层级涌现出分形自相似，从分形结构上分析基础就扎实了很多。</p></li><li><p>传统的波浪理论是对市场进行分形分析的一次尝试，但并没有分析出基本结构，出现了千人千浪的现象，无法精确的指导交易。</p></li><li><p>缠中说禅「李彪」大师的 「缠论」有了新的进展，笔、线段、中枢的说法令人耳目一新，可惜天妒英才，大师尚未全面阐述理论就离我们而去。</p></li><li><p>如果研究市场的时间长了，基本上都会涉及到 复杂系统，耗散结构理论，混沌理论 等方面的知识去。技术分析到后面，基本会涉及到是市场基本结构形态和动力学。</p></li><li><p>「不存在可以终结所有准则的准则」，技术分析工具是设计来解释市场现象的，但金融市场是一个复杂系统，我们难以对其行为进行建模，所以创造一个可以解释所有市场现象的模型在理论上就是行不通的。</p></li><li><p>技术分析工具只是尝试用一个模型来解释市场行为，它不具备预测市场走势的能力。因此只根据技术分析工具来进行交易是不可取的，我们需要使用更多维度的信息综合判断以提高我们的胜率。这些信息可能涉及基本面，行为经济学、经济学，政治等诸多方面的知识。</p></li><li><p>技术分析的模型在很多时候只是一种模糊的正确，只有市场的走势和模型解释一致时才代表解释可能正确。技术分析工具发出信号只代表市场行情的发展可能来到了一个关键点，这个关键点也是模糊的。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;技术分析分三个层次：趋势跟随、支撑&amp;#x2F;阻力，模式识别  (分先后顺序，靠前的重要)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;金融投资中的技术分析工具最主要的作用是区别出哪些标的不可以交易，所谓不可以交易就是从概率上讲胜算不理想。顺势交易的胜率要远远超过</summary>
      
    
    
    
    
    <category term="investment" scheme="http://usmacd.com/tags/investment/"/>
    
  </entry>
  
  <entry>
    <title>使用 afl-fuzz fuzz pdfium</title>
    <link href="http://usmacd.com/cn/pdfium-fuzz.public/"/>
    <id>http://usmacd.com/cn/pdfium-fuzz.public/</id>
    <published>2023-11-06T05:52:04.969Z</published>
    <updated>2023-11-06T05:52:04.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>先在 <a href="https://pdfium.googlesource.com/pdfium/">https://pdfium.googlesource.com/pdfium/</a> 下载源码.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> repo<br><span class="hljs-built_in">cd</span> repo<br>gclient config --unmanaged https://pdfium.googlesource.com/pdfium.git<br>gclient <span class="hljs-built_in">sync</span><br><span class="hljs-built_in">cd</span> pdfium<br></code></pre></td></tr></table></figure><p>gclient 命令在 depot_tools 中, 需要安装 参考下面的文章</p><p><a href="http://www.chromium.org/developers/how-tos/install-depot-tools">http://www.chromium.org/developers/how-tos/install-depot-tools</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git<br><span class="hljs-built_in">export</span> PATH=`<span class="hljs-built_in">pwd</span>`/depot_tools:<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>&quot;</span><br></code></pre></td></tr></table></figure><p>主要gclient sync 同步时需要翻墙，可以简单的使用环境变量的方法。</p><p><code>https_proxy=http://localhost:8118 gclient sync</code> 下载 download google storage过<br>程中还会遇到一个网络问题，需要编写配置文件 ~&#x2F;.boto</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Boto]</span><br><span class="hljs-attr">proxy</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>  <span class="hljs-comment"># 不带 http://</span><br><span class="hljs-attr">proxy_port</span>= <span class="hljs-number">8118</span><br></code></pre></td></tr></table></figure><p><code>export NO_AUTH_BOTO_CONFIG=~/.boto</code></p><p>源码包非常大，大概有1G多，需要耐心等待。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>编译需要使用 ubuntu 或者 Debian 系统，其他系统的依赖问题解决起来比较麻烦，<br>如果是上面两种操作系统的话，有脚本自动安装依赖。</p><p><code>./build/install-build-deps.sh</code></p><p>安装完所以依赖后就可以开始编译了，首先要先生成 gn 文件 (2016 年google 放弃使用原来的 gyp 编译方式)</p><p><code>gn args out/afl</code> 会调用vim 编译器， 输入下面的内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ini"><br><span class="hljs-comment"># Build arguments go here.</span><br><span class="hljs-comment"># See &quot;gn args &lt;out_dir&gt; --list&quot; for available build arguments.</span><br><span class="hljs-attr">use_goma</span> = <span class="hljs-literal">false</span> <span class="hljs-comment"># Googlers only. Make sure goma is installed and running first.</span><br><span class="hljs-attr">is_debug</span> = <span class="hljs-literal">false</span>  <span class="hljs-comment"># Enable debugging features.</span><br><br><span class="hljs-attr">pdf_use_skia</span> = <span class="hljs-literal">true</span> <span class="hljs-comment"># Set true to enable experimental skia backend.</span><br><span class="hljs-attr">pdf_use_skia_paths</span> = <span class="hljs-literal">false</span>  <span class="hljs-comment"># Set true to enable experimental skia backend (paths only).</span><br><br><span class="hljs-attr">pdf_enable_xfa</span> = <span class="hljs-literal">true</span>  <span class="hljs-comment"># Set false to remove XFA support (implies JS support).</span><br><span class="hljs-attr">pdf_enable_v8</span> = <span class="hljs-literal">true</span>  <span class="hljs-comment"># Set false to remove Javascript support.</span><br><span class="hljs-attr">pdf_is_standalone</span> = <span class="hljs-literal">true</span>  <span class="hljs-comment"># Set for a non-embedded build.</span><br><span class="hljs-attr">is_component_build</span> = <span class="hljs-literal">false</span> <span class="hljs-comment"># Disable component build (must be false)</span><br><span class="hljs-attr">v8_static_library</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-attr">clang_use_chrome_plugins</span> = <span class="hljs-literal">false</span>  <span class="hljs-comment"># Currently must be false.</span><br><span class="hljs-attr">use_sysroot</span> = <span class="hljs-literal">false</span>  <span class="hljs-comment"># Currently must be false on Linux, but entirely omitted on windows.</span><br><br><span class="hljs-attr">use_afl</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment">#is_asan = true</span><br><span class="hljs-attr">enable_nacl</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">optimize_for_fuzzing</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">symbol_level</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>使用 ASAN 编译会报错，暂时不开启，接下来要解决 afl 的问题了， pdfium 的 third_party<br>中不包含 afl-fuzz 的源代码，需要到 chromium.googlesource.com 项目下载。<br>chromium 项目支持 libfuzzer 和 afl-fuzz，只要使用开关， <code>use_libfuzzer = true</code><br>或者 <code>use_afl = true</code> 即可打开。</p><p>要编译生成 pdfium_test, 必须指定 pdf_is_standalone &#x3D; true, pdfium 源码仓库中没有<br>afl-fuzz 的代码，需要自己下载。</p><p><a href="https://chromium.googlesource.com/chromium/src/third_party/+/master/afl/">https://chromium.googlesource.com/chromium/src/third_party/+/master/afl/</a></p><p>可以直接下载 .tgz 文件<br><a href="https://chromium.googlesource.com/chromium/src/third_party/+archive/master/afl.tar.gz">https://chromium.googlesource.com/chromium/src/third_party/+archive/master/afl.tar.gz</a></p><p>下载后将源码 copy 到 ~&#x2F;repo&#x2F;pdfium&#x2F;third_party&#x2F;afl 中, 使用 <code>ninja -C out/afl</code> 编译整个项目。</p><p>使用 <code>is_debug=false</code> 可以明显提高fuzzing 速度，应该开启。另外一个比较有用的是<br><code>symbol_level</code>, 设置 symbol_level&#x3D;1 可以添加必要的调试符号，便于gdb调试。</p><p>在编译 skia backend 支持时，需要额外处理， 使用 C++14</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">use_cxx11</span> = <span class="hljs-literal">false</span> <br></code></pre></td></tr></table></figure><h2 id="afl-fuzz"><a href="#afl-fuzz" class="headerlink" title="afl-fuzz"></a>afl-fuzz</h2><p>随着 chromium 代码的更新， afl 源码编译出现了一些小问题，需要处理。</p><p>src&#x2F;third_party&#x2F;afl&#x2F;patches&#x2F;0001-fix-build-with-std-c11.patch</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-comment">diff --git a/afl-fuzz.c b/afl-fuzz.c</span><br><span class="hljs-comment">index 01b4afef0ecc..f0d564a33037 100644</span><br><span class="hljs-comment">--- a/afl-fuzz.c</span><br><span class="hljs-comment">+++ b/afl-fuzz.c</span><br><span class="hljs-meta">@@ -23,7 +23,9 @@</span><br> #define AFL_MAIN<br> #define MESSAGES_TO_STDOUT<br> <br><span class="hljs-addition">+#ifndef _GNU_SOURCE</span><br> #define _GNU_SOURCE<br><span class="hljs-addition">+#endif</span><br> #define _FILE_OFFSET_BITS 64<br> <br> #include &quot;config.h&quot;<br><span class="hljs-comment">diff --git a/types.h b/types.h</span><br><span class="hljs-comment">index 784d3a7a286d..d24d1fdd97e8 100644</span><br><span class="hljs-comment">--- a/types.h</span><br><span class="hljs-comment">+++ b/types.h</span><br><span class="hljs-meta">@@ -78,7 +78,7 @@</span> typedef int64_t  s64;<br> #define STRINGIFY(x) STRINGIFY_INTERNAL(x)<br> <br> #define MEM_BARRIER() \<br><span class="hljs-deletion">-  asm volatile(&quot;&quot; ::: &quot;memory&quot;)</span><br><span class="hljs-addition">+  __asm__ volatile(&quot;&quot; ::: &quot;memory&quot;)</span><br> <br> #define likely(_x)   __builtin_expect(!!(_x), 1)<br> #define unlikely(_x)  __builtin_expect(!!(_x), 0)<br></code></pre></td></tr></table></figure><p>afl-fuzz 的使用和其他项目一样。初始的种子文件有几个地方可以获取：</p><ul><li><a href="https://pdfium.googlesource.com/pdfium/+/refs/heads/master/testing/resources/">https://pdfium.googlesource.com/pdfium/+/refs/heads/master/testing/resources/</a></li><li><a href="https://github.com/mozilla/pdf.js/tree/master/test/pdfs">https://github.com/mozilla/pdf.js/tree/master/test/pdfs</a></li></ul><p><code>./afl-fuzz -M 01 -m 1024 -i /home/henices/input -o /home/henices/out -x /tmp/pdf.dict -- ./pdfium_test @@</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://mariomalwareanalysis.blogspot.com/2012/02/how-to-embed-javascript-into-pdf.html">https://mariomalwareanalysis.blogspot.com/2012/02/how-to-embed-javascript-into-pdf.html</a></li><li><a href="https://www.blackhat.com/docs/asia-17/materials/asia-17-Liu-Dig-Into-The-Attack-Surface-Of-PDF-And-Gain-100-CVEs-In-1-Year.pdf">https://www.blackhat.com/docs/asia-17/materials/asia-17-Liu-Dig-Into-The-Attack-Surface-Of-PDF-And-Gain-100-CVEs-In-1-Year.pdf</a></li><li><a href="https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/getting_started.md">https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/getting_started.md</a></li><li><a href="https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/efficient_fuzzer.md">https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/efficient_fuzzer.md</a></li><li><a href="https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/reproducing.md">https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/reproducing.md</a></li><li><a href="https://fuzzing-project.org/tutorial2.html">https://fuzzing-project.org/tutorial2.html</a></li><li><a href="https://blog.chromium.org/2012/04/fuzzing-for-security.html">https://blog.chromium.org/2012/04/fuzzing-for-security.html</a></li><li><a href="https://chromium.googlesource.com/chromium/src/+/lkcr/docs/linux_debugging.md">https://chromium.googlesource.com/chromium/src/+/lkcr/docs/linux_debugging.md</a></li><li><a href="https://web.archive.org/web/20141010035745/http://gnupdf.org/Introduction_to_PDF">https://web.archive.org/web/20141010035745/http://gnupdf.org/Introduction_to_PDF</a></li><li><a href="https://mariomalwareanalysis.blogspot.com/2012/02/how-to-manually-create-pdf.html">https://mariomalwareanalysis.blogspot.com/2012/02/how-to-manually-create-pdf.html</a></li><li><a href="https://mariomalwareanalysis.blogspot.com/2012/02/how-to-embed-javascript-into-pdf.html">https://mariomalwareanalysis.blogspot.com/2012/02/how-to-embed-javascript-into-pdf.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;下载源码&quot;&gt;&lt;a href=&quot;#下载源码&quot; class=&quot;headerlink&quot; title=&quot;下载源码&quot;&gt;&lt;/a&gt;下载源码&lt;/h2&gt;&lt;p&gt;先在 &lt;a href=&quot;https://pdfium.googlesource.com/pdfium/&quot;&gt;https://p</summary>
      
    
    
    
    <category term="Security" scheme="http://usmacd.com/categories/Security/"/>
    
    
    <category term="Security" scheme="http://usmacd.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Learn In Public 摘要</title>
    <link href="http://usmacd.com/en/learn_in_public/"/>
    <id>http://usmacd.com/en/learn_in_public/</id>
    <published>2023-11-01T15:05:19.059Z</published>
    <updated>2023-11-01T15:05:19.059Z</updated>
    
    <content type="html"><![CDATA[<p>a habit of creating <strong>learning exhaust</strong>  </p><ul><li>Write blogs and tutorials and cheatsheets.  </li><li>Speak at meetups and conferences.  </li><li>Ask and answer things on Stackoverflow or Reddit.  <ul><li>Avoid the walled gardens like Slack and Discord, they’re not public.</li></ul></li><li>Make Youtube videos or Twitch streams.  </li><li>Start a newsletter.  </li><li>Draw cartoons (people loooove cartoons!)</li></ul><p>Whatever your thing is, make the thing you wish you had found when you were learning.  </p><ul><li><strong>Don’t judge your results by “claps” or retweets or stars or upvotes</strong></li></ul><p>Oh you think you’re done? Don’t stop there:  </p><ul><li>Enjoyed a coding video? Reach out to the speaker&#x2F;instructor and thank them, and ask questions.  </li><li>Make PR’s to libraries you use.  </li><li>Make your own libraries no one will ever use.  </li><li>Clone stuff you like, from scratch, to see how they work.  </li><li>Teach workshops.  </li><li>Go to conferences and summarize what you learned.</li></ul><p>The subheading under this rule would be: <strong>Try your best to be right, but don’t worry when you’re wrong.</strong>  </p><ul><li>People think you suck? Good. You agree. Ask them to explain, in detail, why you suck  </li><li>You want to just feel good or you want to <strong>be</strong> good?  <ul><li>Then go away and prove them wrong. Of course, if they get abusive block them.</li></ul></li></ul><p>At some point you’ll get some support behind you. People notice genuine learners. They’ll want to help you.  </p><ul><li>Don’t tell them, but they just became your mentors.  </li><li>This is very important: Pick up what they put down  </li><li>Because you learn in public. By teaching you, they teach many.</li></ul><p>source: <a href="https://www.swyx.io/learn-in-public/">https://www.swyx.io/learn-in-public/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;a habit of creating &lt;strong&gt;learning exhaust&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write blogs and tutorials and cheatsheets.  &lt;/li&gt;
&lt;li&gt;Speak at meetu</summary>
      
    
    
    
    
    <category term="PKM" scheme="http://usmacd.com/tags/PKM/"/>
    
  </entry>
  
  <entry>
    <title>图拉鼎谈独立开发</title>
    <link href="http://usmacd.com/cn/tulading/"/>
    <id>http://usmacd.com/cn/tulading/</id>
    <published>2023-10-31T16:00:00.000Z</published>
    <updated>2023-10-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>独立开发</p><ul><li>长期维护产品：消费者愿意为长期维护的产品买单，旧产品没有添加新功能也用新工具链重新编译一次</li><li>只开发自己使用的产品：评估未来几年自己是否使用产品，作为是否启动产品开发的重要因素</li><li>外包 + 独立开发 双驱动<ul><li>用外包的收入平滑独立开发的收入波动</li><li>在产品开发瓶颈期，利用外包刺激，打开思路</li></ul></li></ul><p>项目管理</p><ul><li>立项流程: 先记下 idea，冷却一段时间后如果有思路就继续完善一下 idea，直到某天还是想做，接着就开始动手</li><li>没有市场分析，没有用户分析，只有分阶段完成的 1.0、2.0 … 版本</li><li>1.0 版本为自己开发，只开发最核心的功能，2-n 通过用户的反馈完善产品</li></ul><p>工作模式</p><ul><li>充分利用灵活性，在家和在外工作的时间大致是 2:1</li><li>定期与设计师碰头，每周2-3 次</li></ul><p>状态管理</p><ul><li>有多少状态做多少事，即使状态不太好，也需要做事。</li><li>外部环境对状态有影响，可以利用图书馆等场所，将自己带入状态。</li></ul><p>时间管理（自律）</p><ul><li>曾经经历工作混乱的时期，现在严格工作时间登记，自己开发系统完成工作时间登记。</li><li>自律还包括定期 Review (日报、周报)，计划管理，保持自己的开发节奏。</li><li>工作日基本都工作和上班无差异，除非遇上紧急的事。</li></ul><p>好奇心</p><ul><li>喜欢新技术，喜欢新产品，喜欢折腾 (ubuntu Tweak)</li></ul><p>敏感度</p><ul><li>独立开发者，需要通过社交媒体、邮件列表、newsletter 连接外部世界，保持对新事物的敏感度</li></ul><p>听完 podcast，我发现图拉鼎非常强调工作和兴趣的匹配度，这可能就是他能长期维护产品的一个重要原因。</p><p>reference: <a href="https://pca.st/5v33uy2z">https://pca.st/5v33uy2z</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;独立开发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长期维护产品：消费者愿意为长期维护的产品买单，旧产品没有添加新功能也用新工具链重新编译一次&lt;/li&gt;
&lt;li&gt;只开发自己使用的产品：评估未来几年自己是否使用产品，作为是否启动产品开发的重要因素&lt;/li&gt;
&lt;li&gt;外包 + 独立开发 双驱动</summary>
      
    
    
    
    
    <category term="Programming" scheme="http://usmacd.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>尤雨溪谈成功和运气</title>
    <link href="http://usmacd.com/cn/youyuxi/"/>
    <id>http://usmacd.com/cn/youyuxi/</id>
    <published>2023-10-31T16:00:00.000Z</published>
    <updated>2023-10-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>1）运气很重要，时势造英雄<br>在适当的时间节点上推出合适的产品能大幅提高成功的概率<br>2）真正的关键点，不在写程序上<br>重要的是判断需求，制定合适的技术方案去满足客户的需求<br>3）成功需要市场直觉和产品上的判断力<br>4）光有能力或者光有运气都很难成功<br>运气是客观存在的，But there’s nothing we can do about it.<br>5）我们只能提高自己能力，多尝试，每次尝试运气都不一样<br>6）独立开发重要的不是技术的优劣，而是如何开发一个产品的问题</p><ul><li>如何快速匹配市场需求</li><li>如何识别目标客户</li><li>如何快速验证商业模式</li><li>如何快速推向市场。</li><li>考验的是运营能力、合理分配资源的能力，简化创业流程的能力</li></ul><p>reference: <a href="https://pca.st/yjf05b7i">https://pca.st/yjf05b7i</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1）运气很重要，时势造英雄&lt;br&gt;在适当的时间节点上推出合适的产品能大幅提高成功的概率&lt;br&gt;2）真正的关键点，不在写程序上&lt;br&gt;重要的是判断需求，制定合适的技术方案去满足客户的需求&lt;br&gt;3）成功需要市场直觉和产品上的判断力&lt;br&gt;4）光有能力或者光有运气都很难成功&lt;b</summary>
      
    
    
    
    
    <category term="Programming" scheme="http://usmacd.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>万维钢的强力研读笔记法</title>
    <link href="http://usmacd.com/cn/qiangliyandu/"/>
    <id>http://usmacd.com/cn/qiangliyandu/</id>
    <published>2023-09-24T16:00:00.000Z</published>
    <updated>2023-09-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>清晰表达每一章的逻辑脉络</p><ul><li>按照书籍的章节给笔记划分章节，用自己的话写出每一个章节的内容，各章内容串联起来就成了整本书的内容提要</li><li>最重要的是理清作者的逻辑脉络，每一章的逻辑结构可能就几句话，却可能分散在大几十页的内容中</li></ul><p>带走书中的所有亮点</p><ul><li>读书不是划线式的重点内容总结，而应该注意让你拍案叫绝，点醒梦中人，这些可以刺激改变你的思维的内容</li></ul><p>大量自己的看法和心得</p><ul><li>强力研读是主动式的读书，你需要写下自己对一段内容或一句话的理解</li><li>你可以质疑或者肯定作者的看法，也可以写下自己阅读时的灵感</li><li>在写读书笔记的过程中，你可能突然解决了一个你以前关注的问题，也可能想到了书中思想一个应用场景</li><li>这些灵感都相当宝贵，转瞬即逝，一定要将把他们记录下来</li></ul><p>发现本书和其他书籍文章的联系</p><ul><li>极少书的思想是独立与世界的，大多新知识都是建立在旧知识的基础上的</li><li>同一问题，不同书籍的作者的看法有什么不同之处，有没有新的论据支持或者反对他们的看法</li></ul><p>好书需要至少阅读两遍</p><ul><li>第一遍是为了陷进去，第二遍是为了跳出来</li><li>第一遍阅读可能对领域内容不太熟悉，全部带宽都要用于理解作者的思想。</li><li>想法只有在带宽剩余时，才可能冒出来。为了最有价值的心得、灵感和联系，对好书我们至少阅读两遍</li><li>笔记是对好书最好的敬意，笔记不是书评，它是个人知识的延伸</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;清晰表达每一章的逻辑脉络&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按照书籍的章节给笔记划分章节，用自己的话写出每一个章节的内容，各章内容串联起来就成了整本书的内容提要&lt;/li&gt;
&lt;li&gt;最重要的是理清作者的逻辑脉络，每一章的逻辑结构可能就几句话，却可能分散在大几十页的内容中&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="PKM" scheme="http://usmacd.com/tags/PKM/"/>
    
  </entry>
  
  <entry>
    <title>端粒效应</title>
    <link href="http://usmacd.com/cn/living_younger_healthier_logger/"/>
    <id>http://usmacd.com/cn/living_younger_healthier_logger/</id>
    <published>2023-09-12T16:00:00.000Z</published>
    <updated>2023-09-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>获得 2009 年诺贝尔生理或医学奖的 伊丽莎白·布莱克本在 《端粒效应》一书中说明：人只所以变老，是由于某些细胞不再更新了，而细胞分裂更新的限制在于 “端粒”。</p><p>端粒是染色体末端的 DNA 序列，在细胞分裂过程中，端粒起到保护 DNA 序列的作用。所以，人之所变老的本质原因是 「端粒变短」。</p><p>影响端粒变短的因素</p><ul><li>思想压力：研究表明长期照顾患病小孩的母亲，端粒长度较正常人变短</li><li>敌意：看哪儿都不对，和周围的人关系极差</li><li>悲观：对事情总有一个负面的预期</li><li>胡思乱想：抑郁，都是乱想负面的东西，觉得不公平对待</li></ul><p>缓解负面情绪的方法</p><ul><li>把压力视为挑战：对压力的反应是威胁还是挑战，决定压力的性质</li><li>专注力训练：冥想</li><li>找到人生的目标：find something bigger than yourself</li></ul><p>锻炼对端粒的好处</p><ul><li>人体是反脆弱系统：锻炼的本质是对身体的适度打击</li><li>细胞的反击：适度的锻炼能使端粒变长，并增加「自由基」</li><li>抗氧化剂增多：突然增多的自由基使得身体增加抗氧化剂，锻炼改变了自由基和抗氧化剂的平衡</li><li>锻炼到底是影响端粒还是端粒脢，分子生物学上的机制科学家现在还不知道</li></ul><p>两种科学的锻炼方法</p><ul><li>有氧耐力训练：长跑，每次跑四十五分钟，每周跑三次，坚持六个月，你的端粒酶的活性就能提高两倍</li><li>高强度的间歇训练：短跑结合恢复的办法，快跑几分钟，停下来慢走休息，然后再快跑</li></ul><p>节食和减肥的观念</p><ul><li>体重可能并不是肥胖的最好指标，更好的指标是 「腰臀比」</li><li>肚子大代表新陈代谢水平低，会让端粒变短</li><li>肚子大，腰臀比过高，胆固醇超标；高血压；胰岛素抵抗，具备三个就是新陈代谢综合症</li><li>饥饿节食减肥不可取，就算减下体重也很容易报复性反弹</li><li>糖可能是各种健康问题的罪魁祸首</li></ul><p>从端粒说，细胞有三个敌人</p><ul><li>细胞发炎：肥胖使细胞容易发炎，从而使端粒变短。omega-3 可以防止细胞发炎，鱼类、牛奶、有机鸡蛋中含有 omega-3 脂肪酸</li><li>氧化应激反应：维生素 C 和维生素 E 可以对抗氧化应急反应。饮食中可以吃些水果、胡萝卜、西红柿、土豆和绿叶蔬菜</li><li>胰岛素抵抗：对抗胰岛素抵抗，关键是要少吃糖</li></ul><p>从看端粒的角度分析饮食</p><ul><li>对端粒有害的食物有：红肉，加工肉类（香肠）、白面包、含糖饮料、omega-6 ，过量饮酒</li><li>对端粒有益的食物有：植物纤维、全麦、蔬菜、坚果、豆类、水果、海带、omega-3</li></ul><p>人的环境对端粒的影响</p><ul><li>城市的居民比乡村居民更容易视压力为威胁，因为城市居民的“杏仁核” 部位比较活跃，这个部位主要负责恐惧感</li><li>社会关系比金钱对端粒的影响更大，只要能满足基本的生活需求，金钱对端粒的影响就不大</li><li>受教育的程度对端粒影响很大，研究表明受教育程度越高端粒越长</li><li>职业很重要比收入对端粒影响大，一个从事基本工作的白领也比收入更高的蓝领端粒要长</li></ul><p>从端粒看，父母对孩子的影响</p><ul><li>遗传：端粒长度可以不通过基因遗传，而是“直接传递”，怀孕时父母的端粒比较短，孩子出生时端粒也就比较短</li><li>孕期压力：怀孕期间母亲的压力情况，人遇到压力会分泌皮质醇，从而影响孩子的端粒</li><li>家庭环境：越少父母的关爱，被父母忽视的孩子，端粒会比较短</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;获得 2009 年诺贝尔生理或医学奖的 伊丽莎白·布莱克本在 《端粒效应》一书中说明：人只所以变老，是由于某些细胞不再更新了，而细胞分裂更新的限制在于 “端粒”。&lt;/p&gt;
&lt;p&gt;端粒是染色体末端的 DNA 序列，在细胞分裂过程中，端粒起到保护 DNA 序列的作用。所以，人之</summary>
      
    
    
    
    
    <category term="Life" scheme="http://usmacd.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>xorddos 样本进程隐藏的小伎俩</title>
    <link href="http://usmacd.com/cn/xorddos_hide/"/>
    <id>http://usmacd.com/cn/xorddos_hide/</id>
    <published>2023-09-06T03:00:51.915Z</published>
    <updated>2023-09-06T03:00:51.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程隐藏"><a href="#进程隐藏" class="headerlink" title="进程隐藏"></a>进程隐藏</h2><p>上周由于工作原因接触到xorddos的样本，这个样本在过去一年的时间里非常常见，<br>变种也很多，拿到的样本比较有趣的是 ps 无法发现进程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ps -ef  | grep /usr/bin</span><br><br>...<br><br>root      4597  4594  0 00:37 ?        00:00:00 gnome-pty-helper<br>root      4598  4594  0 00:37 pts/1    00:00:00 bash<br>oracle    5359     1  0 00:41 ?        00:00:00 ora_smco_orcl<br>oracle    5378     1  0 00:41 ?        00:00:00 ora_w000_orcl<br>oracle    5586     1  0 00:42 ?        00:00:00 ora_j000_orcl<br>oracle    5588     1  0 00:42 ?        00:00:00 ora_j001_orcl<br>root      5666     1  0 00:43 ?        00:00:00 sh<br>root      5669     1  0 00:43 ?        00:00:00 <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;find&quot;</span><br>root      5672     1  0 00:43 ?        00:00:00 <span class="hljs-built_in">ls</span> -la<br>root      5675     1  0 00:43 ?        00:00:00 bash<br>root      5678     1  0 00:43 ?        00:00:00 gnome-terminal<br>root      5683     1  0 00:43 ?        00:00:00 <span class="hljs-built_in">cd</span> /etc<br>root      5686     1  0 00:43 ?        00:00:00 top<br>root      5689     1  0 00:43 ?        00:00:00 sh<br>root      5692     1  0 00:43 ?        00:00:00 gnome-terminal<br>root      5695     1  0 00:43 ?        00:00:00 ifconfig<br>root      5696  4598  0 00:43 pts/1    00:00:00 ps -ef<br></code></pre></td></tr></table></figure><p>而使用lsof却可以清除地看见样本正在努力地干活。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># lsof +d /usr/bin</span><br>COMMAND    PID USER  FD   TYPE DEVICE    SIZE    NODE NAME<br>hidd      1853 root txt    REG    3,1   33708 2467454 /usr/bin/hidd<br>ckucbzknt 2014 root txt    REG    3,1  610331 2459176 /usr/bin/ckucbzkntb<br>xfs       2143  xfs txt    REG    3,1  107460 2468483 /usr/bin/xfs<br>Xorg      3117 root txt    REG    3,1 1890596 2466732 /usr/bin/Xorg<br>gnome-ses 4073 root txt    REG    3,1  129356 2459482 /usr/bin/gnome-session<br>ssh-agent 4201 root txt    REG    3,1   88996 2467513 /usr/bin/ssh-agent<br>dbus-laun 4245 root txt    REG    3,1   23796 2471600 /usr/bin/dbus-launch<br>gnome-key 4255 root txt    REG    3,1   97396 2473617 /usr/bin/gnome-keyring-daemon<br>metacity  4290 root txt    REG    3,1  521080 2464500 /usr/bin/metacity<br>gnome-pan 4296 root txt    REG    3,1  540868 2465177 /usr/bin/gnome-panel<br>nautilus  4298 root txt    REG    3,1 1348932 2461620 /usr/bin/nautilus<br>gnome-vol 4310 root txt    REG    3,1   65240 2464498 /usr/bin/gnome-volume-manager<br>bt-applet 4334 root txt    REG    3,1   30452 2464773 /usr/bin/bt-applet<br>nm-applet 4352 root txt    REG    3,1  312432 2467723 /usr/bin/nm-applet<br>gnome-pow 4381 root txt    REG    3,1  195284 2459473 /usr/bin/gnome-power-manager<br>pam-panel 4383 root txt    REG    3,1   39148 2461862 /usr/bin/pam-panel-icon<br>dbus-laun 4473 root txt    REG    3,1   23796 2471600 /usr/bin/dbus-launch<br>gnome-scr 4512 root txt    REG    3,1  168628 2468487 /usr/bin/gnome-screensaver<br>gnome-ter 4594 root txt    REG    3,1  309368 2464648 /usr/bin/gnome-terminal<br>gadcgkcqn 4681 root txt    REG    3,1  610331 2460159 /usr/bin/gadcgkcqni<br>gadcgkcqn 4684 root txt    REG    3,1  610331 2460159 /usr/bin/gadcgkcqni<br>gadcgkcqn 4687 root txt    REG    3,1  610331 2460159 /usr/bin/gadcgkcqni<br>gadcgkcqn 4690 root txt    REG    3,1  610331 2460159 /usr/bin/gadcgkcqni<br>gadcgkcqn 4693 root txt    REG    3,1  610331 2460159 /usr/bin/gadcgkcqni<br></code></pre></td></tr></table></figure><p>阅读汇编代码，分析具体原因，发现xorddos将一些关键信息加密了，F5处理过的代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">encrypt_code</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2)</span><br>&#123;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v2; <span class="hljs-comment">// ecx@2</span><br><br>  <span class="hljs-keyword">if</span> ( a2 &gt; <span class="hljs-number">0</span> )<br>  &#123;<br>    v2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>      *(_BYTE *)(v2 + a1) ^= xorkeys[(((_BYTE)v2 + ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(v2 &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">28</span>)) &amp; <span class="hljs-number">0xF</span>)<br>                                   - ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(v2 &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">28</span>)];<br>      ++v2;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ( v2 != a2 );<br>  &#125;<br>  <span class="hljs-keyword">return</span> a1;<br>&#125;<br></code></pre></td></tr></table></figure><p>xorkey 为 BB2FA36AAA9541F0</p><p>用idapython 写个小脚本，简单处理一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> idautils <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> idc <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_string</span>(<span class="hljs-params">addr</span>):<br>  out = <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> Byte(addr) != <span class="hljs-number">0</span>:<br>      out += <span class="hljs-built_in">chr</span>(Byte(addr))<br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">break</span><br>    addr += <span class="hljs-number">1</span><br>  <span class="hljs-keyword">return</span> out<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">data</span>):<br><br>  xorkey = <span class="hljs-string">&#x27;BB2FA36AAA9541F0&#x27;</span><br>  length = <span class="hljs-built_in">len</span>(data)<br>  o = <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-keyword">if</span> length &gt; <span class="hljs-number">0</span>:<br>    v2 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> v2 &lt; length:<br>      o += <span class="hljs-built_in">chr</span>( <span class="hljs-built_in">ord</span>(data[v2]) ^  <span class="hljs-built_in">ord</span>(xorkey[((v2 + ((v2 &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">28</span>)) &amp; <span class="hljs-number">0xF</span>) - ( (v2 &gt;&gt; <span class="hljs-number">31</span>) &gt;&gt; <span class="hljs-number">28</span>)]) )<br>      v2 += <span class="hljs-number">1</span><br><br>  <span class="hljs-keyword">return</span> o<br><br>ea = ScreenEA()<br>string = get_string(ea)<br>dec = decrypt(string)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Addr: 0x%x, %s&#x27;</span> % (ea, dec)<br>MakeComm(ea, dec)<br></code></pre></td></tr></table></figure><p>处理后可以看到伪装的命令行信息，daemonname。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs asm">.data:080CBB40 daemonname      db &#x27;!#Ff3VE.-7&#x27;,17h,&#x27;V[_ 0&#x27;,0 ; DATA XREF: main+31Eo<br>.data:080CBB40                                         ; main+4AEo ...<br>.data:080CBB40                                         ; cat resolv.conf<br>.data:080CBB51                 align 4<br>.data:080CBB54 a12             db &#x27;1*2&#x27;,0              ; sh<br>.data:080CBB58                 db    0<br>.data:080CBB59                 db    0<br>.data:080CBB5A                 db    0<br>.data:080CBB5B                 db    0<br>.data:080CBB5C                 db    0<br>.data:080CBB5D                 db    0<br>.data:080CBB5E                 db    0<br>.data:080CBB5F                 db    0<br>.data:080CBB60                 db    0<br>.data:080CBB61                 db    0<br>.data:080CBB62                 db    0<br>.data:080CBB63                 db    0<br>.data:080CBB64                 db    0<br>.data:080CBB65                 db    0<br>.data:080CBB66                 db    0<br>.data:080CBB67                 db    0<br>.data:080CBB68                 db  20h                 ; bash<br>.data:080CBB69                 db  23h ; #<br>.data:080CBB6A                 db  41h ; A<br>.data:080CBB6B                 db  2Eh ; .<br>.data:080CBB6C                 db  41h ; A<br>.data:080CBB6D                 db    0<br>.data:080CBB6E                 db    0<br>.data:080CBB6F                 db    0<br>.data:080CBB70                 db    0<br>.data:080CBB71                 db    0<br><br>...<br><br>.data:080CBBB8                 db  2Eh ; .             ; ls -la<br>.data:080CBBB9                 db  31h ; 1<br>.data:080CBBBA                 db  12h<br>.data:080CBBBB                 db  6Bh ; k<br>.data:080CBBBC                 db  2Dh ; -<br>.data:080CBBBD                 db  52h ; R<br>.data:080CBBBE                 db  36h ; 6<br>.data:080CBBBF                 db    0<br>.data:080CBBC0                 db    0<br>.data:080CBBC1                 db    0<br>.data:080CBBC2                 db    0<br>.data:080CBBC3                 db    0<br>.data:080CBBC4                 db    0<br>.data:080CBBC5                 db    0<br>.data:080CBBC6                 db    0<br>.data:080CBBC7                 db    0<br>.data:080CBBC8                 db    0<br>.data:080CBBC9                 db    0<br>.data:080CBBCA                 db    0<br>.data:080CBBCB                 db    0<br>.data:080CBBCC                 db  36h ; 6             ; top<br>.data:080CBBCD                 db  2Dh ; -<br>.data:080CBBCE                 db  42h ; B<br>.data:080CBBCF                 db  46h ; F<br>.data:080CBBD0                 db    0<br>.data:080CBBD1                 db    0<br>.data:080CBBD2                 db    0<br><br>...<br></code></pre></td></tr></table></figure><p>呵呵，已经看到 top， ls -al 等信息了，查看daemonname 的交叉引用，发现在main函数<br>中，到main里看看。</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tcl">.text:<span class="hljs-number">0804</span>AC30 ; int __cdecl main(int argc, const char **argv, const char **envp)<br>.text:<span class="hljs-number">0804</span>AC30                 public main<br>.text:<span class="hljs-number">0804</span>AC30 main            <span class="hljs-keyword">proc</span><span class="hljs-title"> near</span>               ;<span class="hljs-title"> DATA</span> XREF:<span class="hljs-title"> _start+17o</span><br><br>....<br><br>.text:0804AF4E<span class="hljs-title">                 mov</span> <span class="hljs-title">    ebx,</span> offset<span class="hljs-title"> daemonname</span> ; &quot;!#Ff3VE.-7\x17V[_ 0&quot;<br><br>...<br><br>.text:0804AFC2<span class="hljs-title"> loc_804AFC2:</span>                            ;<span class="hljs-title"> CODE</span> XREF:<span class="hljs-title"> main+3ABj</span><br>.text:0804AFC2<span class="hljs-title">                 mov</span>     [esp],<span class="hljs-title"> ebx</span><br>.text:0804AFC5<span class="hljs-title">                 add</span> <span class="hljs-title">    ebx,</span> 14h<br>.text:0804AFC8<span class="hljs-title">                 mov</span> <span class="hljs-title">    dword</span> ptr [esp+4], 14h<br>.text:0804AFD0<span class="hljs-title">                 call</span> <span class="hljs-title">   encrypt_code</span><br>.text:0804AFD5<span class="hljs-title">                 cmp</span> <span class="hljs-title">    ebx,</span> offset<span class="hljs-title"> unk_80CBD0C</span><br>.text:0804AFDB<span class="hljs-title">                 jnz</span> <span class="hljs-title">    short</span> loc_804AFC2<br></code></pre></td></tr></table></figure><p>这段汇编代码，使用了一个循环，调用encrypt_code 对daemonname进行了解密。<br>后面的代码，用到了daemonname的地方有下面几处，</p><p>第一处</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>0804B29F                 <span class="hljs-keyword">call</span>    getpid<br><span class="hljs-symbol">.text:</span>0804B2A4                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">esp</span>+<span class="hljs-number">8</span>], (offset <span class="hljs-keyword">aDD</span>+<span class="hljs-number">3</span>) <span class="hljs-comment">; &quot;%d&quot;</span><br><span class="hljs-symbol">.text:</span>0804B2AC                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">esp</span>+<span class="hljs-number">4</span>], <span class="hljs-number">0Ah</span><br><span class="hljs-symbol">.text:</span>0804B2B4                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">esp</span>], <span class="hljs-built_in">esi</span>             ；第三形参 pid<br><span class="hljs-symbol">.text:</span>0804B2B7                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">esp</span>+<span class="hljs-number">0Ch</span>], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0804B2BB                 <span class="hljs-keyword">call</span>    snprintf<br><span class="hljs-symbol">.text:</span>0804B2C0                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">esp</span>+<span class="hljs-number">4</span>], <span class="hljs-number">17h</span><br><span class="hljs-symbol">.text:</span>0804B2C8                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">esp</span>], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>0804B2CF                 <span class="hljs-keyword">call</span>    randomid<br><span class="hljs-symbol">.text:</span>0804B2D4                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">esp</span>+<span class="hljs-number">8</span>], <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>0804B2D8                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">esp</span>], <span class="hljs-built_in">edi</span>             ；第一形参 要跑的木马<br><span class="hljs-symbol">.text:</span>0804B2DB                 <span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ax</span><br><span class="hljs-symbol">.text:</span>0804B2DE                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">eax</span>+<span class="hljs-built_in">eax</span>*<span class="hljs-number">4</span>]<br><span class="hljs-symbol">.text:</span>0804B2E1                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, daemonname[<span class="hljs-built_in">eax</span>*<span class="hljs-number">4</span>] <span class="hljs-comment">; &quot;!#Ff3VE.-7\x17V[_ 0&quot;</span><br><span class="hljs-symbol">.text:</span>0804B2E8                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">esp</span>+<span class="hljs-number">4</span>], <span class="hljs-built_in">eax</span>           <span class="hljs-comment">; 第二形参  daemonname</span><br><span class="hljs-symbol">.text:</span>0804B2EC                 <span class="hljs-keyword">call</span>    LinuxExec_Argv2<br></code></pre></td></tr></table></figure><p>第二处</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs maxima">.text:<span class="hljs-number">0804B932</span>                 lea     edx, [ebp+var_1888]<br>.text:<span class="hljs-number">0804B938</span>                 add     ebx, <span class="hljs-number">1</span><br>.text:<span class="hljs-number">0804B93B</span>                 mov     [esp], edx<br>.text:<span class="hljs-number">0804B93E</span>                 call    randmd5<br>.text:<span class="hljs-number">0804B943</span>                 mov     [ebp+var_22], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0804B94A</span>                 mov     [ebp+var_1E], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0804B951</span>                 mov     [ebp+var_1A], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0804B957</span>                 call    getpid<br>.text:<span class="hljs-number">0804B95C</span>                 mov     dword ptr [esp+<span class="hljs-number">8</span>], (offset aDD+<span class="hljs-number">3</span>) ; <span class="hljs-string">&quot;%d&quot;</span><br>.text:<span class="hljs-number">0804B964</span>                 mov     dword ptr [esp+<span class="hljs-number">4</span>], <span class="hljs-number">0Ah</span><br>.text:<span class="hljs-number">0804B96C</span>                 mov     [esp], esi<br>.text:<span class="hljs-number">0804B96F</span>                 mov     [esp+<span class="hljs-number">0Ch</span>], eax<br>.text:<span class="hljs-number">0804B973</span>                 call    snprintf<br>.text:<span class="hljs-number">0804B978</span>                 mov     dword ptr [esp+<span class="hljs-number">4</span>], 17h<br>.text:<span class="hljs-number">0804B980</span>                 mov     dword ptr [esp], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0804B987</span>                 call    randomid<br>.text:<span class="hljs-number">0804B98C</span>                 mov     [esp+<span class="hljs-number">8</span>], esi<br>.text:<span class="hljs-number">0804B990</span>                 movzx   eax, ax<br>.text:<span class="hljs-number">0804B993</span>                 lea     eax, [eax+eax*<span class="hljs-number">4</span>]<br>.text:<span class="hljs-number">0804B996</span>                 lea     eax, daemonname[eax*<span class="hljs-number">4</span>] ; <span class="hljs-string">&quot;!#Ff3VE.-7\x17V[_ 0&quot;</span><br>.text:<span class="hljs-number">0804B99D</span>                 mov     [esp+<span class="hljs-number">4</span>], eax<br>.text:<span class="hljs-number">0804B9A1</span>                 lea     eax, [ebp+var_1888]<br>.text:<span class="hljs-number">0804B9A7</span>                 mov     [esp], eax<br>.text:<span class="hljs-number">0804B9AA</span>                 call    LinuxExec_Argv2<br></code></pre></td></tr></table></figure><p>第三处</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>0804B9DF                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">edx</span>, [<span class="hljs-built_in">ebp</span>+var_1C88]<br><span class="hljs-symbol">.text:</span>0804B9E5                 <span class="hljs-keyword">add</span>     <span class="hljs-built_in">ebx</span>, <span class="hljs-number">1</span><br><span class="hljs-symbol">.text:</span>0804B9E8                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">esp</span>], <span class="hljs-built_in">edx</span><br><span class="hljs-symbol">.text:</span>0804B9EB                 <span class="hljs-keyword">call</span>    randmd5<br><span class="hljs-symbol">.text:</span>0804B9F0                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_22], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>0804B9F7                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_1E], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>0804B9FE                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_1A], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>0804BA04                 <span class="hljs-keyword">call</span>    getpid<br><span class="hljs-symbol">.text:</span>0804BA09                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">esp</span>+<span class="hljs-number">8</span>], (offset <span class="hljs-keyword">aDD</span>+<span class="hljs-number">3</span>) <span class="hljs-comment">; &quot;%d&quot;</span><br><span class="hljs-symbol">.text:</span>0804BA11                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">esp</span>+<span class="hljs-number">4</span>], <span class="hljs-number">0Ah</span><br><span class="hljs-symbol">.text:</span>0804BA19                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">esp</span>], <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>0804BA1C                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">esp</span>+<span class="hljs-number">0Ch</span>], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0804BA20                 <span class="hljs-keyword">call</span>    snprintf<br><span class="hljs-symbol">.text:</span>0804BA25                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">esp</span>+<span class="hljs-number">4</span>], <span class="hljs-number">17h</span><br><span class="hljs-symbol">.text:</span>0804BA2D                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">esp</span>], <span class="hljs-number">0</span><br><span class="hljs-symbol">.text:</span>0804BA34                 <span class="hljs-keyword">call</span>    randomid<br><span class="hljs-symbol">.text:</span>0804BA39                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">esp</span>+<span class="hljs-number">8</span>], <span class="hljs-built_in">esi</span><br><span class="hljs-symbol">.text:</span>0804BA3D                 <span class="hljs-keyword">movzx</span>   <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ax</span><br><span class="hljs-symbol">.text:</span>0804BA40                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">eax</span>+<span class="hljs-built_in">eax</span>*<span class="hljs-number">4</span>]<br><span class="hljs-symbol">.text:</span>0804BA43                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, daemonname[<span class="hljs-built_in">eax</span>*<span class="hljs-number">4</span>] <span class="hljs-comment">; &quot;!#Ff3VE.-7\x17V[_ 0&quot;</span><br><span class="hljs-symbol">.text:</span>0804BA4A                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">esp</span>+<span class="hljs-number">4</span>], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0804BA4E                 <span class="hljs-keyword">lea</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+var_1C88]<br><span class="hljs-symbol">.text:</span>0804BA54                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">esp</span>], <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">.text:</span>0804BA57                 <span class="hljs-keyword">call</span>    LinuxExec_Argv2<br></code></pre></td></tr></table></figure><p>都是作为LinuxExec_Argv2 参数使用的，接着来看LinuxExec_Argv2 的代码</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs tcl">.text:<span class="hljs-number">08048520</span> LinuxExec_Argv2 <span class="hljs-keyword">proc</span><span class="hljs-title"> near</span>               ;<span class="hljs-title"> CODE</span> XREF:<span class="hljs-title"> DelService+B3p</span><br>.text:08048520                                         ;<span class="hljs-title"> DelService+CBlp</span> ...<br>.text:08048520<br>.text:08048520<span class="hljs-title"> argv</span>            =<span class="hljs-title"> dword</span> ptr -18h<br>.text:08048520<span class="hljs-title"> var_14</span>          =<span class="hljs-title"> dword</span> ptr -14h<br>.text:08048520<span class="hljs-title"> var_10</span>          =<span class="hljs-title"> dword</span> ptr -10h<br>.text:08048520<span class="hljs-title"> var_C</span>           =<span class="hljs-title"> dword</span> ptr -0Ch<br>.text:08048520<span class="hljs-title"> var_8</span>           =<span class="hljs-title"> dword</span> ptr -8<br>.text:08048520<span class="hljs-title"> var_4</span>           =<span class="hljs-title"> dword</span> ptr -4<br>.text:08048520<span class="hljs-title"> file</span>            =<span class="hljs-title"> dword</span> ptr  8<br>.text:08048520<span class="hljs-title"> arg_4</span>           =<span class="hljs-title"> dword</span> ptr  0Ch<br>.text:08048520<span class="hljs-title"> arg_8</span>           =<span class="hljs-title"> dword</span> ptr  10h<br>.text:08048520<br>.text:08048520<span class="hljs-title">                 push</span> <span class="hljs-title">   ebp</span><br>.text:08048521<span class="hljs-title">                 mov</span> <span class="hljs-title">    ebp,</span> esp<br>.text:08048523<span class="hljs-title">                 sub</span> <span class="hljs-title">    esp,</span> 28h<br>.text:08048526<span class="hljs-title">                 mov</span>     [ebp+var_4],<span class="hljs-title"> esi</span><br>.text:08048529<span class="hljs-title">                 mov</span> <span class="hljs-title">    esi,</span> [ebp+file]<br>.text:0804852C<span class="hljs-title">                 mov</span>     [ebp+var_8],<span class="hljs-title"> ebx</span><br>.text:0804852F<span class="hljs-title">                 mov</span>     [ebp+argv], 0<br>.text:08048536<span class="hljs-title">                 mov</span>     [ebp+var_14], 0<br>.text:0804853D<span class="hljs-title">                 mov</span>     [ebp+var_10], 0<br>.text:08048544<span class="hljs-title">                 mov</span>     [ebp+var_C], 0<br>.text:0804854B<span class="hljs-title">                 call</span> <span class="hljs-title">   doublefork</span><br>.text:08048550<span class="hljs-title">                 test</span> <span class="hljs-title">   eax,</span> eax<br>.text:08048552<span class="hljs-title">                 jz</span> <span class="hljs-title">     short</span> ZERO<br>.text:08048554<span class="hljs-title">                 mov</span> <span class="hljs-title">    ebx,</span> [ebp+var_8]<br>.text:08048557<span class="hljs-title">                 mov</span> <span class="hljs-title">    esi,</span> [ebp+var_4]<br>.text:0804855A<span class="hljs-title">                 mov</span> <span class="hljs-title">    esp,</span> ebp<br>.text:0804855C<span class="hljs-title">                 pop</span> <span class="hljs-title">    ebp</span><br>.text:0804855D<span class="hljs-title">                 retn</span><br>.text:0804855E ; ---------------------------------------------------------------------------<br>.text:0804855E<br>.text:0804855E<span class="hljs-title"> ZERO:</span>                                   ;<span class="hljs-title"> CODE</span> XREF:<span class="hljs-title"> LinuxExec_Argv2+32j</span><br>.text:0804855E<span class="hljs-title">                 mov</span> <span class="hljs-title">    ebx,</span> 3<br>.text:08048563<br>.text:08048563<span class="hljs-title"> LOOP:</span>                                   ;<span class="hljs-title"> CODE</span> XREF:<span class="hljs-title"> LinuxExec_Argv2+54j</span><br>.text:08048563<span class="hljs-title">                 mov</span>     [esp],<span class="hljs-title"> ebx</span>      ;<span class="hljs-title"> fd</span><br>.text:08048566<span class="hljs-title">                 add</span> <span class="hljs-title">    ebx,</span> 1<br>.text:08048569<span class="hljs-title">                 call</span> <span class="hljs-title">   close</span><br>.text:0804856E<span class="hljs-title">                 cmp</span> <span class="hljs-title">    ebx,</span> 400h       ；400h == 1024<br>.text:08048574<span class="hljs-title">                 jnz</span> <span class="hljs-title">    short</span> LOOP<br>.text:08048576<span class="hljs-title">                 mov</span> <span class="hljs-title">    eax,</span> [ebp+arg_4]<br>.text:08048579<span class="hljs-title">                 mov</span>     [ebp+argv],<span class="hljs-title"> esi</span><br>.text:0804857C<span class="hljs-title">                 mov</span>     [esp],<span class="hljs-title"> esi</span>      ;<span class="hljs-title"> file</span><br>.text:0804857F<span class="hljs-title">                 mov</span>     [ebp+var_14],<span class="hljs-title"> eax</span><br>.text:08048582<span class="hljs-title">                 mov</span> <span class="hljs-title">    eax,</span> [ebp+arg_8]；eax =<span class="hljs-title"> pid</span><br>.text:08048585<span class="hljs-title">                 mov</span>     [ebp+var_10],<span class="hljs-title"> eax</span><br>.text:08048588<span class="hljs-title">                 lea</span> <span class="hljs-title">    eax,</span> [ebp+argv]<br>.text:0804858B<span class="hljs-title">                 mov</span>     [esp+4],<span class="hljs-title"> eax</span>    ;<span class="hljs-title"> argv</span><br>.text:0804858F<span class="hljs-title">                 call</span> <span class="hljs-title">   execvp</span><br>.text:08048594<span class="hljs-title">                 mov</span> <span class="hljs-title">    dword</span> ptr [esp], 0 ;<span class="hljs-title"> status</span><br>.text:0804859B<span class="hljs-title">                 call</span> <span class="hljs-title">   exit</span><br>.text:0804859B<span class="hljs-title"> LinuxExec_Argv2</span> endp<br></code></pre></td></tr></table></figure><p>LinuxExec_Argv2 有三个参数。最终执行了execvp</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span>0804857C                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">esp</span>], <span class="hljs-built_in">esi</span>      <span class="hljs-comment">; file </span><br>...<br><span class="hljs-symbol">.text:</span>0804858B                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">esp</span>+<span class="hljs-number">4</span>], <span class="hljs-built_in">eax</span>    <span class="hljs-comment">; argv</span><br><span class="hljs-symbol">.text:</span>0804858F                 <span class="hljs-keyword">call</span>    execvp<br></code></pre></td></tr></table></figure><p>伪代码为，</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">execvp(<span class="hljs-name">file</span>, <span class="hljs-symbol">&amp;argv</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>file 就是arg_0, 需要分析argv， 调出栈图就比较清晰了。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-00000018 argv            dd ?                    ; offset</span><br><span class="hljs-deletion">-00000014 var_14          dd ?</span><br><span class="hljs-deletion">-00000010 var_10          dd ?</span><br><span class="hljs-deletion">-0000000C var_C           dd ?</span><br><span class="hljs-deletion">-00000008 var_8           dd ?</span><br><span class="hljs-deletion">-00000004 var_4           dd ?</span><br><span class="hljs-addition">+00000000  s              db 4 dup(?)</span><br><span class="hljs-addition">+00000004  r              db 4 dup(?)</span><br><span class="hljs-addition">+00000008 file            dd ?                    ; offset</span><br><span class="hljs-addition">+0000000C arg_4           dd ?</span><br><span class="hljs-addition">+00000010 arg_8           dd ?</span><br><br></code></pre></td></tr></table></figure><p>首先是这句</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">08048529</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">esi</span>, [<span class="hljs-built_in">ebp</span>+file]<br>...<br><span class="hljs-symbol">.text:</span>0804852F                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+argv], <span class="hljs-number">0</span><br>...<br><span class="hljs-symbol">.text:</span><span class="hljs-number">08048579</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+argv], <span class="hljs-built_in">esi</span><br><br></code></pre></td></tr></table></figure><p>执行了这几句代码后，栈图发生了变化</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-00000018 argv            arg_0                       ; offset</span><br><span class="hljs-deletion">-00000014 var_14          dd ?</span><br><span class="hljs-deletion">-00000010 var_10          dd ?</span><br><span class="hljs-deletion">-0000000C var_C           dd ?</span><br><span class="hljs-deletion">-00000008 var_8           dd ?</span><br><span class="hljs-deletion">-00000004 var_4           dd ?</span><br><span class="hljs-addition">+00000000  s              db 4 dup(?)</span><br><span class="hljs-addition">+00000004  r              db 4 dup(?)</span><br><span class="hljs-addition">+00000008 file            dd ?                    ; offset</span><br><span class="hljs-addition">+0000000C arg_4           dd ?</span><br><span class="hljs-addition">+00000010 arg_8           dd ?</span><br></code></pre></td></tr></table></figure><p>再看这几句代码</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">08048576</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+arg_4]<br><span class="hljs-symbol">.text:</span><span class="hljs-number">08048579</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+argv], <span class="hljs-built_in">esi</span><br>...<br><span class="hljs-symbol">.text:</span>0804857F                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_14], <span class="hljs-built_in">eax</span><br></code></pre></td></tr></table></figure><p>执行了这几句代码后，栈图发生了变化</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-00000018 argv            arg_0                   ; offset</span><br><span class="hljs-deletion">-00000014 var_14          arg_4</span><br><span class="hljs-deletion">-00000010 var_10          dd ?</span><br><span class="hljs-deletion">-0000000C var_C           dd ?</span><br><span class="hljs-deletion">-00000008 var_8           dd ?</span><br><span class="hljs-deletion">-00000004 var_4           dd ?</span><br><span class="hljs-addition">+00000000  s              db 4 dup(?)</span><br><span class="hljs-addition">+00000004  r              db 4 dup(?)</span><br><span class="hljs-addition">+00000008 file            dd ?                    ; offset</span><br><span class="hljs-addition">+0000000C arg_4           dd ?</span><br><span class="hljs-addition">+00000010 arg_8           dd ?</span><br></code></pre></td></tr></table></figure><p>接下来是这几句代码</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-symbol">.text:</span><span class="hljs-number">08048582</span>                 <span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, [<span class="hljs-built_in">ebp</span>+arg_8]；<span class="hljs-built_in">eax</span> = pid<br><span class="hljs-symbol">.text:</span><span class="hljs-number">08048585</span>                 <span class="hljs-keyword">mov</span>     [<span class="hljs-built_in">ebp</span>+var_10], <span class="hljs-built_in">eax</span><br></code></pre></td></tr></table></figure><p>执行了这几句代码后，栈图发生了变化</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-00000018 argv            arg_0                   ; offset</span><br><span class="hljs-deletion">-00000014 var_14          arg_4</span><br><span class="hljs-deletion">-00000010 var_10          arg_8</span><br><span class="hljs-deletion">-0000000C var_C           0</span><br><span class="hljs-deletion">-00000008 var_8           dd ?</span><br><span class="hljs-deletion">-00000004 var_4           dd ?</span><br><span class="hljs-addition">+00000000  s              db 4 dup(?)</span><br><span class="hljs-addition">+00000004  r              db 4 dup(?)</span><br><span class="hljs-addition">+00000008 file            dd ?                    ; offset</span><br><span class="hljs-addition">+0000000C arg_4           dd ?</span><br><span class="hljs-addition">+00000010 arg_8           dd ?</span><br>`<br></code></pre></td></tr></table></figure><p>main函数中对LinuxExec_Argv2 的调用的为代码为</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">LinuxExec_Argv2(&#x27;木马路径&#x27;, &#x27;伪装命令行&#x27;, pid);<br></code></pre></td></tr></table></figure><p>因此最后调用的execvp的伪代码为</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">execvp</span>(&#x27;木马路径&#x27;, argv);<br></code></pre></td></tr></table></figure><p>将进入 main 函数参数个数为3的流程，用IDA重命名后，关键代码为</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs maxima">text:<span class="hljs-number">0804B5D3</span> PARAM_NUM_3:                            ; CODE XREF: main+3CDj<br><br>.text:<span class="hljs-number">0804B5D3</span>                 lea     eax, [ebp+var_18]<br>.text:<span class="hljs-number">0804B5D6</span>                 mov     [esp+<span class="hljs-number">4</span>], eax<br>.text:<span class="hljs-number">0804B5DA</span>                 lea     eax, [ebp+self_path]<br>.text:<span class="hljs-number">0804B5E0</span>                 mov     [esp], eax<br>.text:<span class="hljs-number">0804B5E3</span>                 call    readfile<br>.text:<span class="hljs-number">0804B5E8</span>                 mov     edx, [ebp+argv_arr]<br>.text:<span class="hljs-number">0804B5EE</span>                 mov     ebx, [edx+<span class="hljs-number">4</span>]<br>.text:<span class="hljs-number">0804B5F1</span>                 mov     [ebp+self_file_content], eax<br>.text:<span class="hljs-number">0804B5F7</span>                 mov     [esp], ebx<br>.text:<span class="hljs-number">0804B5FA</span>                 call    strlen<br>.text:<span class="hljs-number">0804B5FF</span>                 mov     [esp+<span class="hljs-number">4</span>], ebx<br>.text:<span class="hljs-number">0804B603</span>                 mov     [esp+<span class="hljs-number">8</span>], eax<br>.text:<span class="hljs-number">0804B607</span>                 lea     eax, [ebp+fake_cmd]<br>.text:<span class="hljs-number">0804B60D</span>                 mov     [esp], eax<br>.text:<span class="hljs-number">0804B610</span>                 call    memmove<br>.text:<span class="hljs-number">0804B615</span>                 mov     dword ptr [esp+<span class="hljs-number">0Ch</span>], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0804B61D</span>                 mov     dword ptr [esp+<span class="hljs-number">8</span>], <span class="hljs-number">0Ah</span><br>.text:<span class="hljs-number">0804B625</span>                 mov     dword ptr [esp+<span class="hljs-number">4</span>], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0804B62D</span>                 mov     edx, [ebp+argv_arr]<br>.text:<span class="hljs-number">0804B633</span>                 mov     eax, [edx+<span class="hljs-number">8</span>]<br>.text:<span class="hljs-number">0804B636</span>                 mov     [esp], eax<br>.text:<span class="hljs-number">0804B639</span>                 call    __strtol_internal<br>.text:<span class="hljs-number">0804B63E</span>                 mov     esi, eax<br>.text:<span class="hljs-number">0804B640</span>                 mov     eax, [ebp+argv_arr]<br>.text:<span class="hljs-number">0804B646</span>                 mov     ebx, [eax]<br>.text:<span class="hljs-number">0804B648</span>                 mov     [esp], ebx<br>.text:<span class="hljs-number">0804B64B</span>                 call    strlen<br>.text:<span class="hljs-number">0804B650</span>                 mov     [esp], ebx<br>.text:<span class="hljs-number">0804B653</span>                 mov     dword ptr [esp+<span class="hljs-number">4</span>], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0804B65B</span>                 mov     [esp+<span class="hljs-number">8</span>], eax<br>.text:<span class="hljs-number">0804B65F</span>                 call    memset<br>.text:<span class="hljs-number">0804B664</span>                 mov     edx, [ebp+argv_arr]<br>.text:<span class="hljs-number">0804B66A</span>                 mov     ebx, [edx+<span class="hljs-number">4</span>]<br>.text:<span class="hljs-number">0804B66D</span>                 mov     [esp], ebx<br>.text:<span class="hljs-number">0804B670</span>                 call    strlen<br>.text:<span class="hljs-number">0804B675</span>                 mov     [esp], ebx<br>.text:<span class="hljs-number">0804B678</span>                 mov     dword ptr [esp+<span class="hljs-number">4</span>], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0804B680</span>                 mov     [esp+<span class="hljs-number">8</span>], eax<br>.text:<span class="hljs-number">0804B684</span>                 call    memset<br>.text:<span class="hljs-number">0804B689</span>                 mov     eax, [ebp+argv_arr]<br>.text:<span class="hljs-number">0804B68F</span>                 mov     ebx, [eax+<span class="hljs-number">8</span>]<br>.text:<span class="hljs-number">0804B692</span>                 mov     [esp], ebx<br>.text:<span class="hljs-number">0804B695</span>                 call    strlen<br>.text:<span class="hljs-number">0804B69A</span>                 mov     [esp], ebx<br>.text:<span class="hljs-number">0804B69D</span>                 mov     dword ptr [esp+<span class="hljs-number">4</span>], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">0804B6A5</span>                 mov     [esp+<span class="hljs-number">8</span>], eax<br>.text:<span class="hljs-number">0804B6A9</span>                 call    memset<br>.text:<span class="hljs-number">0804B6AE</span>                 lea     edx, [ebp+fake_cmd]<br>.text:<span class="hljs-number">0804B6B4</span>                 mov     [esp+<span class="hljs-number">4</span>], edx<br>.text:<span class="hljs-number">0804B6B8</span>                 mov     edx, [ebp+argv_arr]<br>.text:<span class="hljs-number">0804B6BE</span>                 mov     eax, [edx]<br>.text:<span class="hljs-number">0804B6C0</span>                 mov     [esp], eax<br>.text:<span class="hljs-number">0804B6C3</span>                 call    strcpy<br>.text:<span class="hljs-number">0804B6C8</span>                 lea     eax, [ebp+filename]<br>.text:<span class="hljs-number">0804B6CE</span>                 mov     [esp+<span class="hljs-number">0Ch</span>], esi<br>.text:<span class="hljs-number">0804B6D2</span>                 lea     esi, [ebp+randstr_10]<br></code></pre></td></tr></table></figure><p>上面代码的原理大致等同于下面这段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span>&#123;<br>    <span class="hljs-type">char</span> fake_cmd[<span class="hljs-number">256</span>];<br>    <span class="hljs-built_in">memset</span>(&amp;fake_cmd, <span class="hljs-number">0</span>, <span class="hljs-number">256</span>);<br>    <span class="hljs-type">char</span> * argv_arr_1 = argv[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> argv_arr_1_length = <span class="hljs-built_in">strlen</span>(argv[<span class="hljs-number">1</span>]);<br>    memmove(&amp;fake_cmd, argv_arr_1, argv_arr_1_length);<br>    <span class="hljs-type">long</span> pid_long = strtol(argv[<span class="hljs-number">2</span>], <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br>    <span class="hljs-type">char</span> * v29 = (<span class="hljs-type">char</span> *)*argv;<br>    <span class="hljs-type">int</span> v30 = <span class="hljs-built_in">strlen</span>(*argv);<br>    <span class="hljs-built_in">memset</span>(v29, <span class="hljs-number">0</span>, v30);<br>    <span class="hljs-type">char</span> * v31 = argv[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> v32 = <span class="hljs-built_in">strlen</span>(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">memset</span>(v31, <span class="hljs-number">0</span>, v32);<br>    <span class="hljs-type">char</span> * v33 = argv[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> v34 = <span class="hljs-built_in">strlen</span>(argv[<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">memset</span>(v33, <span class="hljs-number">0</span>, v34);<br>    <span class="hljs-built_in">strcpy</span>(*argv, fake_cmd);<br>    sleep(<span class="hljs-number">300</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>编译后执行可以看到效果和运行样本的一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  ~ gcc -o fakeexe exe.c<br>➜  ~ ./fakeexe <span class="hljs-string">&quot;ls -al&quot;</span> 2554<br><br>➜  ~ <span class="hljs-built_in">cat</span> /proc/2605/cmdline<br><span class="hljs-built_in">ls</span> -al<br><br>➜  ~ <span class="hljs-built_in">ls</span> -l /proc/2605/exe<br>lrwxrwxrwx. 1 henices henices 0 8月   2 12:01 /proc/2605/exe -&gt; /home/henices/research/xorddos/fakeexe<br><br>➜  ~ ps -elf | grep <span class="hljs-string">&quot;ls -al&quot;</span> | grep -v grep<br>0 S henices   2605 25307  0  80   0 -  1043 hrtime 12:01 pts/5    00:00:00 <span class="hljs-built_in">ls</span> -al<br></code></pre></td></tr></table></figure><p>其实效果并不好，可以轻易发现踪迹。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">➜  ~ <span class="hljs-keyword">ps</span> -<span class="hljs-keyword">e</span> | <span class="hljs-keyword">grep</span> fakeexe<br> <span class="hljs-number">2605</span> <span class="hljs-keyword">pts</span>/<span class="hljs-number">9</span>    <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> fakeexe<br><br></code></pre></td></tr></table></figure><p>其实有更好的做法，使用 prctl ，至少可以把ps给搞定。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span>&#123;<br>    <span class="hljs-type">char</span> fake_cmd[<span class="hljs-number">256</span>];<br>    <span class="hljs-built_in">memset</span>(&amp;fake_cmd, <span class="hljs-number">0</span>, <span class="hljs-number">256</span>);<br>    <span class="hljs-type">char</span> * argv_arr_1 = argv[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> argv_arr_1_length = <span class="hljs-built_in">strlen</span>(argv[<span class="hljs-number">1</span>]);<br>    memmove(&amp;fake_cmd, argv_arr_1, argv_arr_1_length);<br>    <span class="hljs-type">long</span> pid_long = strtol(argv[<span class="hljs-number">2</span>], <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br>    <span class="hljs-type">char</span> * v29 = (<span class="hljs-type">char</span> *)*argv;<br>    <span class="hljs-type">int</span> v30 = <span class="hljs-built_in">strlen</span>(*argv);<br>    <span class="hljs-built_in">memset</span>(v29, <span class="hljs-number">0</span>, v30);<br>    <span class="hljs-type">char</span> * v31 = argv[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> v32 = <span class="hljs-built_in">strlen</span>(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">memset</span>(v31, <span class="hljs-number">0</span>, v32);<br>    <span class="hljs-type">char</span> * v33 = argv[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> v34 = <span class="hljs-built_in">strlen</span>(argv[<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">memset</span>(v33, <span class="hljs-number">0</span>, v34);<br>    <span class="hljs-built_in">strcpy</span>(*argv, fake_cmd);<br>    prctl(PR_SET_NAME, <span class="hljs-string">&quot;bash&quot;</span>);<br>    sleep(<span class="hljs-number">300</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>编译执行后可以看到效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">➜  ~ ps -e | grep bash<br> 4858 pts/5    00:00:00 bash<br><br>➜  ~ <span class="hljs-built_in">cat</span> /proc/4858/cmdline <br><span class="hljs-built_in">ls</span> -al<br><br>➜  ~ lsof -d txt | grep fakeexe<br>bash       4858 henices txt       REG  253,2      8816  4588423 /home/henices/research/xorddos/fakeexe<br></code></pre></td></tr></table></figure><h2 id="xorddos-的多态-（Polymorphic）"><a href="#xorddos-的多态-（Polymorphic）" class="headerlink" title="xorddos 的多态 （Polymorphic）"></a>xorddos 的多态 （Polymorphic）</h2><p>xorddos这个样本还值得一提的是，这个样本会不断变化，多态这个词翻译的可能不太准确，<br>可以参见上面的英文，自行理解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">randmd5</span><span class="hljs-params">(<span class="hljs-type">char</span> *filename)</span><br>&#123;<br>  <span class="hljs-type">int</span> fd; <span class="hljs-comment">// eax@1</span><br>  <span class="hljs-type">int</span> fd_dup; <span class="hljs-comment">// esi@1</span><br>  <span class="hljs-type">mode_t</span> v4; <span class="hljs-comment">// [sp+8h] [bp-20h]@0</span><br>  <span class="hljs-type">int</span> addr; <span class="hljs-comment">// [sp+15h] [bp-13h]@1</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [sp+19h] [bp-Fh]@1</span><br>  __int16 v7; <span class="hljs-comment">// [sp+1Dh] [bp-Bh]@1</span><br>  <span class="hljs-type">char</span> v8; <span class="hljs-comment">// [sp+1Fh] [bp-9h]@1</span><br><br>  addr = <span class="hljs-number">0</span>;<br>  v6 = <span class="hljs-number">0</span>;<br>  v7 = <span class="hljs-number">0</span>;<br>  v8 = <span class="hljs-number">0</span>;<br>  fd = open(filename, <span class="hljs-number">1</span>, v4);<br>  fd_dup = fd;<br>  <span class="hljs-keyword">if</span> ( fd &gt; <span class="hljs-number">0</span> )<br>  &#123;<br>    lseek(fd, <span class="hljs-number">0</span>, SEEK_END);<br>    randstr((<span class="hljs-type">int</span>)&amp;addr, <span class="hljs-number">10</span>);<br>    write(fd_dup, &amp;addr, <span class="hljs-number">11u</span>);<br>    close(fd_dup);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>xorddos 样本多态主要就是用这个函数，每次在文件末尾写上10个字节的随机字符。<br>这样样本md5和大小都会发生变化，使得一些检测方法失效。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>正因为这种隐藏方法并不理想，后面xorddos出现了带rootkit的版本，进化了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;进程隐藏&quot;&gt;&lt;a href=&quot;#进程隐藏&quot; class=&quot;headerlink&quot; title=&quot;进程隐藏&quot;&gt;&lt;/a&gt;进程隐藏&lt;/h2&gt;&lt;p&gt;上周由于工作原因接触到xorddos的样本，这个样本在过去一年的时间里非常常见，&lt;br&gt;变种也很多，拿到的样本比较有趣的是 </summary>
      
    
    
    
    
    <category term="Malware" scheme="http://usmacd.com/tags/Malware/"/>
    
  </entry>
  
</feed>
