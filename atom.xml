<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>安全代码</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://usmacd.com/"/>
  <updated>2021-08-23T03:43:11.205Z</updated>
  <id>http://usmacd.com/</id>
  
  <author>
    <name>henices</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于A股变盘的假期效应思考</title>
    <link href="http://usmacd.com/2021/08/23/a_change/"/>
    <id>http://usmacd.com/2021/08/23/a_change/</id>
    <published>2021-08-23T03:43:11.205Z</published>
    <updated>2021-08-23T03:43:11.205Z</updated>
    
    <content type="html"><![CDATA[<p>沉浮 A股多年，发现一个比较重要的规律，A 股变盘的时间节点大多发生在重大节假日期间，分别举例如下：</p><p>重大节日 （包括阳历和农历： 劳动节，国庆节，中秋节，端午节，过年 等）<br>周一/周五<br>月初/月末</p><p>有人总结出 A 股变盘时间节点和农历的 24 节气相关，每个节气的时间间隔大致在 15 到 16 天左右，这条规律<br>其实和上面的 「1] 说法是一致的。</p><p>思考其背后的原因，平时交易日都是连续的中间无间断，大家的交易思路和看法也比较容易连续一致。<br>每逢重大节日，或者月初月末，往往都是放假休息的时间，外加期间各种信息的输入量比平时大很多，这样容易有思维波动。<br>重大节日后，主力一带节奏，容易对大家的思维进行强化，分歧转一致后，就真的变盘了。</p><p>A股还有个月初，月末效应，月初赚钱，月末亏钱，比较奇怪，可能和基金经理的月初建仓和月末考核相关，这条规律几乎是对称的，<br>如果月末没有大跌，月初基本就没有大赚效应。</p><p>后面发现居然有一个股票技术分析流派叫季节派。（季节理论 Season Theory）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;沉浮 A股多年，发现一个比较重要的规律，A 股变盘的时间节点大多发生在重大节假日期间，分别举例如下：&lt;/p&gt;
&lt;p&gt;重大节日 （包括阳历和农历： 劳动节，国庆节，中秋节，端午节，过年 等）&lt;br&gt;周一/周五&lt;br&gt;月初/月末&lt;/p&gt;
&lt;p&gt;有人总结出 A 股变盘时间节点和农
      
    
    </summary>
    
    
    
      <category term="investment" scheme="http://usmacd.com/tags/investment/"/>
    
  </entry>
  
  <entry>
    <title>afl-fuzz 框架</title>
    <link href="http://usmacd.com/2021/08/17/afl/"/>
    <id>http://usmacd.com/2021/08/17/afl/</id>
    <published>2021-08-17T07:24:09.415Z</published>
    <updated>2021-08-17T07:24:09.415Z</updated>
    
    <content type="html"><![CDATA[<p>afl-fuzz 的整体架构，新手理解起来还是比较费劲，网络上发现一张图觉得不错，放上来大家看看，感谢原作者。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/afl-fuzz.png" alt="afl-fuzz"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;afl-fuzz 的整体架构，新手理解起来还是比较费劲，网络上发现一张图觉得不错，放上来大家看看，感谢原作者。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/henices/pictures/master/afl-fu
      
    
    </summary>
    
    
    
      <category term="Security" scheme="http://usmacd.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>root Pixel2 Android 11 的方法</title>
    <link href="http://usmacd.com/2021/07/26/root_android11_pixel2/"/>
    <id>http://usmacd.com/2021/07/26/root_android11_pixel2/</id>
    <published>2021-07-26T06:25:53.315Z</published>
    <updated>2021-07-26T06:25:53.315Z</updated>
    
    <content type="html"><![CDATA[<p>要正常使用 frida 首先需要把手机给 root 了， 在最近测试的情况发现 Android 10 和 Android 11 系统工作比较正常， Android 6<br>和其他系统似乎差一些？</p><p>要刷机首先需要下载 <code>adb</code> 等工具，这些工具由 Android 的 SDK platform tools 提供，下载地址为：<a href="https://developer.android.com/studio/releases/platform-tools">https://developer.android.com/studio/releases/platform-tools</a><br>选择相应的操作系统版本下载即可， Google 提供了 Windows、Linux、Mac 等系统的支持。</p><p>基础镜像可以选择的 Google 的官方镜像 Factory Image，如果能自己编译 Android 系统则更好，在调试的时候可以看到系统库的符号。</p><p>我的 Android 手机为 Pixel 2 在 <a href="https://developers.google.com/android/images#walleye">https://developers.google.com/android/images#walleye</a> 上可以查找相应的镜像， 下个最新的 <a href="https://dl.google.com/dl/android/aosp/walleye-rp1a.201005.004.a1-factory-0c23f6cf.zip">https://dl.google.com/dl/android/aosp/walleye-rp1a.201005.004.a1-factory-0c23f6cf.zip</a></p><p>要想刷镜像前提条件是先要解锁 bootloader， Pixel2 新手机解锁的命令和以前有变化，可以参考 <a href="https://source.android.com/devices/bootloader/locking_unlocking">https://source.android.com/devices/bootloader/locking_unlocking</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br><span class="line">fastboot flashing unlock_critical</span><br></pre></td></tr></table></figure><p>下载解压后，里面有个 flash-all 的脚本，将手机重启到 fastboot 模式后可以直接运行， <code>adb reboot bootloader</code>， 重启到 fastboot 模式后，执行 flash-all 脚本，刷机系统镜像就完成了。</p><p>以前 root  Android 用的都是 SuperSU 和 TWRP， 这次使用了一个不同的方法 <a href="https://github.com/topjohnwu/Magisk">Magisk</a> ， 安装的方法参见：<br><a href="https://topjohnwu.github.io/Magisk/install.html">https://topjohnwu.github.io/Magisk/install.html</a></p><p>有两种模式， patch boot 或者 patch recovery， 安装 Magisk app 后如果界面显示  <code>Ramdisk：Yes</code>，则需要 patch boot。<br>Magisk app 的下载地址 <a href="https://github.com/topjohnwu/Magisk/releases/download/v23.0/Magisk-v23.0.apk">https://github.com/topjohnwu/Magisk/releases/download/v23.0/Magisk-v23.0.apk</a></p><p>安装 Magisk app 后， 选择需要 patch 的镜像文件，选择后会自动生成新的修改过后的镜像文件。<br>获得修改后的镜像文件后，需要将修改后的镜像文件重新刷一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash boot /path/to/magisk_patched.img <span class="comment">#or fastboot flash recovery /path/to/magisk_patched.img</span></span><br></pre></td></tr></table></figure><p>刷完新的修改后的镜像，重启系统，Root 就完成了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;要正常使用 frida 首先需要把手机给 root 了， 在最近测试的情况发现 Android 10 和 Android 11 系统工作比较正常， Android 6&lt;br&gt;和其他系统似乎差一些？&lt;/p&gt;
&lt;p&gt;要刷机首先需要下载 &lt;code&gt;adb&lt;/code&gt; 等工具，
      
    
    </summary>
    
    
    
      <category term="Android" scheme="http://usmacd.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>fedora 上安装 fcitx5 rime</title>
    <link href="http://usmacd.com/2021/07/26/fcitx5-rime/"/>
    <id>http://usmacd.com/2021/07/26/fcitx5-rime/</id>
    <published>2021-07-26T02:11:58.423Z</published>
    <updated>2021-07-26T02:11:58.423Z</updated>
    
    <content type="html"><![CDATA[<p>现在 fcitx 已经升级到了 fcitx5, 本来用着 fcitx4 挺好，也没有想着升级，在折腾 fcitx.vim 的时候发现 fcitx 居然升级了，<br>使得我的 vim 插件无法正常工作了，一顿折腾，本来以为很简单没想到进了个大坑 。<br>主要是不愿意放弃我的一万多行的 rime 用户词库，多年的积累了，不过 Linux 用户不就是老折腾吗， 唉。</p><p>fcitx5-rime 的默认的配置目录已经变为 <code>~/.local/share/fcitx5/rime</code>， fcitx4 默认的配置目录是 <code>~/.config/fcitx/rime</code></p><h3 id="安装-fcitx5-和-fcitx5-rime"><a href="#安装-fcitx5-和-fcitx5-rime" class="headerlink" title="安装 fcitx5 和 fcitx5 rime"></a>安装 fcitx5 和 fcitx5 rime</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install -y fcitx5 fcitx5-autostart fcitx5-chinese-addons fcitx5-configtool fcitx5-gtk fcitx5-qt</span><br><span class="line">sudo dnf install -y fcitx5-rime</span><br></pre></td></tr></table></figure><p>Fedora dnf 已经默认有 fcitx5-rime 的安装包了，不用自己重新编译了，非常不错。 <code>fcitx5-chinese-addons</code><br>为 fcitx5 自己默认带的中文输入法，这些和 rime 没有什么关系，网络上有人说， fcitx 的中文输入较以前有较大改进。<br><code>fcitx5-autostart</code> 用于自启动。后面发现系统自带的启动环境变量好像设置的有问题，不安装其实也没有什么问题，<br>自己手动执行 <code>fcitx5 -d</code> 即可。</p><h3 id="设置正确的环境变量"><a href="#设置正确的环境变量" class="headerlink" title="设置正确的环境变量"></a>设置正确的环境变量</h3><p>修改  <code>~/.xprofile</code>， <code>~/.zshrc</code> ， <code>/etc/profile</code> 等文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx5</span><br><span class="line">export QT_IM_MODULE=fcitx5</span><br><span class="line">export XMODIFIERS=&quot;@im=fcitx5&quot;</span><br></pre></td></tr></table></figure><h3 id="编译-fcitx5-qt5"><a href="#编译-fcitx5-qt5" class="headerlink" title="编译 fcitx5-qt5"></a>编译 fcitx5-qt5</h3><p>为了使我们自己编译的 vnote 可以正常使用 fcitx5， 需要编译 fcitx5-qt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:fcitx/fcitx5-qt.git</span><br><span class="line"></span><br><span class="line">cat &lt;&lt; <span class="string">EOF &gt; build_linux.sh</span></span><br><span class="line"><span class="string">QTDIR=&quot;/home/henices/Qt5.12.9/5.12.9/gcc_64/&quot;</span></span><br><span class="line"><span class="string">PATH=&quot;$QTDIR/bin:$PATH&quot;</span></span><br><span class="line"><span class="string">LDFLAGS=-L$QTDIR/lib</span></span><br><span class="line"><span class="string">CPPFLAGS=-I$QTDIR/include</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rm -rf build</span></span><br><span class="line"><span class="string">mkdir -p build</span></span><br><span class="line"><span class="string">cd build</span></span><br><span class="line"><span class="string">cmake ..</span></span><br><span class="line"><span class="string">make -j8</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">bash build_linux.sh</span><br></pre></td></tr></table></figure><p>编译完成后将生成的 so 文件 copy 到 qt 的插件目录： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cp ./qt5/platforminputcontext/libfcitx5platforminputcontextplugin.so /home/henices/Qt5.12.9/5.12.9/gcc_64/plugins/platforminputcontexts/</span><br></pre></td></tr></table></figure><h3 id="配置中文环境"><a href="#配置中文环境" class="headerlink" title="配置中文环境"></a>配置中文环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/locale.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LANG=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br><span class="line"><span class="built_in">export</span> LC_CTYPE=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br></pre></td></tr></table></figure><h3 id="安装-rime-词库"><a href="#安装-rime-词库" class="headerlink" title="安装 rime 词库"></a>安装 rime 词库</h3><p>rime 现在已经使用 plum 管理词库，如果需要安装双拼输入法的，可以执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://git.io/rime-install | bash</span><br><span class="line">rime_frontend=fcitx5-rime bash rime-install double_pinyin</span><br></pre></td></tr></table></figure><p>rime 为了保证输入速度，词库很小，为了能够自动显示更多的词组，就需要使用拓展词库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rime-aca/dictionaries.git</span><br><span class="line">cp dictionaries/luna_pinyin.dict/* ~/.<span class="built_in">local</span>/share/fcitx5/rime/</span><br></pre></td></tr></table></figure><p>安装了上面的拓展词库后，输入特殊符号的能力还是比较弱，需要把 symbols.yaml 也给加进来。</p><p><a href="https://github.com/rime/rime-prelude">https://github.com/rime/rime-prelude</a> 提供了我们所需要的 symbols.yaml 和 default.yaml,<br>可以使用 <a href="https://github.com/rime/plum">東風破</a> 安裝： <code>rime_frontend=fcitx5-rime bash rime-install prelude</code></p><p>由于我们使用的是自然码双拼，需要修改的文件为 <code>double_pinyin.custom.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">patch:</span></span><br><span class="line">  <span class="comment"># 載入朙月拼音擴充詞庫</span></span><br><span class="line">  <span class="attr">&quot;translator/dictionary&quot;:</span> <span class="string">luna_pinyin.extended</span></span><br><span class="line">  <span class="attr">&quot;punctuator/import_preset&quot;:</span> <span class="string">symbols</span></span><br><span class="line">  <span class="attr">&quot;recognizer/patterns/punct&quot;:</span> <span class="string">&quot;^/([A-Z|a-z]*|[0-9]|10)$&quot;</span></span><br></pre></td></tr></table></figure><p>设置完成后，要重新启动输入法，比如要输入 ☆ ，输入  <code>/xh</code> 即可</p><h3 id="将用户词库导入-rime"><a href="#将用户词库导入-rime" class="headerlink" title="将用户词库导入 rime"></a>将用户词库导入 rime</h3><p><code>rime_dict_manager -i luna_pinyin luna_pinyin.userdb.txt</code></p><p>这一步很关键啊，多年的积累不能浪费了。</p><h3 id="配置-fcitx5-皮肤"><a href="#配置-fcitx5-皮肤" class="headerlink" title="配置 fcitx5 皮肤"></a>配置 fcitx5 皮肤</h3><p>fcitx5 默认的皮肤不太好看，所以下载更新了皮肤，这款简约风格的皮肤非常符合老夫的胃口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/thep0y/fcitx5-themes.git</span><br><span class="line">cp spring ~/.<span class="built_in">local</span>/share/fcitx5/themes -r</span><br></pre></td></tr></table></figure><p>修改配置文件 <code>~/.config/fcitx5/conf/classicui.conf</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 垂直候选列表</span></span><br><span class="line"><span class="string">Vertical</span> <span class="string">Candidate</span> <span class="string">List=False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按屏幕 DPI 使用</span></span><br><span class="line"><span class="string">PerScreenDPI=True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Font (设置成你喜欢的字体)</span></span><br><span class="line"><span class="string">Font=&quot;Smartisan</span> <span class="string">Compact</span> <span class="string">CNS</span> <span class="number">13</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 主题(这里要改成你想要使用的主题名，主题名就在下面)</span></span><br><span class="line"><span class="string">Theme=spring</span></span><br></pre></td></tr></table></figure><p>另外还有一款 fcitx5 皮肤相对流行：<a href="https://github.com/hosxy/Fcitx5-Material-Color">https://github.com/hosxy/Fcitx5-Material-Color</a></p><p>切换皮肤的方法是，点击鼠标右键点击 配置 -&gt; 附加组件 -&gt; 经典用户界面 -&gt; 点击右边图标 -&gt; 选择皮肤</p><h3 id="设置-fcitx-rime-单行模式"><a href="#设置-fcitx-rime-单行模式" class="headerlink" title="设置 fcitx rime 单行模式"></a>设置 fcitx rime 单行模式</h3><p>如果要将输入法设置为单行模式，需要修改配置文件 <code>~/.config/fcitx5/conf/rime.conf</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">PreeditInApplication=True</span></span><br></pre></td></tr></table></figure><p>或者按快捷键 <code>ctrl + alt + p</code>, 这个快捷键可以来回切换很方便，单行还是双行就因人而异了，我个人觉得单行好点。</p><h3 id="让-fcitx5-正确显示菜单"><a href="#让-fcitx5-正确显示菜单" class="headerlink" title="让 fcitx5 正确显示菜单"></a>让 fcitx5 正确显示菜单</h3><p>要做这个步骤是因为 rime 有 「部署」、「同步」这几个操作按钮，如果不正确配置的话在 fcitx5 上没法正常显示。<br>fcitx5 在任务上有个托盘图标，点击右键就可以看到这些菜单。</p><p>要让 fcitx 正确显示菜单，关键在于让 rime 输入法默认处于激活状态，根据 fcitx5 配置的提示第一个输入法为非激活状态。</p><ul><li>（1） 将第一个输入法设置为  键盘-英语 （美国），第二个输入法设置为 中州韵</li><li>（2） 在全局设置中，勾上默认状态为激活，共享输入状态设置为 <code>程序</code></li></ul><h3 id="fcitx-vim"><a href="#fcitx-vim" class="headerlink" title="fcitx.vim"></a>fcitx.vim</h3><p>这个章节是写给 linux vim 用户看的，没有此需求的可以直接跳过这段。</p><p>vim 确实是程序编辑的利器，但是在用vim 写中文文档的时候，有一个痛点，你在用 fcitx 写中文的时候想保存文档，<br>vim 必须切换到 normal 模式才能输入保存的命令 <code>:w</code>，进入normal 模式的方法是连续按两下 ESC，好了现在你应该<br>输入命令了，但是你没法输入你现在还在打中文呢，没有办法你必须先切换到英文输入法，然后才能正确地输入 <code>:w</code> 痛苦啊。</p><p>fcitx.vim 就是为解决这个痛点而生的插件，个人觉得这是vim 必装的几个插件之一。fcitx.vim 的github 仓库<br>地址为：<a href="https://github.com/lilydjwg/fcitx.vim">https://github.com/lilydjwg/fcitx.vim</a></p><p>值得一提的是这个仓库有两个分支，fcitx4 分支 和 fcitx5 分支，使用的时候一定要分清楚，这两个分支如果<br>使用错了，就没法正常使用 fcitx.vim 插件了。fcitx4 和 fcitx5 dbus 对象名字有变化，导致代码通用性不好。<br>现在默认分支为 fcitx5，如果你使用 fcitx4 可能直接 git clone 下来就会发现插件用不了，我也是因为这个<br>原因才发现 fcitx 居然更新了。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://xuthus.cc/misc/fedora-install-fcitx5.html">https://xuthus.cc/misc/fedora-install-fcitx5.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在 fcitx 已经升级到了 fcitx5, 本来用着 fcitx4 挺好，也没有想着升级，在折腾 fcitx.vim 的时候发现 fcitx 居然升级了，&lt;br&gt;使得我的 vim 插件无法正常工作了，一顿折腾，本来以为很简单没想到进了个大坑 。&lt;br&gt;主要是不愿意放弃我
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://usmacd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>恢复 Android App 的截屏功能</title>
    <link href="http://usmacd.com/2021/07/20/disable_security_flags/"/>
    <id>http://usmacd.com/2021/07/20/disable_security_flags/</id>
    <published>2021-07-20T08:34:48.860Z</published>
    <updated>2021-07-20T08:34:48.860Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇上某 App 禁止截屏，其实就是使用了下面这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getWindow().setFlags(LayoutParams.FLAG_SECURE, LayoutParams.FLAG_SECURE);</span><br></pre></td></tr></table></figure><p>使用 frida 脚本可以绕过绕过这个限制 （使用 frida 需要将手机 root）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SECURE</span></span><br><span class="line">   <span class="keyword">var</span> FLAG_SECURE = <span class="number">0x2000</span>;</span><br><span class="line">   <span class="keyword">var</span> Window = Java.use(<span class="string">&quot;android.view.Window&quot;</span>);</span><br><span class="line">   <span class="keyword">var</span> setFlags = Window.setFlags;  <span class="comment">//.overload(&quot;int&quot;, &quot;int&quot;)</span></span><br><span class="line"></span><br><span class="line">   setFlags.implementation = <span class="function"><span class="keyword">function</span> (<span class="params">flags, mask</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;Disabling FLAG_SECURE...&quot;</span>);</span><br><span class="line">       flags &amp;= ~FLAG_SECURE;</span><br><span class="line">       setFlags.call(<span class="built_in">this</span>, flags, mask);</span><br><span class="line">       <span class="comment">// Since setFlags returns void, we don&#x27;t need to return anything</span></span><br><span class="line">   &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行 frida 命令 <code>frida -U -l disable.js -n com.apps.android --no-pause</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ frida -U -l disable.js -n com.apps.android --no-pause</span><br><span class="line"></span><br><span class="line">[Pixel 2::com.apps.android]-&gt;</span><br><span class="line">[Pixel 2::com.apps.android]-&gt;</span><br><span class="line">[Pixel 2::com.apps.android]-&gt; Disabling FLAG_SECURE...</span><br><span class="line">Disabling FLAG_SECURE...</span><br><span class="line">Disabling FLAG_SECURE...</span><br><span class="line">Disabling FLAG_SECURE...</span><br><span class="line">Disabling FLAG_SECURE...</span><br><span class="line">Disabling FLAG_SECURE...</span><br><span class="line">Disabling FLAG_SECURE...</span><br><span class="line">Disabling FLAG_SECURE...</span><br><span class="line">Disabling FLAG_SECURE...</span><br><span class="line">Disabling FLAG_SECURE...</span><br></pre></td></tr></table></figure><p>值得注意的是，这里使用了 <code>-n</code> 参数， attach 到目标进程，要不 App 会自动重启。看到输出调试信息后，<br>就可以正常截屏了。</p><h3 id="使用-objection"><a href="#使用-objection" class="headerlink" title="使用 objection"></a>使用 objection</h3><p>objection「2」有此功能，执行下面命令即可： <code>android ui FLAG_SECURE false</code>  但是我测试失败了。</p><h3 id="截屏小技巧-（lzx）"><a href="#截屏小技巧-（lzx）" class="headerlink" title="截屏小技巧 （lzx）"></a>截屏小技巧 （lzx）</h3><p>Android 截屏，可以使用一个快速的技巧  <code>adb exec-out screencap -p &gt; test.png</code></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>[1] <a href="https://bhamza.me/2019/11/03/Android-Frida-hooking-disabling-FLAG-SECURE.html">https://bhamza.me/2019/11/03/Android-Frida-hooking-disabling-FLAG-SECURE.html</a></li><li>[2] <a href="https://github.com/sensepost/objection">https://github.com/sensepost/objection</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天遇上某 App 禁止截屏，其实就是使用了下面这段代码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="Security" scheme="http://usmacd.com/tags/Security/"/>
    
      <category term="Android" scheme="http://usmacd.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>高效复盘技巧</title>
    <link href="http://usmacd.com/2021/06/28/fupangjiqiao/"/>
    <id>http://usmacd.com/2021/06/28/fupangjiqiao/</id>
    <published>2021-06-28T05:37:10.630Z</published>
    <updated>2021-06-28T05:37:10.630Z</updated>
    
    <content type="html"><![CDATA[<p>前些年总结的，现在看起来，过于复杂了，可能做短线的会有需求。</p><p><img src="https://github.com/henices/pictures/raw/master/webwxgetmsgimg.jpeg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前些年总结的，现在看起来，过于复杂了，可能做短线的会有需求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/henices/pictures/raw/master/webwxgetmsgimg.jpeg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="investment" scheme="http://usmacd.com/tags/investment/"/>
    
  </entry>
  
  <entry>
    <title>紫竹桥附近看病情况</title>
    <link href="http://usmacd.com/2021/06/28/304/"/>
    <id>http://usmacd.com/2021/06/28/304/</id>
    <published>2021-06-28T05:26:53.143Z</published>
    <updated>2021-06-28T05:26:53.143Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个长期在帝都紫竹桥混吃的中年大叔，经常遇到需要看病的情况，主要需求有两个 （大人看病，小孩看病）。</p><p>总结附近医院情况，个人理解，供参考：</p><p>466:</p><p>缺点：没有儿科，巨贵，感觉医生喜欢过度治疗，据说一些科室已被私人承包，媳妇和自己都被坑过。<br>优点：离紫竹桥距离近，三甲，人通常比较少，小病，偷懒的时候可以过去。据说牙科不错，但是我没有去过。</p><p>304:</p><p>缺点：信息化程度相对较弱，但是看病流程梳理得不错。<br>优点：三甲，有儿科，对小儿看病有一定优待。医生水平不错，小孩在这看过几次，治疗效果不错。</p><p>现在304 改名为 解放军总医院第四医学中心，儿科的实力比以往有较大提升。</p><p>四季青：</p><p>缺点：二级医院，儿科有的医生感觉不太专业。<br>优点：挂号方便，有儿科，医院较大。</p><p>北方医院：</p><p>缺点：二级医院， 医院较小。<br>优点：离紫竹桥距离近，有保健科，小孩打预防针不错。</p><p>空总：</p><p>在这个医院多个科室看过病，家人还在这做过微创手术。</p><p>缺点：挂号有点难，人多，儿科水平一般。<br>优点：三甲，皮肤科北京有名，各科室水平比较均衡。信息化程度高，看病挺方便。</p><p>海总：</p><p>这个医院我没有去过，距离稍远。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个长期在帝都紫竹桥混吃的中年大叔，经常遇到需要看病的情况，主要需求有两个 （大人看病，小孩看病）。&lt;/p&gt;
&lt;p&gt;总结附近医院情况，个人理解，供参考：&lt;/p&gt;
&lt;p&gt;466:&lt;/p&gt;
&lt;p&gt;缺点：没有儿科，巨贵，感觉医生喜欢过度治疗，据说一些科室已被私人承包，媳妇和自
      
    
    </summary>
    
    
    
      <category term="Life" scheme="http://usmacd.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>【转】冯柳投资十大金句</title>
    <link href="http://usmacd.com/2021/06/28/fengliu/"/>
    <id>http://usmacd.com/2021/06/28/fengliu/</id>
    <published>2021-06-28T04:24:01.826Z</published>
    <updated>2021-06-28T04:24:01.826Z</updated>
    
    <content type="html"><![CDATA[<p>（一）经济的波动就像是剪羊毛，长好了就剪、剪完了再长。拿剪子的一般就是赢家，当然赢家之间也有互相剪的，所以就有大小赢家、长短赢家之分。</p><p>（二）技术分析主要是找出趋势和预期同向运动并强化的机会，价值分析则可以在反向运动但最终会被预期改变的机会上下注。</p><p>（三）各方面都完美的系统是不可能长期存在的，放弃效率和短期安全的系统往往才会是长期安全和可重复的。这不太符合人性，也就保证了系统的独特和有效性，也有利于将精力放在长期要素和战略点的思考上。</p><p>（四）涨跌都能令人坚定的才是好标的，跌令实的更实，因为价钱便宜了。涨令虚处显得确定，因为得到市场的确认和佐证了。这就是虚实结合带来的效果，如果涨几十个点就让人有想卖的感觉，那就说明虚处不足，就不太可能是好选择，最后也许连那几十个点也不容易挣到。反过来也是一样，跌了不敢重仓加的就说明实处不够，要多检讨下自己对确定性的把握能力。</p><p>（五）资产就是金钱在不同时间下的不同属性，本质就是现在的钱和未来的钱之间进行交换，买入是用现在换未来，卖出则是把未来换现在，关键要想明白未来和现在谁更值钱就好了。牛熊市就是这样的一个判断依据，当然，对极少数的优异公司来说，未来总是会强过现在的，这就是比牛熊大势更大的大势。</p><p>（六）市场在不断变化，企业也在不断变化，变化是常态，所以任何时候都要多方向的反复审视，对世界有敬畏心。这个敬畏就是要认识到事物总是在不断变化和出现意外的，所以要尽量让自己处于有保护的状态，尽量多的假设极端情况下的可靠性。</p><p>（七）当全世界都想通过股市来对抗通货膨胀的时候，也许拿着现金让其自然贬值会是更好的选择。除非你能找到明确的新增预期，否则凭什么指望别人以更高的价钱来购买已经给他人提供过保值机会的资产呢（房地产）。</p><p>（八）每个阶段的侧重点是不一样的。在高位的时候，我们要做计算题，要定量。因为一只股票涨了这么多、这么长时间，它的方向一定是没有问题的，这个时候你再去做定性研究意义不大。在低位的时候，如果你再去算账，就很容易吃大亏。它跌了这么久，那一定是方向上出了问题，你要把方向给想明白。如果能把方向证伪掉，是不需要考虑定量的问题，因为低位天然带有弹性和赔率。</p><p>（九）真正的投机应该是在价值的基础上进行的，是通过充分的价值理解后，将其在不同人群或环境下进行切换来获益。它认识到价值有主观倾向性和个性化的特点，价值不是个稳定具体的东西，也不存在用什么方法推算的公允值，因为资本以及资本后面的人是丰富不同的，他们有着不同的成本和收益预期，在各种市场环境下也会有着不同的预期因子和贴现率，而这些在乘数和复利计算的基础下就会有着巨大的差异。这也说明了为什么理性且信息充分对称的人之间也可以产生交易并实现双赢，其原因就在于他们有着不同的价值观、需求特点和满足感。</p><p>（十）长线投资很多人认为这是最容易做的，只要买进不动就可以了，其实这完全是误解。在所有的操作策略中，长线的要求最高。他需要对企业有着极为深刻的认识，对自己有着更为坚强的控制。他清楚把握企业未来数年的发展趋势，以投资的心态分享企业的成长。他的标的物是千里挑一，在这样的机会面前它不会惧怕任何亏损，不会设置除基本面外的任何止损指标。自信、尊重客观价值、不理会乃至勇于对抗市场是必备的投资品质，日常的波动在这样的前景面前是不应去考虑的。只有这样，股票才能够真正成为改变一生的东西。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;（一）经济的波动就像是剪羊毛，长好了就剪、剪完了再长。拿剪子的一般就是赢家，当然赢家之间也有互相剪的，所以就有大小赢家、长短赢家之分。&lt;/p&gt;
&lt;p&gt;（二）技术分析主要是找出趋势和预期同向运动并强化的机会，价值分析则可以在反向运动但最终会被预期改变的机会上下注。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="investment" scheme="http://usmacd.com/tags/investment/"/>
    
  </entry>
  
  <entry>
    <title>调试AOSP Java 代码</title>
    <link href="http://usmacd.com/2021/06/18/debug_aosp_java_code/"/>
    <id>http://usmacd.com/2021/06/18/debug_aosp_java_code/</id>
    <published>2021-06-18T01:56:42.523Z</published>
    <updated>2021-06-18T01:56:42.523Z</updated>
    
    <content type="html"><![CDATA[<p>下载 Android 源代码，编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> build/envsetup.sh</span><br><span class="line">$ lunch</span><br><span class="line">$ make</span><br><span class="line">$ mmm development/tools/idegen/</span><br><span class="line">$ ./development/tools/idegen/idegen.sh</span><br></pre></td></tr></table></figure><p>运行后将生成下面几个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android.ipr (IntelliJ / Android Studio)</span><br><span class="line">android.iml (IntelliJ / Android Studio)</span><br><span class="line">.classpath  (Eclipse)</span><br></pre></td></tr></table></figure><ol><li>在Android Studio 中导入 android.ipr</li></ol><p>File -&gt; Open 选择 android.ipr, 导入后可以Android Studio 中浏览AOSP 源码</p><ol start="2"><li>设置远程调试配置文件</li></ol><p>Run -&gt; Edit Configuration 点击左上角的 + 类型选择 Remote</p><ol start="3"><li>Attack 到需要调试的进程</li></ol><p>这里有两种方法，一是使用SDK 提供的 Monitor 二是使用 Android Studio 自带的<br>Attach debugger to Android Process 按钮。 </p><p>连接成功后将看到 Connected to the target VM</p><ol start="4"><li>设置断点</li></ol><p>设置断点很简单，用鼠标点击源码文件的左边栏，看见红色圆点说明就已经设置成功了。也<br>可以使用Ctrl + F8 的快捷键。</p><ol start="5"><li>运行程序，触发断点</li></ol><p>需要注意的是在调试过程中会出现源码对不上的情况，需要自己选择正确的源码。关于哪些<br>进程可以调试的问题，上篇已经有记录，这里就不在说了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>AOSP Sources in the IDE<br><a href="https://newcircle.com/s/post/1720/aosp_sources_in_the_ide">https://newcircle.com/s/post/1720/aosp_sources_in_the_ide</a></li><li>Debugging AOSP Platform code with Android Studio - Part I - Java Debugger<br><a href="http://ronubo.blogspot.sg/2016/01/debugging-aosp-platform-code-with.html">http://ronubo.blogspot.sg/2016/01/debugging-aosp-platform-code-with.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下载 Android 源代码，编译&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
    
    
      <category term="Android" scheme="http://usmacd.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>github clone 加速</title>
    <link href="http://usmacd.com/2021/06/17/github_speed_up/"/>
    <id>http://usmacd.com/2021/06/17/github_speed_up/</id>
    <published>2021-06-17T08:52:57.338Z</published>
    <updated>2021-06-17T08:52:57.338Z</updated>
    
    <content type="html"><![CDATA[<p>国内因为众所周知的原因，git clone 一直很慢，最近可能状况就更糟糕了。@TeleMan 提供了一个信息，可以<br>通过修改 host 文件达到加速效果。经过测试，只要修改两条记录即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">199.232.69.194                github.global.ssl.fastly.net</span><br><span class="line">140.82.113.4                  github.com</span><br></pre></td></tr></table></figure><p>修改后，速度快多了，直连</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/googleprojectzero/winafl.git</span><br><span class="line">正克隆到 &#x27;winafl&#x27;...</span><br><span class="line">remote: Enumerating objects: 1538, done.</span><br><span class="line">remote: Counting objects: 100% (175/175), done.</span><br><span class="line">remote: Compressing objects: 100% (108/108), done.</span><br><span class="line">remote: Total 1538 (delta 90), reused 130 (delta 60), pack-reused 1363</span><br><span class="line">接收对象中: 100% (1538/1538), 5.29 MiB | 765.00 KiB/s, 完成.</span><br><span class="line">处理 delta 中: 100% (846/846), 完成.</span><br></pre></td></tr></table></figure><p>使用一段时间后发现不是太稳定，终极大法还是需要一个长长的梯子，此方法记为备用方案。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;国内因为众所周知的原因，git clone 一直很慢，最近可能状况就更糟糕了。@TeleMan 提供了一个信息，可以&lt;br&gt;通过修改 host 文件达到加速效果。经过测试，只要修改两条记录即可&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="Programming" scheme="http://usmacd.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>010editor 保持试用</title>
    <link href="http://usmacd.com/2021/05/24/010editor/"/>
    <id>http://usmacd.com/2021/05/24/010editor/</id>
    <published>2021-05-24T04:05:03.209Z</published>
    <updated>2021-05-24T04:05:03.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p>010Editor是一款快速且强大的十六进制编辑器。用来编辑二进制文件。有一个友好易于使用的界面，无限次的<br>undo和redo操作。另外还可以打印十六进制的字节或者以书签的方式标出某些重要的字节。<br>支持二进制模板（binary template）系统。</p><h2 id="保持试用"><a href="#保持试用" class="headerlink" title="保持试用"></a>保持试用</h2><p>国外软件很多时候相当厚道了，试用基本是全功能，轻微延时和不能自动更新二进制模板，就日常使用来说基本<br>是完全够用了。</p><p>关键文件为 <code>~/.config/SweetScape/010 Editor.ini</code>，无法使用的时侯可以把这个文件清空，将恢复30天试用状态，<br>或者简单粗暴的将文件设置为只读。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 444 <span class="string">&quot;010 Editor.ini&quot;</span></span><br></pre></td></tr></table></figure><p>用IDA逆向的时侯没有发现这个文件比较奇怪。这个文件是 是使用strace命令发现的，strace命令支持 <code>-e</code> 的过<br>滤参数将有效减少输出，一般来说看strace日志文件可以从最后往前看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strace -e trace=file ./010editor</span><br></pre></td></tr></table></figure><p>从代码上看有使用网络验证需要在hosts文件中屏敝两个网站， 可以减少一些不必要的麻烦。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 www.sweetscape.com</span><br><span class="line">127.0.0.1 www.010editor.com</span><br></pre></td></tr></table></figure><p>我现在已经是注册用户了，在很长的一段时间内，这方法是管用的，做个备忘。</p><p>scz 补充：</p><p>之前github上的那个开源keygen还能用，或者就用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user    user</span><br><span class="line">pass    3470D4AC7CEFACD9297A</span><br></pre></td></tr></table></figure><p>只是hosts更改可能不够，windows上用wf.msc阻止010 Editor联网，Linux好像没有简单办法阻止特定进程联网，<br>只能变相利用uid、gid达成目的。</p><p>How to block internet access to certain programs on Linux<br><a href="https://serverfault.com/questions/550276/how-to-block-internet-access-to-certain-programs-on-linux">https://serverfault.com/questions/550276/how-to-block-internet-access-to-certain-programs-on-linux</a></p><p><a href="https://unix.stackexchange.com/questions/104830/block-specific-application-with-iptables">https://unix.stackexchange.com/questions/104830/block-specific-application-with-iptables</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;软件介绍&quot;&gt;&lt;a href=&quot;#软件介绍&quot; class=&quot;headerlink&quot; title=&quot;软件介绍&quot;&gt;&lt;/a&gt;软件介绍&lt;/h2&gt;&lt;p&gt;010Editor是一款快速且强大的十六进制编辑器。用来编辑二进制文件。有一个友好易于使用的界面，无限次的&lt;br&gt;undo和
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://usmacd.com/tags/linux/"/>
    
      <category term="Crack" scheme="http://usmacd.com/tags/Crack/"/>
    
  </entry>
  
  <entry>
    <title>ThunerBird 78.8.1 连接 TLS 1.0 失败问题和 Linux 乱谈</title>
    <link href="http://usmacd.com/2021/04/30/thunderbird.tls.1.0/"/>
    <id>http://usmacd.com/2021/04/30/thunderbird.tls.1.0/</id>
    <published>2021-04-30T01:28:43.797Z</published>
    <updated>2021-04-30T01:28:43.797Z</updated>
    
    <content type="html"><![CDATA[<p>我在公司使用 Linux 作用主力机已经 10 多年了，自从抛弃 Ubuntu 转入 Fedora 怀抱，生活幸福了不少。<br>早年最大的问题是 OFFICE 软件，工作中少不了要和 doc、ppx，xls 打交道，又没有太好的软件可以使用。<br>刚开始基本就两个解决方案，wine office 和永中 OFFICE，这两个方案都不是太理想，wine 的速度很慢，<br>永中则兼容性比较差，还会出现文档格式看起来就有明显差异的情况。。</p><p>随着金山 wps 的发展，现在 OFFICE 的问题基本解决，作为轻度 EXCEL 使用者基本已经满足需求了。Linux<br>现在主要问题是字体渲染比较差，中文经常看起来发虚，如果能把这个问题彻底解决就非常不错了。作为Linux<br>老用户，各种魔改后，也能较好使用了，但后面发现还是换个显示器更管用。要解决中文显示问题，有两个<br>字体很管用，文泉驿微米黒和微软雅黑，实践证明把系统字体用上面两个字体替换，显示效果也就好了不少了。</p><p>Ubuntu Linux 最大的问题就是不太稳定，基本每次大版本升级显示都要挂，弄得我都有点心理阴影了，原来<br>周围还挺多同学使用 Linux，最终放弃了，一个直接用 Windows 了，还有一个 Windows 上跑一个 Linux 虚拟机。<br>Ubuntu 还有个坏习惯喜欢乱改，upstart，Unity等，后面都没有成为主流，bug 就更不用说了，经常挺闹心的。</p><p>Fedora 从近些年的使用情况来看，还是很不错的，网络中流传是 Redhat Linux Enterprise 的小白版本，<br>但是其实只要 bug 修得快，你大概率是感觉不到的。遇上问题，放狗一搜就会发现 redhat 已经有 bug 在<br>处理中了，于是乎就有了今天这篇。</p><p>在升级到 Fedara 33 和 ThunderBird 78 后，使用 TLS 连接公司的 ExChange 邮件服务器就连不上了。<br>我们公司的内网安全审核非常严格，邮件不使用加密连接要限时整改。放狗一搜发现，大批人员都遇上了<br>相同的问题，也有人给出了解决方案。</p><p><a href="https://support.mozilla.org/en-US/questions/1295861">https://support.mozilla.org/en-US/questions/1295861</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I think this could be due to the minimum version of TLS supported by TB 78. The release notes state </span><br><span class="line">that versions lower than 1.2 are disabled, so if your server only supports v. 1.1, </span><br><span class="line">you might be able to fix sending by changing the preference security.tls.version.min to 2 from the default 3, in Config. editor.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.thunderbird.net/en-US/thunderbird/78.0/releasenotes/">https://www.thunderbird.net/en-US/thunderbird/78.0/releasenotes/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TLS 1.0 and 1.1 disabled</span><br></pre></td></tr></table></figure><p>如何开启 TLS 1.0， mozilla 也给出了相应的方案</p><p><a href="https://support.mozilla.org/en-US/kb/thunderbird-78-faq#w_how-to-enable-outdated-security-protocols-tls-1-0-and-1-1">https://support.mozilla.org/en-US/kb/thunderbird-78-faq#w_how-to-enable-outdated-security-protocols-tls-1-0-and-1-1</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">How to enable outdated security protocols TLS 1.0 and 1.1</span><br><span class="line"></span><br><span class="line">Open Config Editor (about:config)</span><br><span class="line">≡ &gt; Preferences &gt; Find in Preferences</span><br><span class="line">In the searchbox, type: about:config, then press Enter.</span><br><span class="line">Click on the button Config Editor… in the search result.</span><br><span class="line">In the about:config dialog, search for: security.tls.version.min</span><br><span class="line">Double-click on the found preference security.tls.version.min and change its value to 1, then press Enter.</span><br><span class="line">Restart Thunderbird and try to download your messages.</span><br><span class="line">If you can receive and/or send your messages after changing this preference:</span><br><span class="line"></span><br><span class="line">Please inform your email provider to upgrade the security protocols on the server to support TLS 1.2.</span><br><span class="line">Revert the preference security.tls.version.min to its original value as soon as possible by repeating </span><br><span class="line">the above procedure, then right-click on the preference and choose Reset from the context menu.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看上去解决方案很简单，在 Preferences 中的搜索框里输入 <code>about:config</code> 点击进入，将其中的<br><code>security.tls.version.min</code> 设置为 1 就好了，但是在 Fedora 34 中不起作用。我用 wireshark 抓了包看，<br>ThunderBird 自己报告不支持的协议版本。我仔细研究了一下 ThunderBird 相关的 config 项有下面几个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">security.tls.version.min</span><br><span class="line">security.tls.version.enable-deprecated</span><br><span class="line">security.tls.version.fallback-limit</span><br></pre></td></tr></table></figure><p>我把这几个选项都设置了一下，分别设置为 1 true 1，还是不管用。</p><p>在 Fedora 33 上这个问题就没解决，这都 Fedora 34 了，所以又花了时间研究了一下。没好办法，放狗，运气<br>不错，看到了这篇</p><p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1674092#c11">https://bugzilla.mozilla.org/show_bug.cgi?id=1674092#c11</a></p><p>原来 Fedora 还有个 <code>StrongCryptoSettings</code> ，看文档可以修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update-crypto-policies --set DEFAULT:FEDORA32</span><br><span class="line">update-crypto-policies --set LEGACY</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>关键的内容就是下面这几行</p><p>cat /etc/crypto-policies/state/CURRENT.pol</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min_tls_version = TLS1.2</span><br><span class="line">protocol = TLS1.3 TLS1.2 DTLS1.2</span><br></pre></td></tr></table></figure><p>执行后变为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min_tls_version = TLS1.0</span><br><span class="line">protocol = TLS1.3 TLS1.2 TLS1.1 TLS1.0 DTLS1.2 DTLS1.0</span><br></pre></td></tr></table></figure><p>重启系统后，又可以开心地使用 ThunderBird 了 ^_^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我在公司使用 Linux 作用主力机已经 10 多年了，自从抛弃 Ubuntu 转入 Fedora 怀抱，生活幸福了不少。&lt;br&gt;早年最大的问题是 OFFICE 软件，工作中少不了要和 doc、ppx，xls 打交道，又没有太好的软件可以使用。&lt;br&gt;刚开始基本就两个解决方
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://usmacd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>在 Android 手机上的使用 stunnel  （不需要 root ）</title>
    <link href="http://usmacd.com/2021/02/04/android_stunnel/"/>
    <id>http://usmacd.com/2021/02/04/android_stunnel/</id>
    <published>2021-02-04T05:47:39.806Z</published>
    <updated>2021-02-04T05:47:39.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android-stunnel"><a href="#Android-stunnel" class="headerlink" title="Android stunnel"></a>Android stunnel</h2><p><a href="https://github.com/comp500/SSLSocks.git">https://github.com/comp500/SSLSocks.git</a>  这个项目可以使用 android 版本的 stunnel, 其实就是调用 <a href="https://www.stunnel.org/downloads/stunnel-5.57-android.zip">https://www.stunnel.org/downloads/stunnel-5.57-android.zip</a></p><p>具体配置和使用命令行差距不大，参考：<br><a href="https://github.com/comp500/SSLSocks/blob/master/README.md">https://github.com/comp500/SSLSocks/blob/master/README.md</a></p><h2 id="设置全局代理"><a href="#设置全局代理" class="headerlink" title="设置全局代理"></a>设置全局代理</h2><ol><li>在 wifi 连接的情况</li></ol><p>打开wifi 列表 -&gt; 长按连接的 wifi  -&gt; 点击修改 -&gt; 高级选项 -&gt; 填写代理相关信息</p><ol start="2"><li>使用 adb shell 执行命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global http_proxy 192.168.xx.xxx:8888</span><br></pre></td></tr></table></figure><ol start="3"><li>Proxy Toggle</li></ol><p><a href="https://github.com/theappbusiness/android-proxy-toggle.git">https://github.com/theappbusiness/android-proxy-toggle.git</a></p><p>要正常使用 app 需要用 adb shell 连接上设置相应的权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm grant com.kinandcarta.create.proxytoggle android.permission.WRITE_SECURE_SETTINGS</span><br></pre></td></tr></table></figure><h2 id="恢复无代理"><a href="#恢复无代理" class="headerlink" title="恢复无代理"></a>恢复无代理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global http_proxy</span><br><span class="line">adb shell settings delete global global_http_proxy_host</span><br><span class="line">adb shell settings delete global global_http_proxy_port</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Android-stunnel&quot;&gt;&lt;a href=&quot;#Android-stunnel&quot; class=&quot;headerlink&quot; title=&quot;Android stunnel&quot;&gt;&lt;/a&gt;Android stunnel&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://g
      
    
    </summary>
    
    
    
      <category term="Android" scheme="http://usmacd.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>How to request a RESERVED CVE</title>
    <link href="http://usmacd.com/2021/01/20/request_RESERVED_CVE/"/>
    <id>http://usmacd.com/2021/01/20/request_RESERVED_CVE/</id>
    <published>2021-01-20T06:00:18.905Z</published>
    <updated>2021-01-20T06:00:18.905Z</updated>
    
    <content type="html"><![CDATA[<p>在申请 CVE 过程中会遇到一个问题，向软件官方提交漏洞修复后，由于软件官方不是CNA 无法直接分配CVE，而申请CVE 通常需要一个软件官方确认的链接，而有些比较正规的软件在漏洞修复之前是不会有公开链接的，这就无法申请CVE了。</p><p>有点鸡生蛋，蛋生鸡的感觉。解决这个问题的办法是申请一个 RESERVED CVE。</p><h2 id="申请-RESERVED-CVE-方法"><a href="#申请-RESERVED-CVE-方法" class="headerlink" title="申请 RESERVED CVE 方法"></a>申请 RESERVED CVE 方法</h2><p>申请 RESERVED CVE，也是需要填写的CVE 申请表格的 <a href="https://cveform.mitre.org/，选择">https://cveform.mitre.org/，选择</a> Request CVE ID</p><p>根据提示的重要信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IMPORTANT: Once a CVE ID is assigned to your vulnerability, it will not be published </span><br><span class="line">in the CVE List until you have submitted a URL pointing to public information about </span><br><span class="line">the vulnerability. Without a public reference, the CVE ID will display as &quot;RESERVED&quot; </span><br><span class="line">in the CVE List. Please update CVE with a reference to the vulnerability&#x27;s </span><br><span class="line">details as soon as possible. See this FAQ for more information.</span><br></pre></td></tr></table></figure><p>只要将 public reference 留空，就可以申请 RESERVED CVE 了。CVE 官方收到请求后会有确认的邮件。</p><h2 id="CVE-官方分配-CVE-ID"><a href="#CVE-官方分配-CVE-ID" class="headerlink" title="CVE 官方分配 CVE ID"></a>CVE 官方分配 CVE ID</h2><p>CVE 官方收到 RESERVED CVE 请求后，会给分配一个 CVE ID，但是状态为 ** RESERVED ** ，不会有公开细节。</p><h2 id="RESERVED-CVE-申请公开"><a href="#RESERVED-CVE-申请公开" class="headerlink" title="RESERVED CVE 申请公开"></a>RESERVED CVE 申请公开</h2><p>当软件官方确认已经修复漏洞，并且发布新版后，可以通知 CVE 官方更新 CVE 的状态。还是通过填写 <a href="https://cveform.mitre.org/">https://cveform.mitre.org/</a> 表格，选择 Notify CVE about a publication，填写相关信息。</p><h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><ol><li>将 <a href="mailto:cve-request@mitre.org">cve-request@mitre.org</a> 和  <a href="mailto:cve@mitre.org">cve@mitre.org</a> 加入邮件白名单 （有可能邮件会被截拦）</li><li>在申请公开步骤中，CVE 官方有可能和你要公开披露的链接，如果软件官方不给写，可以自己写一个</li></ol><p>披露要求的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[CVE ID]</span><br><span class="line">[PRODUCT]</span><br><span class="line">[VERSION]</span><br><span class="line">[PROBLEM TYPE]</span><br><span class="line">[DESCRIPTION]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在申请 CVE 过程中会遇到一个问题，向软件官方提交漏洞修复后，由于软件官方不是CNA 无法直接分配CVE，而申请CVE 通常需要一个软件官方确认的链接，而有些比较正规的软件在漏洞修复之前是不会有公开链接的，这就无法申请CVE了。&lt;/p&gt;
&lt;p&gt;有点鸡生蛋，蛋生鸡的感觉。解
      
    
    </summary>
    
    
    
      <category term="Security" scheme="http://usmacd.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>onefuzz 简单分析</title>
    <link href="http://usmacd.com/2020/09/28/onefuzz/"/>
    <id>http://usmacd.com/2020/09/28/onefuzz/</id>
    <published>2020-09-28T10:03:13.947Z</published>
    <updated>2020-09-28T10:03:13.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="deploy-agent-部署"><a href="#deploy-agent-部署" class="headerlink" title="deploy agent (部署)"></a>deploy agent (部署)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unzip onefuzz-deployment-<span class="variable">$VERSION</span>.zip</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">./deploy.py <span class="variable">$REGION</span> <span class="variable">$RESOURCE_GROUP_NAME</span> <span class="variable">$ONEFUZZ_INSTANCE_NAME</span> <span class="variable">$CONTACT_EMAIL_ADDRESS</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.microsoft.com/en-us/cli/azure/authenticate-azure-cli?view=azure-cli-latest">Azure CLI logged in</a> 后，执行上面命令可以在 Azure 上部署 agent</p><p>需要订阅 Azure， 可能要收费</p><h2 id="安装-onefuzz-CLI"><a href="#安装-onefuzz-CLI" class="headerlink" title="安装 onefuzz CLI"></a>安装 onefuzz CLI</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/microsoft/onefuzz/releases/download/1.0.0/onefuzz-1.0.0-py3-none-any.whl</span><br><span class="line">wget https://github.com/microsoft/onefuzz/releases/download/1.0.0/onefuzztypes-1.0.0-py3-none-any.whl</span><br><span class="line">pip install ./onefuzz*.whl</span><br></pre></td></tr></table></figure><h2 id="执行-fuzz-任务"><a href="#执行-fuzz-任务" class="headerlink" title="执行 fuzz 任务"></a>执行 fuzz 任务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onefuzz template libfuzzer basic my-project my-target build-1 my-pool --target_exe fuzz.exe</span><br></pre></td></tr></table></figure><h2 id="支持的平台"><a href="#支持的平台" class="headerlink" title="支持的平台"></a>支持的平台</h2><ol><li>Python 的 CLI 客户端，需要 Python 3.7 +</li><li>Azure 的 OS image 支持 Windows 10 和 Ubuntu Server 18.04</li><li>libfuzzer 支持 llvm 8+ (windows, Linux x86/x64), MSVC 16.8+ (支持 ASAN)</li></ol><h2 id="支持的-Fuzz-工具"><a href="#支持的-Fuzz-工具" class="headerlink" title="支持的 Fuzz 工具"></a>支持的 Fuzz 工具</h2><p>onefuzz 中集成了几个 fuzz 工具： afl afl++ libfuzzer 和 radasma</p><h2 id="OneFuzz-的主要工作"><a href="#OneFuzz-的主要工作" class="headerlink" title="OneFuzz 的主要工作"></a>OneFuzz 的主要工作</h2><p>主要工作是利用微软的 Azure 云平台进行 fuzz，实现了 Python 版本的接口，可以远程直接操作 Azure 的资源进行 fuzz</p><p>api 接口： <a href="https://github.com/microsoft/onefuzz/tree/main/src/api-service/__app__">api-service</a><br>agent： <a href="https://github.com/microsoft/onefuzz/tree/main/src/agent">agent</a></p><h2 id="项目进展情况"><a href="#项目进展情况" class="headerlink" title="项目进展情况"></a>项目进展情况</h2><p>onefuzz 项目主要是一个 fuzz 框架，项目成熟度不高和 Google 的 ClusterFuzz 相比有较大差距。Fuzz 过程也是简单调用fuzz 工具，没有处理特殊情况。文档完备程度也不高，比较感兴趣的 MSVC 和 libfuzzer、ASAN 的集成也没有看到具体代码。另外和微软的 Azrue 深度绑定，用起来也不是太方便，后续将继续关注此项目的进展情况。</p><h2 id="一些有用的链接"><a href="#一些有用的链接" class="headerlink" title="一些有用的链接"></a>一些有用的链接</h2><p><a href="https://github.com/microsoft/onefuzz/blob/main/docs/getting-started.md">https://github.com/microsoft/onefuzz/blob/main/docs/getting-started.md</a><br><a href="https://github.com/microsoft/onefuzz/blob/main/docs/supported-platforms.md">https://github.com/microsoft/onefuzz/blob/main/docs/supported-platforms.md</a></p><h2 id="在线演示"><a href="#在线演示" class="headerlink" title="在线演示"></a>在线演示</h2><p><img src="https://raw.githubusercontent.com/microsoft/onefuzz/main/docs/screencasts/launching-job.gif" alt="launching-job"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;deploy-agent-部署&quot;&gt;&lt;a href=&quot;#deploy-agent-部署&quot; class=&quot;headerlink&quot; title=&quot;deploy agent (部署)&quot;&gt;&lt;/a&gt;deploy agent (部署)&lt;/h2&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
    
      <category term="Security" scheme="http://usmacd.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>halfempty 的一些使用说明</title>
    <link href="http://usmacd.com/2020/05/21/halfempty/"/>
    <id>http://usmacd.com/2020/05/21/halfempty/</id>
    <published>2020-05-21T02:00:34.284Z</published>
    <updated>2020-05-21T02:00:34.284Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/googleprojectzero/halfempty">https://github.com/googleprojectzero/halfempty</a></p><p>google P0 <a href="https://twitter.com/taviso">@taviso</a> 提供的 testcase 并行快速精简工具 （A fast, parallel test case minimization tool）<br>需要注意的是 halfempty 只能精简导致目标程序 crash 的 testcase，如果 testcase 不导致目标程序 crash， 还是需要使用 afl-tmin 类似的工具根据 coverage 来精简。</p><p>halfempty 工具向测试脚本传递内容时使用的是 pipe， 如果测试的程序只接受文件路径作为参数时，需要一些技巧，README 虽然有提及但是说的比较晦涩。</p><p>以 upx 为例，upx 的命令行帮助如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@fuzzing-5:/mnt/disk/halfempty# ./upx.out_x86-64</span><br><span class="line">                       Ultimate Packer for eXecutables</span><br><span class="line">                          Copyright (C) 1996 - 2020</span><br><span class="line">UPX git-d7ba31+ Markus Oberhumer, Laszlo Molnar &amp; John Reiser   Jan 23rd 2020</span><br><span class="line"></span><br><span class="line">Usage: upx.out_x86-64 [-123456789dlthVL] [-qvfk] [-o file] file..</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  -1     compress faster                   -9    compress better</span><br><span class="line">  -d     decompress                        -l    list compressed file</span><br><span class="line">  -t     test compressed file              -V    display version number</span><br><span class="line">  -h     give more help                    -L    display software license</span><br><span class="line">Options:</span><br><span class="line">  -q     be quiet                          -v    be verbose</span><br><span class="line">  -oFILE write output to &#x27;FILE&#x27;</span><br><span class="line">  -f     force compression of suspicious files</span><br><span class="line">  -k     keep backup files</span><br><span class="line">file..   executables to (de)compress</span><br><span class="line"></span><br><span class="line">Type &#x27;upx.out_x86-64 --help&#x27; for more detailed help.</span><br><span class="line"></span><br><span class="line">UPX comes with ABSOLUTELY NO WARRANTY; for details visit https://upx.github.io</span><br></pre></td></tr></table></figure><p>upx 只能使用文件路径作为参数， 比如像这样执行命令。 <code>./upx.out_x86-64 crash.upx</code></p><p>按照 README 中的例子编写测试脚本 test.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">./upx.out_x86-64 <span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $? -eq 139; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行的时候会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">./halfempty ./test.sh  crash.upx</span><br><span class="line">╭│   │ ── halfempty ───────────────────────────────────────────────── v0.30 ──</span><br><span class="line">╰│ 16│ A fast, parallel testcase minimization tool</span><br><span class="line"> ╰───╯ ───────────────────────────────────────────────────────── by @taviso ──</span><br><span class="line"></span><br><span class="line">Input file &quot;crash.upx&quot; is now 19088 bytes, starting strategy &quot;bisect&quot;...</span><br><span class="line">Verifying the original input executes successfully... (skip with --noverify)</span><br><span class="line">** Message: This program expected `./test1.sh` to return successfully</span><br><span class="line">** Message: for the original input (i.e. exitcode zero).</span><br><span class="line">** Message: Try it yourself to verify it&#x27;s working.</span><br><span class="line">** Message: Use a command like: `cat crash.upx | ./test.sh || echo failed`</span><br><span class="line"></span><br><span class="line">** (halfempty:2477): WARNING **: Strategy &quot;bisect&quot; failed, cannot continue.</span><br></pre></td></tr></table></figure><p>正确的方法是使用临时文件，因为 halfempty 是一个并行的工具，每次使用的临时文件都应该不一样。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">tempfile=`mktemp` &amp;&amp; cat &gt; <span class="variable">$&#123;tempfile&#125;</span></span><br><span class="line"></span><br><span class="line">./upx.out_x86-64 <span class="variable">$&#123;tempfile&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $? -eq 139; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>运行后的输出，大致如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@fuzzing-5:/mnt/disk/halfempty# ./halfempty  ./test.sh  crash.upx </span><br><span class="line">╭│   │ ── halfempty ───────────────────────────────────────────────── v0.30 ──</span><br><span class="line">╰│ 16│ A fast, parallel testcase minimization tool</span><br><span class="line"> ╰───╯ ───────────────────────────────────────────────────────── by @taviso ──</span><br><span class="line"></span><br><span class="line">Input file &quot;crash.upx&quot; is now 19088 bytes, starting strategy &quot;bisect&quot;...</span><br><span class="line">Verifying the original input executes successfully... (skip with --noverify)</span><br><span class="line">The original input file succeeded after 0.0 seconds.</span><br><span class="line">New finalized size: 19088 (depth=2) real=0.0s, user=0.0s, speedup=~-0.0s</span><br><span class="line">treesize=6654, height=6376, unproc=0, real=4.4^C user=19.3s, speedup=~14.9s</span><br></pre></td></tr></table></figure><p>已经可以正常运行了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/googleprojectzero/halfempty&quot;&gt;https://github.com/googleprojectzero/halfempty&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;google P0 &lt;a href=&quot;htt
      
    
    </summary>
    
    
    
      <category term="Security" scheme="http://usmacd.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>lpr 和房贷的那些事</title>
    <link href="http://usmacd.com/2020/03/31/lpr/"/>
    <id>http://usmacd.com/2020/03/31/lpr/</id>
    <published>2020-03-31T01:40:10.307Z</published>
    <updated>2020-03-31T01:40:10.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原来的机制"><a href="#原来的机制" class="headerlink" title="原来的机制"></a>原来的机制</h2><p>在 LPR 之前，我国贷款利率锚定 中国人民银行发布的 “贷款基准利率”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">房贷利率 = 贷款基准利率 x （1 + 浮动）</span><br></pre></td></tr></table></figure><p>浮动可以上浮，也可以下浮， 上浮意味着贷款利率大于贷款基准利率，反之下浮则是小于。</p><h2 id="LPR-新机制"><a href="#LPR-新机制" class="headerlink" title="LPR 新机制"></a>LPR 新机制</h2><p>MLF 是我国央行向商业银行放贷的一种方式 （中期借款便利），商业银行将一些抵押物质押给央行，换取一定期限，数额的贷款，同时向央行支付利息。央行通过控制 MLF 的数量总额和利率，从而影响市场。</p><p>商业银行可以选择从央行贷款，也可以使用从其他银行贷款，所以 MLF 不能偏离市场太多，也是一种市场化的利率调控手段。</p><p>商业银行拿到资金后，需要放贷给个人和企业，放贷需要参考央行的基准利率。所以这种市场上就有两种利率，如果贷款的基准利率过高，钱就会滞留银行，这样就引入了 LPR。</p><p>锚定 LPR，也就是浮动利率，会随着市场上资金的充盈程度变化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LPR = MLF 利率 + 风险利润加点</span><br></pre></td></tr></table></figure><p>风险利润加点由 18家银行决定，这18家银行是 中国工商银行，中国农业银行，中国建设银行，交通银行，中信银行，招商银行，兴业银行，浦东发展银行，中国民生银行，西安银行，台州银行，上海农村商业银行， 广东顺德农村商业银行，渣打银行（中国），花旗银行（中国），微众银行，网商银行。</p><p>LPR 利率有18家报价，去掉一个最高值，去掉一个最低值，剩下16家取算术平均取得。</p><p>个人或者企业向银行贷款时的利率，通过 LPR 计算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">房贷利率 = LPR 利率 + 加点</span><br></pre></td></tr></table></figure><p>同样加点可以上浮，也可以下浮，这个是你和银行之间的协议加点。最终的利率还和政策加点有关，比如有的城市规定，二套房上浮 60个基点 （一个基点为 0.01 %），即上浮 0.6%</p><p>所以最终的公式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">房贷利率 = LPR 利率 + 政策加点 + 协议加点</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原来的机制&quot;&gt;&lt;a href=&quot;#原来的机制&quot; class=&quot;headerlink&quot; title=&quot;原来的机制&quot;&gt;&lt;/a&gt;原来的机制&lt;/h2&gt;&lt;p&gt;在 LPR 之前，我国贷款利率锚定 中国人民银行发布的 “贷款基准利率”。&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
    
    
      <category term="Life" scheme="http://usmacd.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>解决 Windows Rx034</title>
    <link href="http://usmacd.com/2020/03/25/Windows_Rx034/"/>
    <id>http://usmacd.com/2020/03/25/Windows_Rx034/</id>
    <published>2020-03-25T03:20:21.402Z</published>
    <updated>2020-03-25T03:20:21.402Z</updated>
    
    <content type="html"><![CDATA[<p>以前没有遇上这个错误，这次遇上这个错误是装vim的YouCompleteMe插件后出现，因此很容易想到是装插件引起的这个错误，错误提示Runtime Error 如下图：</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/r5051.png" alt="error"></p><p>先放狗搜一下，微软的对R6034的解释如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">An application has made an attempt to load the C runtime library without using</span><br><span class="line">a manifest. This is an unsupported way to load Visual C++ DLLs. You need to</span><br><span class="line">modify your application to build with a manifest. For more information, see the</span><br><span class="line">&quot;Visual C++ Libraries as Shared Side-by-Side Assemblies&quot; topic in the product</span><br><span class="line">documentation.</span><br></pre></td></tr></table></figure><p>微软的链接中也提到了解决的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Rebuild your application to include a manifest. Building an application with</span><br><span class="line">Visual Studio automatically puts the manifest into the resulting .exe or .dll</span><br><span class="line">file. If you are building at the command line, use the mt.exe tool to add the</span><br><span class="line">manifest as a resource. Use resource ID 1 if you build an .exe, and resource</span><br><span class="line">ID 2 if you build a .dll. For more information, see How to: Embed a Manifest</span><br><span class="line">Inside a C/C++ Application.</span><br></pre></td></tr></table></figure><p>大概的意思是需要使用manifest.xml来指定需要加载的DLL。上网又翻看了几个链接发现这个错误的成因比较复杂，主要原因是加载mscvr*.dll 出现了问题。不管怎样还是先看看是否使用了 manifest。从微软的解决办法可以知道，manifest很有可能在资源文件里。</p><p>还是先看看manifest的作用，在msdn网站搜索相关内容，根据《Understanding Manifest Generation for C/C++ Programs》中的内容，manfest.xml可以是一个外部的XML文件也可以是嵌入在程序的资源文件中。manifest.xml用于管理程序在运行时需要的共享程序集的名字和版本。如果程序只依赖 VisualC++ 的程序集（CRT，MFC，ATL等），manifest会被链接器自动生成。Manifest的Sxs指定了其依赖的清单名称,版本,资源,和其他组件。Sxs是Windows XP引入的新技术，vs 2005 开始使用，全名叫Side by Side assembly，主要还是为了解决兼容性问题，这样同一个系统可以存在不同版本的同名文件而互相不影响各自的运行。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/sxs.png" alt="sxs"></p><p>现在需要定位gvim.exe加载哪个DLL引起了R6034错误，使用Process Explorer发现是加载ycm_client_support.pyd导致。删除YouCompleteMe插件后错误消失。</p><p>先看看ycm_client_support.pyd是否使用了manifest.xml, 使用神器TC,  F3一下，可以查看manifest的情况。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/manifest.png" alt="manifest.xml"></p><p>发现其实ycm_client_support.pyd已经使用了manifest，但是仍然出现R6034错误。上网搜索了一番（见文末的参考链接），发现这就是非常著名的DLL Hell了，维基百科中专门记录了这个问题。 <a href="http://en.wikipedia.org/wiki/Dll_hell">http://en.wikipedia.org/wiki/Dll_hell</a></p><p>不论如何应该就是DLL加载时出错了，可以使用Process Explorer 工具来查看出问题的进程，看看在进程空间内具体是什么情况。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/process-explorer.png" alt="p-e"></p><p>哈哈，发现了一些情况，msvcr90.dll在gvim进程空间里有两个！再看看这两个DLL的位置。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/process-explorer1.png" alt="p-e1"></p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/process-explorer2.png" alt="p-e2"></p><p>删除掉不在C:\WINDOWS\WinSxS\目录里的msvcr90.dll，问题得以解决。由于这个错误是因为加载ycm_client_support.pyd引起的，再看看ycm_client_support.pyd的情况，拿出TC直接F3一下，又发现了一些有用的信息。ycm_client_support.pyd加载的是cmake目录下的msvcr90.dll, 正常情况下因该使用 C:\Windows\winsxs 目录下的msvcr90.dll</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/tc1.png" alt="tc1"></p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/tc2.png" alt="tc2"></p><p>查看一下系统环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files\Microsoft Visual Studio 9.0\VC&gt; set | findstr Path</span><br><span class="line"></span><br><span class="line">Path=D:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE;D:\Program Files\M</span><br><span class="line">icrosoft Visual Studio 9.0\VC\BIN;D:\Program Files\Microsoft Visual Studio 9.0\C</span><br><span class="line">ommon7\Tools;c:\Windows\Microsoft.NET\Framework\v3.5;c:\Windows\Microsoft.NET\Fr</span><br><span class="line">amework\v2.0.50727;D:\Program Files\Microsoft Visual Studio 9.0\VC\VCPackages;C:</span><br><span class="line">\Program Files\\Microsoft SDKs\Windows\v6.0A\bin;C:\Windows\system32;C:\Windows;</span><br><span class="line">d:\Program Files\CMake 2.8\bin;d:\Program Files\LLVM 3.4.svn\bin;d:\Program File</span><br><span class="line">s\Git\cmd;d:\Python27;D:\Program Files\IDM Computer Solutions\UltraEdit\</span><br><span class="line">PSModulePath=C:\Windows\system32\WindowsPowerShell\v1.0\Modules\</span><br></pre></td></tr></table></figure><p>引错误的原因是Windows程序加载DLL是会先加载PATH变量中的DLL文件，后面会加载manifest指定的WinSxS目录的文件，这样就加载了两次，引起了错误。</p><p>这个问题涉及 Windows加载DLL文件的顺序，Windows定位 DLL文件的顺序和一个注册表键值相关，这个键值是：</p><p><code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode</code></p><p>SafeDllSearchMode的值为1，开启SafeDllSearchMode，<br>SafeDllSearchMode的值为0，禁用SafeDllSearchMode。</p><p>Windows系统默认开启SafeDllSearchMode （Windows XP SP2 后），MSDN文章《Dynamic-Link Library Search Order》中指出，在SafeDllSearchMode开启的情况下，Windows定位DLL文件的顺序为：</p><ol><li>The directory from which the application loaded.</li><li>The system directory. ( GetSystemDirectory )</li><li>The 16-bit system directory.</li><li>The Windows directory. (GetWindowsDirectory )</li><li>The current directory.</li><li>The directories that are listed in the PATH environment variable.</li></ol><p>在SafeDllSearchMode关闭的情况下，Windows定位DLL文件的顺序为：</p><ol><li>The directory from which the application loaded.</li><li>The current directory.</li><li>The system directory. (GetSystemDirectory )</li><li>The 16-bit system directory.</li><li>The Windows directory. ( GetWindowsDirectory)</li><li>The directories that are listed in the PATH environment variable.</li></ol><p>另外，《Dynamic-Link Library Search Order》中指出使用manifest可以指定加载DLL的路径，但实际的情况是有可能加载多个DLL导致进程崩溃。</p><p>Desktop applications can control the location from which a DLL is loaded by specifying a full path, using DLL redirection, or by using a manifest. If none of these methods are used, the system searches for the DLL at load time as described in this section.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]《Windows via C/C++ Fifth Edition》<br>[2] Side-by-side Assemblies <a href="http://msdn.microsoft.com/en-us/library/aa376307.aspx">http://msdn.microsoft.com/en-us/library/aa376307.aspx</a><br>[3] DLL Hell <a href="http://en.wikipedia.org/wiki/Dll_hell">http://en.wikipedia.org/wiki/Dll_hell</a><br>[4] C Run-Time Error R6034 <a href="http://msdn.microsoft.com/en-us/library/ms235560(v=vs.90).aspx">http://msdn.microsoft.com/en-us/library/ms235560(v=vs.90).aspx</a><br>[5] Understanding Manifest Generation for C/C++ Programs <a href="http://msdn.microsoft.com/en-us/library/ms235542.aspx">http://msdn.microsoft.com/en-us/library/ms235542.aspx</a><br>[6] Search Path Used by Windows to Locate a DLL <a href="http://msdn.microsoft.com/en-us/library/7d83bc18.aspx">http://msdn.microsoft.com/en-us/library/7d83bc18.aspx</a><br>[7] Dynamic-Link Library Search Order <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682586(v=vs.85).aspx">http://msdn.microsoft.com/en-us/library/windows/desktop/ms682586(v=vs.85).aspx</a><br>[8] <a href="https://bitbucket.org/Haroogan/vim-youcompleteme-for-windows/src/7dca764c2ee0?at=master">https://bitbucket.org/Haroogan/vim-youcompleteme-for-windows/src/7dca764c2ee0?at=master</a><br>[9] <a href="https://github.com/Valloric/YouCompleteMe/wiki/Windows-Installation-Guide">https://github.com/Valloric/YouCompleteMe/wiki/Windows-Installation-Guide</a><br>[10] <a href="http://www.davidlenihan.com/2007/07/winsxs.html">http://www.davidlenihan.com/2007/07/winsxs.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前没有遇上这个错误，这次遇上这个错误是装vim的YouCompleteMe插件后出现，因此很容易想到是装插件引起的这个错误，错误提示Runtime Error 如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/
      
    
    </summary>
    
    
    
      <category term="windows" scheme="http://usmacd.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 笔记软件： VNote</title>
    <link href="http://usmacd.com/2020/03/25/vnote/"/>
    <id>http://usmacd.com/2020/03/25/vnote/</id>
    <published>2020-03-25T02:27:01.295Z</published>
    <updated>2020-03-25T02:27:01.295Z</updated>
    
    <content type="html"><![CDATA[<p>向大家安利一款 markdown 笔记软件， VNote  <a href="http://t.cn/RXj6L39">http://t.cn/RXj6L39</a><br>此软件目前已经 1300 多个commits 了，做为一个有些开源软件维护经历的人，深感不易。<br>用了太多 markdown 笔记软件，此软件使得最为顺手，尤其作为程序员 vim 模式 让我感到非常舒服，<br>大量图表的支持比如 UML 流程图，让我用起来很顺手。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/vnote.png" alt="VNote"></p><p>我前后尝试过各种笔记软件，我理想的软件有几点：</p><ul><li>a. 支持文件管理</li><li>b. 不要乱改数据，容易迁移</li><li>c. 支持 markdown</li><li>d. 跨平台，支持 Mac 和 Linux</li></ul><p>最后，终于发现了 VNote，有点惊喜。在 Linux 下编译 VNote 显示有明显改进，下面是编译的方法：</p><ol><li>下载 QT SDK</li></ol><p><a href="https://mirrors4.tuna.tsinghua.edu.cn/qt/official_releases/qt/5.9/5.9.0/qt-opensource-linux-x64-5.9.0.run">https://mirrors4.tuna.tsinghua.edu.cn/qt/official_releases/qt/5.9/5.9.0/qt-opensource-linux-x64-5.9.0.run</a></p><p>将 Qt5.9 安装到 /home/henices/Qt5.9.0/</p><ol start="2"><li>编译 fcitx-qt5</li></ol><p>git clone <a href="https://gitlab.com/fcitx/fcitx-qt5.git">https://gitlab.com/fcitx/fcitx-qt5.git</a></p><p>准备编译脚本 <code>build_linux.sh</code>， 指定下载的QT</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QTDIR=<span class="string">&quot;/home/henices/Qt5.9.0/5.9/gcc_64/&quot;</span></span><br><span class="line">PATH=<span class="string">&quot;<span class="variable">$QTDIR</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">LDFLAGS=-L<span class="variable">$QTDIR</span>/lib</span><br><span class="line">CPPFLAGS=-I<span class="variable">$QTDIR</span>/include</span><br><span class="line"></span><br><span class="line">rm -rf build</span><br><span class="line">mkdir -p build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure><p>使用下面命令编译</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x ./build_linux.sh</span><br><span class="line">./build_linux.sh</span><br></pre></td></tr></table></figure><p>将生成的 libfcitxplatforminputcontextplugin.so copy 到<br><code>/home/henices/Qt5.9.0/5.9/gcc_64/plugins/platforminputcontexts/</code></p><ol start="3"><li>获取VNote 源码</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tamlok/vnote.git vnote.git</span><br><span class="line"><span class="built_in">cd</span> vnote.git</span><br><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure><ol start="4"><li>编译</li></ol><p>build_linux.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">QTDIR=<span class="string">&quot;/home/henices/Qt5.9.0/5.9/gcc_64/&quot;</span></span><br><span class="line">PATH=<span class="string">&quot;<span class="variable">$QTDIR</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">LDFLAGS=-L<span class="variable">$QTDIR</span>/lib</span><br><span class="line">CPPFLAGS=-I<span class="variable">$QTDIR</span>/include</span><br><span class="line"></span><br><span class="line">rm -rf build</span><br><span class="line">mkdir -p build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">qmake -v</span><br><span class="line">qmake PREFIX=/usr/<span class="built_in">local</span> CONFIG-=debug CONFIG+=release ../VNote.pro</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure><p>使用下面命令编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x ./build_linux.sh</span><br><span class="line">./build_linux.sh</span><br></pre></td></tr></table></figure><ol start="5"><li>安装</li></ol><p><code>sudo make install</code></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://tamlok.gitee.io/vnote/zh_cn/#!docs/%E5%BC%80%E5%8F%91%E8%80%85/%E6%9E%84%E5%BB%BAVNote.md">https://tamlok.gitee.io/vnote/zh_cn/#!docs/%E5%BC%80%E5%8F%91%E8%80%85/%E6%9E%84%E5%BB%BAVNote.md</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;向大家安利一款 markdown 笔记软件， VNote  &lt;a href=&quot;http://t.cn/RXj6L39&quot;&gt;http://t.cn/RXj6L39&lt;/a&gt;&lt;br&gt;此软件目前已经 1300 多个commits 了，做为一个有些开源软件维护经历的人，深感不易。&lt;br
      
    
    </summary>
    
    
    
      <category term="Programming" scheme="http://usmacd.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>一加 (oneplus ) 3T 非root 开启 P3 色域</title>
    <link href="http://usmacd.com/2020/03/23/oneplus3T_p3/"/>
    <id>http://usmacd.com/2020/03/23/oneplus3T_p3/</id>
    <published>2020-03-23T02:56:06.150Z</published>
    <updated>2020-03-23T02:56:06.150Z</updated>
    
    <content type="html"><![CDATA[<p>一加3T其实和一加5用的是同一块屏幕，网上流传的方法多需要root权限。非root 开启 p3 色域的方法，<br>连接 adb 输入下面的命令 <code>settings put system screen_color_mode_settings_value 4</code> 实测有效，重启后不失效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一加3T其实和一加5用的是同一块屏幕，网上流传的方法多需要root权限。非root 开启 p3 色域的方法，&lt;br&gt;连接 adb 输入下面的命令 &lt;code&gt;settings put system screen_color_mode_settings_value 4&lt;/co
      
    
    </summary>
    
    
    
      <category term="Life" scheme="http://usmacd.com/tags/Life/"/>
    
  </entry>
  
</feed>
