<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>安全代码</title>
  
  <subtitle>关注科技、投资、健康，和个人成长</subtitle>
  <link href="http://usmacd.com/atom.xml" rel="self"/>
  
  <link href="http://usmacd.com/"/>
  <updated>2024-06-16T16:00:00.000Z</updated>
  <id>http://usmacd.com/</id>
  
  <author>
    <name>henices</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读《运气与努力》有感</title>
    <link href="http://usmacd.com/cn/luck_and_success/"/>
    <id>http://usmacd.com/cn/luck_and_success/</id>
    <published>2024-06-15T16:00:00.000Z</published>
    <updated>2024-06-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我感觉《运气与努力》这篇博客是 2024 年看过的最好的几篇之一，在终生学习，成功与运气等多方面产生了共鸣，我们面对的是一个复杂的世界，能够把握的东西只是极少数。</p><h2 id="关于成功的要素"><a href="#关于成功的要素" class="headerlink" title="关于成功的要素"></a>关于成功的要素</h2><p>这些年看了很多关于成功学方法论的文章，答案是没有银弹 (No silver bullet) ，没有什么秘技可以一步登天。</p><p>单伟建在母校旧金山大学的一次演讲中说，在任何领域取得成功，最重要的是三方面：</p><ol><li>坚持终生学习 (keep learning)</li><li>好的判断力（good judgement）</li><li>运气 (good luck)</li></ol><p>这和我前段时间发的「工程师把事情做好的三条边」中的说法有关联，工程师要把事情做好必须从最下面的基线，沿着绳索向上爬。</p><div class="note note-secondary">            <ul><li>最下面一条线是基线，可以理解为人类所掌握的工程知识</li><li>最上面一条线是极限，极限是理论给出的，极限无法突破</li><li>中间那条线是从基线向极限向上攀登的绳索。</li></ul>          </div><p>虽然文中说的是工程师，生活中的很多事也是适用的。终生学习是为了提高自己的基线，以增加自己正确判断方向的概率，至于编制的绳索能爬多高，真要靠点运气。</p><p>运气很难以捉摸，到底是时势造英雄，还是英雄造时势，也挺难说清楚 ？承认运气让人更加谦虚，大多成功都是个人碰运气加努力奋斗的结果。但是机会总是垂青有准备的人，当运气来的时候，就看能不能抓住了。</p><p>文中还提及一点， Angela Duckworth 强调的毅力（grit）的作用，我习惯用词 “坚持不懈”，坚持很重要。坚持不懈的力量很容易被忽略，就像人们总是强调「刻意练习」而不再提「一万小时定律」一样。时间是最公平的，每个人一天都只有 24 小时，你把时间花在哪里，哪里就会有进步，虽然进步可大可小，但几乎总是比不花时间要好。</p><p><strong>故事1</strong></p><p>得到课程《香帅的北大金融学课》是一门热门课程，参加学习的人很多大概有 36 万。</p><p>从「01 金融世界观」开始，每节课程平均有 30 多万人学习，到最后的「09 金融思维方法论」，每节课平均会有多少人学习 ？ 答案是 10 万人左右，差不多有 2&#x2F;3 的人没有学完（保守估算，香帅老师的这门课程是 2017 年 12 月开课，到现在已经6 年多了）。</p><p><strong>故事2</strong></p><p>OpenAI 是一个很好的例子，选对了方向大模型，从 GPT-1 开始，GPT-2, GPT-3, 一直到 GPT-3.5 一鸣惊人，用一句话总结：OpenAI 做对选择并坚持了下去，期间找到“贵人”微软相助守住了这份少年意气 ：)</p><h2 id="关于付费群"><a href="#关于付费群" class="headerlink" title="关于付费群"></a>关于付费群</h2><p>关于付费群值不值得加入的问题，我有些不同的看法，我认为绝大多数付费群不值得加入。</p><p>有的群卖的是真的「信息差」，这些资料在互联网上是公开的，可以免费获取，即使获得了也用处不大。</p><p>一些行业内的大咖，互联网知名人士的课程，还是有一些意义的，有些业内人士认为的「常识」，对普通人也是有帮助的，但还是需要很强的鉴别能力，倘若价格不菲真要考虑值不值得。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p>运气与努力 - 江宏,  May 31, 2024<br><a href="https://1byte.io/articles/luck/">https://1byte.io/articles/luck/</a></p></li><li><p>尤雨溪谈成功和运气<br><a href="https://www.usmacd.com/cn/youyuxi/">https://www.usmacd.com/cn/youyuxi/</a></p></li><li><p>公开写作的好处和坚持不懈<br><a href="https://www.usmacd.com/cn/public_writing/">https://www.usmacd.com/cn/public_writing/</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我感觉《运气与努力》这篇博客是 2024 年看过的最好的几篇之一，在终生学习，成功与运气等多方面产生了共鸣，我们面对的是一个复杂的世界，能够把握的东西只是极少数。&lt;/p&gt;
&lt;h2 id=&quot;关于成功的要素&quot;&gt;&lt;a href=&quot;#关于成功的要素&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Misc" scheme="http://usmacd.com/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>为 tmux 设置真彩色</title>
    <link href="http://usmacd.com/cn/tmux_truecolor/"/>
    <id>http://usmacd.com/cn/tmux_truecolor/</id>
    <published>2024-06-11T16:00:00.000Z</published>
    <updated>2024-06-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在 tmux 中使用 vim onedark theme，总是觉得怪怪的，黑色显示偏灰。无意中发现 <code>joshdick/onedark.vim</code> 中提到需要为 tmux 设置真彩色。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">- Plain ASCII<br>- ANSI escape codes: 16 color codes with bold/italic and background<br>- 256 color palette: 216 colors + 16 ANSI + 24 gray (colors are 24-bit)<br>- 24-bit truecolor: &quot;888&quot; colors (aka 16 million)<br></code></pre></td></tr></table></figure><p>检查终端是否支持真彩色，可以使用脚本 <a href="https://raw.githubusercontent.com/gnachman/iTerm2/master/tests/24-bit-color.sh">24-bit-color.sh</a></p><p><code>bash ./24-bit-color.sh</code> 如果终端颜色是连贯的则支持了真彩色，如果颜色是分块的则没有支持。</p><p>修改 ~&#x2F;.tmux.conf 加上两行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">set -g default-terminal &quot;tmux-256color&quot;<br>set-option -ga terminal-overrides &quot;,$&#123;TERM&#125;:Tc&quot;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs text">default-terminal terminal<br>        Set the default terminal for new windows created in this session - the default value of the TERM environment variable.  For tmux to work correctly, this must be  set  to<br>        ‘screen’, ‘tmux’ or a derivative of them.<br><br><br>terminal-overrides[] string<br>        Allow  terminal  descriptions  read  using  terminfo(5)  to  be  overridden.   Each  entry  is a colon-separated string made up of a terminal type pattern (matched using<br>        fnmatch(3)) and a set of name=value entries.<br><br>        For example, to set the ‘clear’ terminfo(5) entry to ‘\e[H\e[2J’ for all terminal types matching ‘rxvt*’:<br><br>                rxvt*:clear=\e[H\e[2J<br><br>        The terminal entry value is passed through strunvis(3) before interpretation.<br></code></pre></td></tr></table></figure><p>要让 tmux 重新加载 <code>~/.tmux.conf</code> 需要退出所有的 tmux 进程后，重新执行 tmux 。最后，检查你的 tmux 是否开启了真彩色，可以使用下面的命令行：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">tmux info | grep Tc<br> 227: Tc: (flag) true<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Adding 24-bit TrueColor RGB escape sequences to tmux - Suraj N. Kurapati , 29 January 2016<br><a href="https://sunaku.github.io/tmux-24bit-color.html#usage">https://sunaku.github.io/tmux-24bit-color.html#usage</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在 tmux 中使用 vim onedark theme，总是觉得怪怪的，黑色显示偏灰。无意中发现 &lt;code&gt;joshdick/onedark.vim&lt;/code&gt; 中提到需要为 tmux 设置真彩色。&lt;/p&gt;
&lt;figure class=&quot;highlight tex</summary>
      
    
    
    
    
    <category term="linux" scheme="http://usmacd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Android 系统的 USB Tethering 功能</title>
    <link href="http://usmacd.com/cn/android_usb_tethering/"/>
    <id>http://usmacd.com/cn/android_usb_tethering/</id>
    <published>2024-05-05T16:00:00.000Z</published>
    <updated>2024-05-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android 系统的 USB Tethering 可以共享 Android 手机的 Internet 连接，使用这个功能后，如果 Android 能够通过 Wi-Fi上网或者移动数据网络上网，则你的电脑也能够通过USB数据线共享网络上网了。</p><p>Android 手机的设置方法：Settings &#x3D;&gt; Network &amp; internet &#x3D;&gt; Hotspot &amp; tethering &#x3D;&gt; USB tethering</p><p>不同厂商的系统名字可能不同，ColorOS 上叫 「USB 网络共享」。</p><p>用 USB 数据线连接 Android 手机和 PC 后，在 Android 系统中开启 USB 网络共享，我的Fedora linux 可以利用 Android 的网络上网了（Windows 系统应该也可以）。Fedora linux 自动添加了一个网络连接， linux  PC 和 Android 手机处于同一局域网下。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx">        <span class="hljs-attribute">IPv4</span> 地址：<span class="hljs-number">192.168.203.204</span><br>    IPv4 默认网关：<span class="hljs-number">192.168.203.74</span><br>IPv4 主域名服务器：<span class="hljs-number">192.168.203.74</span><br></code></pre></td></tr></table></figure><p>Androd 手机可以通过 192.168.203.204 访问 PC 。linux 和 Android 在同一局域网下，文件传输就很多办法了。有推油提示， 在 PC 端执行 python -m http.server 手机端可以用浏览器访问下载 PC 上的文件。</p><p>注：Windows 系统和 Fedora Linux 不同的是系统会弹出一个提示，点击确认后才会和 Android 手机建立网络连接。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Share a mobile connection by hotspot or tethering on Android<br><a href="https://support.google.com/android/answer/9059108?hl=en">https://support.google.com/android/answer/9059108?hl=en</a></p><p>What is USB Tethering and How to Enable it?    12 Mar, 2021<br><a href="https://www.geeksforgeeks.org/what-is-usb-tethering-and-how-to-enable-it/">https://www.geeksforgeeks.org/what-is-usb-tethering-and-how-to-enable-it/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android 系统的 USB Tethering 可以共享 Android 手机的 Internet 连接，使用这个功能后，如果 Android 能够通过 Wi-Fi上网或者移动数据网络上网，则你的电脑也能够通过USB数据线共享网络上网了。&lt;/p&gt;
&lt;p&gt;Android </summary>
      
    
    
    
    
    <category term="Android" scheme="http://usmacd.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>知识管理的几个误区</title>
    <link href="http://usmacd.com/cn/PKM_faults/"/>
    <id>http://usmacd.com/cn/PKM_faults/</id>
    <published>2024-04-21T16:00:00.000Z</published>
    <updated>2024-07-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>查理·芒格曾多次在采访中提到，自己一辈子只研究两件事情：第一种是发现什么有效，然后实践它；第二种是发现什么是无效的，然后规避它。查理·芒格会花费大量时间来研究什么事会失败，尽可能减少认知偏差。</p><p>我在知识管理方面犯过不少错误，向芒格学习总结知识管理的几个错误。</p><h2 id="完美工具陷阱-the-perfect-tool-trap"><a href="#完美工具陷阱-the-perfect-tool-trap" class="headerlink" title="完美工具陷阱 (the perfect tool trap)"></a>完美工具陷阱 (the perfect tool trap)</h2><h3 id="频繁切换知识管理系统"><a href="#频繁切换知识管理系统" class="headerlink" title="频繁切换知识管理系统"></a>频繁切换知识管理系统</h3><p>我使用过 EverNote，WizNote，VNote 写笔记，也使用过 CSDN blog，Google blogspot, WordPress 写博客，疲于尝试各种系统，最终只造成知识、文章散落在多个互联网角落。我也尝试过使用 txt, orgmode, markdown，富文本等多种格式，最终只造成各种格式转换烦恼。</p><p>现实中并不存在一个 All in One 的完美工具，每个工具都有其长处和短处，接受工具的不完美，哪个工具合适就用哪个工具。</p><p>新的工具层出不穷，不断吸引你去使用它，但使用一个新工具并不能提高你的工作效率，只是新鲜的刺激感让你感觉良好。</p><h2 id="过度优化陷阱-the-optimization-trap"><a href="#过度优化陷阱-the-optimization-trap" class="headerlink" title="过度优化陷阱 (the optimization trap)"></a>过度优化陷阱 (the optimization trap)</h2><h3 id="不断修改笔记结构-structure-，打造完美系统"><a href="#不断修改笔记结构-structure-，打造完美系统" class="headerlink" title="不断修改笔记结构 (structure)，打造完美系统"></a>不断修改笔记结构 (structure)，打造完美系统</h3><p>不将重点放在可以采取的行动上，对外在表现形式的关注，远远大于对知识内容的关注。试图设计复杂的标签系统，笔记层次，笔记方法，来打造一个完美的系统。</p><p>真相是：复杂的系统只是让你感到你自己很「聪明」，用纸和笔记录信息，同样可以推动项目取得进展。</p><h3 id="频繁整理-组织笔记的「洁癖」"><a href="#频繁整理-组织笔记的「洁癖」" class="headerlink" title="频繁整理&#x2F;组织笔记的「洁癖」"></a>频繁整理&#x2F;组织笔记的「洁癖」</h3><p>大量堆积的笔记将造成知识整理冲动，试图将每条笔记精确地放到每个分类，错综复杂的笔记联接，多来几次就会影响坚持记录的信心。</p><p>数字笔记系统最大的优势在于你可以使用「搜索」功能来查找笔记内容，适度保持笔记的混杂度，将大大降低心智负担。</p><p>真相是：一旦记录的笔记可以为你所用，可以推动项目的进展，你将不再执着于某种「先进」的笔记组织形式。</p><h2 id="缺乏标准陷阱-（lack-of-recording-standard-trap）"><a href="#缺乏标准陷阱-（lack-of-recording-standard-trap）" class="headerlink" title="缺乏标准陷阱 （lack of recording standard trap）"></a>缺乏标准陷阱 （lack of recording standard trap）</h2><h3 id="缺少内容选择标准，各种有用，无用的笔记堆积在一起"><a href="#缺少内容选择标准，各种有用，无用的笔记堆积在一起" class="headerlink" title="缺少内容选择标准，各种有用，无用的笔记堆积在一起"></a>缺少内容选择标准，各种有用，无用的笔记堆积在一起</h3><p>由于没有严格地区分，自己所负责的责任范围和业余的兴趣爱好，缺乏信息选择标准，导致知识管理系统变成各种类别的信息收集器，而不是成为你在某个领域精进的推动器。</p><p>记录了大量一瞬间的灵感，好的想法将淹没在大量的突发奇想中。</p><p>我们每天大多数的想法没有太大意义，而那些可能具有重大意义的想法必须想办法将它们识别出来。</p><h3 id="缺乏明确的记录标准，无视笔记的「复利」效应"><a href="#缺乏明确的记录标准，无视笔记的「复利」效应" class="headerlink" title="缺乏明确的记录标准，无视笔记的「复利」效应"></a>缺乏明确的记录标准，无视笔记的「复利」效应</h3><p>只记录特定项目相关的笔记，将导致项目期间有趣的观点或者想法信息丢失。不从进行的项目中提炼知识，经验、方法，无视笔记的复利效应，将不断掉入「重复劳动」的陷阱。</p><h2 id="只顾记录，从不回顾-The-Lack-of-Reflection"><a href="#只顾记录，从不回顾-The-Lack-of-Reflection" class="headerlink" title="只顾记录，从不回顾 (The Lack of Reflection)"></a>只顾记录，从不回顾 (The Lack of Reflection)</h2><p>增援未来的自己，是记笔记的主要目的之一，笔记可能给未来的自己带来解决问题的思路和线索。在很长的时间跨度中，不可能记住所有笔记的内容，所以就需要定期回顾笔记。</p><p>回顾笔记是用新视角去审视旧想法，总体来说人是会不断进步的，回顾笔记给知识迭代创造机会。</p><h2 id="思考与总结"><a href="#思考与总结" class="headerlink" title="思考与总结"></a>思考与总结</h2><h3 id="什么是「好」的知识管理系统"><a href="#什么是「好」的知识管理系统" class="headerlink" title="什么是「好」的知识管理系统"></a>什么是「好」的知识管理系统</h3><ul><li>知识管理系统随着笔记数量的增加，变得越来越有用</li><li>不同的笔记很容易整合到一起，从而形成新的想法</li><li>使用知识管理系统后，工作能力&#x2F;输出能力得到显著提升</li></ul><h3 id="知识管理失败的重要原因"><a href="#知识管理失败的重要原因" class="headerlink" title="知识管理失败的重要原因"></a>知识管理失败的重要原因</h3><p>笔记「混杂」是很多人知识管理失败的主要原因，混杂无法形成群聚效应，也就无法最大的发挥笔记的效用。有人提议用「原子笔记」来解决，但真正的问题是缺乏标准导致的混杂。</p><h3 id="知识管理的关键"><a href="#知识管理的关键" class="headerlink" title="知识管理的关键"></a>知识管理的关键</h3><p>知识管理系统最重要的是在同一个地方，用同样的格式和一致的标准记录你的洞见。持续不断记录，意义自然浮现。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] Personal knowledge management is NOT work - Sam Matla<br><a href="https://www.youtube.com/watch?v=baKCC2uTbRc">https://www.youtube.com/watch?v=baKCC2uTbRc</a></p><p>[2] How to Take Smart Notes - Sönke Ahrens</p><p>[3] Build a second brain - Tiago Forte</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;查理·芒格曾多次在采访中提到，自己一辈子只研究两件事情：第一种是发现什么有效，然后实践它；第二种是发现什么是无效的，然后规避它。查理·芒格会花费大量时间来研究什么事会失败，尽可能减少认知偏差。&lt;/p&gt;
&lt;p&gt;我在知识管理方面犯过不少错误，向芒格学习总结知识管理的几个错误。&lt;</summary>
      
    
    
    
    
    <category term="PKM" scheme="http://usmacd.com/tags/PKM/"/>
    
  </entry>
  
  <entry>
    <title>也许学校根本没有教你如何学习：论什么是真正的自学</title>
    <link href="http://usmacd.com/cn/learn_method/"/>
    <id>http://usmacd.com/cn/learn_method/</id>
    <published>2024-04-14T16:00:00.000Z</published>
    <updated>2024-04-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一则笔记，总结了少数派原文的要点，该文章中谈及了学习的两个原始模型，对我有较大启发，分享出来，希望对大家有所帮助。分享方法的文章是真正的「授人以渔」，难能可贵，供大家参考。</p><p><a href="https://sspai.com/post/87551">https://sspai.com/post/87551</a></p><h2 id="学习的两个原始模型"><a href="#学习的两个原始模型" class="headerlink" title="学习的两个原始模型"></a>学习的两个原始模型</h2><p>应试学习和自主学习，两者完全不同。情境和体验，两项对学习至关重要的因素，长久以来在应试体系中是严重缺位的。很多学生在上学时，都有这样困惑，我学这些知识是用来干啥的 ？</p><p>人类学习的有两个原始模型：<br>1）实验，试错，反复纠正，总结实验的结果<br>2）模仿有经验的人，有问题就去请教，直到自己成为有经验的人。</p><p>做实验和当学徒，两种模式是启发和反馈的开放模型。自主学习应该以体验为核心，将学习目标和实际效用联系起来，最好能立刻看到目标对应的结果。</p><p>学编程：✖️ 天书般的知识体系  ✔️ 先搞一个简单的个人网站<br>学英语：✖️ 语法攻略，单词大全  ✔️ 从最基本的高频核心单词入手，输入大量语料，开着字幕看自己喜欢的简单英语视频<br>学运营：✖️ 价值 998 的全套手把手教程 ✔️ 明确自己要做的方向 ，找一些这些方向的头部号，看它里面最好的那几篇内容，分析它为什么好</p><h2 id="如何提高学习效率"><a href="#如何提高学习效率" class="headerlink" title="如何提高学习效率"></a>如何提高学习效率</h2><p>每天完成三个周期，每个周期一个半小时，这是一个成年人可以维持高注意力的平均时长。<br>20 分钟热身期 + 1 个小时左右的专注期 &#x3D; 一个半小时完整学习周期。</p><h2 id="如何制定一个好目标"><a href="#如何制定一个好目标" class="headerlink" title="如何制定一个好目标"></a>如何制定一个好目标</h2><p>目标最小化原则: 一个具体的目标，越小越好，执行起来越不费劲越好<br>Done than perfect: 克服完美主义，以完成任务为目标。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一则笔记，总结了少数派原文的要点，该文章中谈及了学习的两个原始模型，对我有较大启发，分享出来，希望对大家有所帮助。分享方法的文章是真正的「授人以渔」，难能可贵，供大家参考。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://sspai.com/post/87551&quot;&gt;ht</summary>
      
    
    
    
    
    <category term="KNOWLEDGE" scheme="http://usmacd.com/tags/KNOWLEDGE/"/>
    
  </entry>
  
  <entry>
    <title>李录谈价值投资</title>
    <link href="http://usmacd.com/cn/lilu/"/>
    <id>http://usmacd.com/cn/lilu/</id>
    <published>2024-04-02T16:00:00.000Z</published>
    <updated>2024-04-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="价值投资是大道"><a href="#价值投资是大道" class="headerlink" title="价值投资是大道"></a>价值投资是大道</h2><p>价值投资的理念只有四个。</p><p>1）买股票是投资一个公司：股票是公司的所有权，公司在创造价值的过程中，作为部分所有者，拥有的部分价值也会增长</p><p>2）忽略短期波动：市场不能告诉你价值，只能告诉你价格，你只能把它当作一个可以利用的工具</p><p>3）注重安全边际：因为无法对未来预测，做判断是要预留很大空间，买入价格要大大低于内在价值</p><p>4）建立能力圈：通过不断努力，在某些行业获得比几乎所有人更深认识，从而能对公司长期表现作出比所有其他人更准确的判断</p><p>前三条自来本杰明·格雷厄姆，最后一条来自沃伦·巴菲特。</p><h2 id="价值投资的难点"><a href="#价值投资的难点" class="headerlink" title="价值投资的难点"></a>价值投资的难点</h2><p>1）价值投资虽然是通向成功的大路，但是这个道路太长了。也许你买的时候价格远低于内在价值，但你不知道市场什么时候变得理性。同时公司的价值要增长，要公司管理层和上上下下的人员共同努力，是一个很艰难的过程。</p><p>2）你对未来的判断也很难，投资的本事是对未来的预测。真正了解一个公司，一个行业，要能够去判断它未来的5年，10年。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;价值投资是大道&quot;&gt;&lt;a href=&quot;#价值投资是大道&quot; class=&quot;headerlink&quot; title=&quot;价值投资是大道&quot;&gt;&lt;/a&gt;价值投资是大道&lt;/h2&gt;&lt;p&gt;价值投资的理念只有四个。&lt;/p&gt;
&lt;p&gt;1）买股票是投资一个公司：股票是公司的所有权，公司在创造价值</summary>
      
    
    
    
    
    <category term="investment" scheme="http://usmacd.com/tags/investment/"/>
    
  </entry>
  
  <entry>
    <title>AFL++ 漏洞挖掘实例</title>
    <link href="http://usmacd.com/cn/AFL++%20%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%AE%9E%E4%BE%8B/"/>
    <id>http://usmacd.com/cn/AFL++%20%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%AE%9E%E4%BE%8B/</id>
    <published>2024-03-31T16:00:00.000Z</published>
    <updated>2024-03-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="☆-1-模糊测试工具-AFL-AFL-介绍"><a href="#☆-1-模糊测试工具-AFL-AFL-介绍" class="headerlink" title="☆ 1. 模糊测试工具 AFL &#x2F; AFL++介绍"></a>☆ 1. 模糊测试工具 AFL &#x2F; AFL++介绍</h2><p>模糊测试是一种黑盒测试方法，它通过向软件输入随机或异常的数据，来触发软件中的错误或异常。AFL 是 Google 开发的一款 fuzz 工具，它最初由 Michal Zalewski 开发，被设计为一种模糊测试工具，用于自动发现程序中的漏洞。</p><p>在 AFL 之前，模糊测试工具大多采用随机生成输入数据的方法。这种方法虽然简单，但效率低下，很难发现软件中的隐藏路径。AFL 引入了覆盖率导向的模糊测试方法，它会根据软件的执行路径来优化输入数据。这种方法可以有效地提高模糊测试的效率，并更容易发现软件中的隐藏路径。</p><p>AFL 的发布，标志着模糊测试工具进入了新的时代。AFL 的成功，激发了许多其他研究人员和开发人员对模糊测试工具的改进和研究。它对软件安全领域产生了深远的影响。AFL 的成功，证明了模糊测试是一种有效的软件安全测试方法。</p><p>AFL 在模糊测试工具发展史上的具体贡献主要有：<br>1）开创了覆盖率导向模糊测试的新时代<br>2）极大地提高了模糊测试的效率和效果<br>3）激发了其他研究人员和开发人员对模糊测试工具的改进和研究</p><p>AFL作为一款开创性的模糊测试工具，通过不断的发展和改进，已经在网络安全领域取得了显著的历史地位。其自动化特性和有效的漏洞发现能力使其成为安全专业人员首选的工具之一，对软件安全性的提升产生了积极影响。AFL 的成功，证明了模糊测试是一种有效的软件安全测试方法。AFL 的出现，为软件安全领域提供了新的工具和手段，帮助开发人员和安全研究人员发现软件中的安全漏洞。</p><p>AFLplusplus （简称 AFL++）是 AFL 的一个分支，它由 Marc “van Hauser 和其他开发者开发。AFLplusplus 在 AFL 的基础上进行了许多改进，包括：</p><ul><li>更快的执行速度：AFLplusplus 使用了新的编译器插件和其他技术来提高 fuzz 的速度。</li><li>更强大的变异算法：AFLplusplus 提供了更强大的变异算法，可以生成更复杂的输入数据。</li><li>更全面的覆盖率：AFLplusplus 提供了更全面的覆盖率分析，可以帮助开发人员发现软件中的隐藏路径。</li></ul><p>目前 Google 的 oss-fuzz 项目已经使用 AFL++ 替换 AFL 作为其主要 fuzz 工具，AFL++ 在速度、变异算法和覆盖率分析方面都比 AFL 更优秀。</p><h2 id="☆-2-AFL-的安装"><a href="#☆-2-AFL-的安装" class="headerlink" title="☆ 2. AFL++ 的安装"></a>☆ 2. AFL++ 的安装</h2><p>AFL++ 的源码有两个分支，stable 分支 [2] 为发布分支，dev 分支 [3] 为开发分支。dev 分支代码的更新频率很高，也不是很稳定可能出现 bug，推荐使用 stable 分支的源码。以 ubuntu 18.04 为例介绍如何安装 AFLplusplus</p><p>下载源码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/AFLplusplus/AFLplusplus<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure><p><strong>git submodule</strong> 这条命令很重要，要不编译一些 AFL++ mode 的时候会因为缺少源码而报错。</p><p>要从源码编译 AFL++ 需要先安装系统的依赖库。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get update<br>sudo apt-get install -y build-essential python3-dev automake git flex bison libglib2.0-dev libpixman-1-dev python3-setuptools curl ninja-build<br></code></pre></td></tr></table></figure><p>AFL++ 在文档中推荐使用 llvm 13+ ,  所以先要升级 Ubuntu 系统的 llvm ，<a href="https://apt.llvm.org/">https://apt.llvm.org/</a> 提供了编译好的 llvm binary 可以下载，也提供了 llvm.sh 可以非常方面的安装新版本的 llvm，下面的例子演示安装 llvm 15</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://apt.llvm.org/llvm.sh<br><span class="hljs-built_in">chmod</span> +x llvm.sh<br>sudo ./llvm.sh 15 all<br></code></pre></td></tr></table></figure><p>编译 AFL++</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> LLVM_CONFIG=<span class="hljs-string">&quot;llvm-config-15&quot;</span><br>make distrib<br></code></pre></td></tr></table></figure><h2 id="☆-3-AFL-Linux-系统环境配置"><a href="#☆-3-AFL-Linux-系统环境配置" class="headerlink" title="☆ 3. AFL++ Linux 系统环境配置"></a>☆ 3. AFL++ Linux 系统环境配置</h2><p>为了使 AFL++ 在 fuzz 时获得更好的性能，可以使用 root 用户执行下面的脚本， 调整 linux 内核的参数。</p><p><code>sudo bash afl-init.sh</code> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> 1 &gt;/proc/sys/kernel/sched_child_runs_first<br><span class="hljs-built_in">echo</span> 1 &gt;/proc/sys/kernel/sched_autogroup_enabled<br><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/vm/overcommit_memory<br><span class="hljs-built_in">echo</span> core &gt;/proc/sys/kernel/core_pattern<br><span class="hljs-built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled<br><span class="hljs-built_in">test</span> -e /sys/devices/system/cpu/cpufreq/scaling_governor &amp;&amp; <span class="hljs-built_in">echo</span> performance | <span class="hljs-built_in">tee</span> /sys/devices/system/cpu/cpufreq/scaling_governor<br><span class="hljs-built_in">test</span> -e /sys/devices/system/cpu/cpufreq/policy0/scaling_governor &amp;&amp; <span class="hljs-built_in">echo</span> performance | <span class="hljs-built_in">tee</span> /sys/devices/system/cpu/cpufreq/policy*/scaling_governor<br><span class="hljs-built_in">test</span> -e /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor &amp;&amp; <span class="hljs-built_in">echo</span> performance | <span class="hljs-built_in">tee</span> /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor<br><span class="hljs-built_in">test</span> -e /sys/devices/system/cpu/cpufreq/boost &amp;&amp; <span class="hljs-built_in">echo</span> 1 &gt; /sys/devices/system/cpu/cpufreq/boost<br></code></pre></td></tr></table></figure><h2 id="☆-4-AFL-的基本使用方法"><a href="#☆-4-AFL-的基本使用方法" class="headerlink" title="☆ 4. AFL++ 的基本使用方法"></a>☆ 4. AFL++ 的基本使用方法</h2><h3 id="4-1-编译插桩模糊测试目标软件"><a href="#4-1-编译插桩模糊测试目标软件" class="headerlink" title="4.1 编译插桩模糊测试目标软件"></a>4.1 编译插桩模糊测试目标软件</h3><p>优先使用 llvm clang 对目标软件进行插桩，在最近几年的实战文章中已经很少看到使用 gcc 插桩目标软件的例子。AFL++ 提供了多种插桩方式，可以参考:<br><a href="https://github.com/AFLplusplus/AFLplusplus/tree/stable/instrumentation">https://github.com/AFLplusplus/AFLplusplus/tree/stable/instrumentation</a></p><p>使用  afl-clang-fast&#x2F;afl-clang-fast++ 或者 afl-clang-lto&#x2F;afl-clang-lto++ 可以应对大多数情况，afl-clang-lto&#x2F;afl-clang-lto++ 在编译大型程序的时候可能会失败，如果出现失败的情况，可以换用 afl-clang-fast&#x2F;afl-clang-fast++ 。 下面的示例分别针对三种不同编译系统情况，[a] 使用 Makefile , [b] 使用 cmake，[c] 使用 meson , 需要根据具体情况选择。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">CC=afl-cc CXX=afl-c++ ./configure --disable-shared <span class="hljs-comment"># [a]</span><br>cmake -DCMAKE_C_COMPILERC=afl-cc -DCMAKE_CXX_COMPILER=afl-c++ . <span class="hljs-comment"># [b]</span><br>CC=afl-cc CXX=afl-c++ meson <span class="hljs-comment"># [c]</span><br></code></pre></td></tr></table></figure><p>下载 Xpdf 3.02 作为 fuzz 目标。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://dl.xpdfreader.com/old/xpdf-3.02.tar.gz<br>tar -xvzf xpdf-3.02.tar.gz<br></code></pre></td></tr></table></figure><p>编译 Xpdf</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> xpdf<br>CC=afl-cc CXX=afl-c++ ./configure --disable-shared --prefix=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/fuzz_xpdf/install/&quot;</span><br>make<br>make install<br></code></pre></td></tr></table></figure><p>将得到我们的 fuzz 目标  <code>$HOME/fuzz_xpdf/install/bin/pdftotext</code></p><h3 id="4-2-AFL-的命令行参数"><a href="#4-2-AFL-的命令行参数" class="headerlink" title="4.2 AFL++ 的命令行参数"></a>4.2 AFL++ 的命令行参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">afl-fuzz -i <span class="hljs-variable">$HOME</span>/AFLplusplus/testcases/others/pdf -o <span class="hljs-variable">$HOME</span>/fuzz_xpdf/out/ -s 123 -- <span class="hljs-variable">$HOME</span>/fuzz_xpdf/install/bin/pdftotext @@ <span class="hljs-variable">$HOME</span>/fuzz_xpdf/output<br></code></pre></td></tr></table></figure><ul><li>-i  输入目录，用于存放初始 testcase</li><li>-o 输出目录，用于存放 afl-fuzz 生成的 testcase</li><li>– 后面接 fuzz 目标的命令行   @@ 代表文件，不写 @@ 代表是从标准输入读取数据</li><li>-s  RNG 的 seed</li></ul><h2 id="☆-5-实战-vim-漏洞挖掘"><a href="#☆-5-实战-vim-漏洞挖掘" class="headerlink" title="☆ 5. 实战 vim 漏洞挖掘"></a>☆ 5. 实战 vim 漏洞挖掘</h2><p>首先需要研究 vim 的命令行参数，默认的配置下 vim 启动速度慢，并且有可能执行外部shell 命令 （不安全），最终需要使用的命令行参数如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>-u NONE 跳过初始化<br><span class="hljs-bullet">- </span>-X 加快启动速度<br><span class="hljs-bullet">- </span>-s 安静模式<br><span class="hljs-bullet">- </span>-Z 受限模式 (All commands that make use of an external shell are disabled.)<br><span class="hljs-bullet">- </span>-e 以 Ex 模式运行 vim<br><span class="hljs-bullet">- </span>-S 加载第一个文件后执行文件 &lt;session&gt;<br><span class="hljs-bullet">- </span>-c &lt;command&gt; 加载第一个文件后执行 &lt;command&gt;<br><span class="hljs-bullet">- </span>-n 不使用交换文件，只使用内存<br><span class="hljs-bullet">- </span>-m Modifications not allowed to be written<br></code></pre></td></tr></table></figure><h3 id="5-0-vim-的-Ex-模式介绍"><a href="#5-0-vim-的-Ex-模式介绍" class="headerlink" title="5.0 vim 的 Ex 模式介绍"></a>5.0 vim 的 Ex 模式介绍</h3><p>Vim 编译器有三种模式：普通模式、插入模式和 ex 模式。ex 模式是 Vim 的底层命令模式，用于执行各种文件操作，如打开、编辑、保存、搜索、替换、排序等。要进入 ex 模式，可以按下 : 键。在 ex 模式下，可以输入各种命令来执行操作。命令由行号和命令组成，以回车键结束。</p><p>最基本的 ex 命令是 p 命令，用于打印指定行号的行。例如，要打印第 10 行，可以输入 10p。</p><p>其他常用的 ex 命令包括：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">e 命令：打开另一个文件<br>w 命令：保存当前文件<br>q 命令：退出 Vim<br>s 命令：将当前行替换为指定文本<br>g<span class="hljs-operator">/</span><span class="hljs-keyword">pattern</span><span class="hljs-operator">/</span>s<span class="hljs-operator">/</span><span class="hljs-keyword">old</span><span class="hljs-operator">/</span><span class="hljs-keyword">new</span><span class="hljs-operator">/</span> 命令：将所有匹配模式 <span class="hljs-keyword">pattern</span> 的行替换为 <span class="hljs-keyword">old</span> 替换为 <span class="hljs-keyword">new</span>。<br>:sort 命令：对当前文件进行排序。<br></code></pre></td></tr></table></figure><p>ex 模式的使用方法如下：在普通模式下，按下 : 键进入 ex 模式，输入命令，按下回车键执行命令。</p><p>以下是一些 ex 模式的使用示例：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 打开文件</span><br><span class="hljs-symbol">:e</span> test.txt<br><br><span class="hljs-comment"># 编辑文件</span><br><span class="hljs-number">10</span>iHello, world!<br><br><span class="hljs-comment"># 保存文件</span><br><span class="hljs-symbol">:w</span><br><br><span class="hljs-comment"># 退出 Vim</span><br><span class="hljs-symbol">:q</span><br></code></pre></td></tr></table></figure><p>ex 模式提供了丰富的命令，可以用于执行各种文件操作。熟练掌握 ex 模式可以提高 Vim 的使用效率。</p><h3 id="5-1-攻击面分析"><a href="#5-1-攻击面分析" class="headerlink" title="5.1 攻击面分析"></a>5.1 攻击面分析</h3><p>研究历史漏洞发现，vim 主要有两个攻击面， vim 正则表达式引擎和vim 脚本执行引擎。</p><h4 id="vim-的正则表达式引擎"><a href="#vim-的正则表达式引擎" class="headerlink" title="vim 的正则表达式引擎"></a>vim 的正则表达式引擎</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">./vim -u <span class="hljs-built_in">NONE</span> -i <span class="hljs-built_in">NONE</span> -X -Z -m -n -e -s -c <span class="hljs-string">&#x27;call search(getline(&quot;.&quot;))&#x27;</span> -c <span class="hljs-string">&#x27;:qa!&#x27;</span> ./poc<br></code></pre></td></tr></table></figure><h4 id="vim-的脚本执行引擎"><a href="#vim-的脚本执行引擎" class="headerlink" title="vim 的脚本执行引擎"></a>vim 的脚本执行引擎</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">vim -u <span class="hljs-built_in">NONE</span> -i <span class="hljs-built_in">NONE</span> -X -Z -m -n -e -s -S ./poc -c <span class="hljs-string">&#x27;:qa!&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-编译-vim"><a href="#5-2-编译-vim" class="headerlink" title="5.2 编译 vim"></a>5.2 编译 vim</h3><p>首先下载 vim 的源码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/vim/vim.git<br></code></pre></td></tr></table></figure><p>编译 vim ，使用 afl-cc 插桩</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> LLVM_CONFIG=<span class="hljs-string">&quot;llvm-config-15&quot;</span><br><span class="hljs-built_in">export</span> CFLAGS=<span class="hljs-string">&quot;-O1 -g -fno-omit-frame-pointer&quot;</span><br><span class="hljs-built_in">cd</span> vim<br>CC=afl-cc CXX=afl-c++ ./configure --with-features=huge --enable-gui=none --disable-shared<br>make<br></code></pre></td></tr></table></figure><h3 id="5-3-寻找-fuzz-vim-的-testcases-corpus"><a href="#5-3-寻找-fuzz-vim-的-testcases-corpus" class="headerlink" title="5.3 寻找 fuzz vim 的 testcases ( corpus)"></a>5.3 寻找 fuzz vim 的 testcases ( corpus)</h3><p>vim 官方仓库里有历史上造成 vim crash 的 poc ，正好拿来用。<br><a href="https://github.com/vim/vim/tree/master/src/testdir/crash">https://github.com/vim/vim/tree/master/src/testdir/crash</a></p><h3 id="5-4-fuzz-vim"><a href="#5-4-fuzz-vim" class="headerlink" title="5.4 fuzz vim"></a>5.4 fuzz vim</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/fuzz/vim<br><span class="hljs-built_in">mkdir</span> -p /tmp/afl++<br>afl-fuzz -i testdir/crash/ -o ~/fuzz/vim -mnone -p fast -- ./vim -u NONE -i NONE -X -Z -m -n -e -s -S @@ -c <span class="hljs-string">&#x27;:qa!&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>-x 指定字典文件</li><li>-mnone 不限制使用内存</li></ul><h3 id="5-5-fuzz-结果"><a href="#5-5-fuzz-结果" class="headerlink" title="5.5  fuzz 结果"></a>5.5  fuzz 结果</h3><p>经过 2天 16 小时的 fuzz， AFL++ 报告有 789 个 Crashes.</p><h3 id="5-6-调整和改进"><a href="#5-6-调整和改进" class="headerlink" title="5.6 调整和改进"></a>5.6 调整和改进</h3><p><code>~/fuzz/vim/default</code> 目录出现了大量的 <code> _cur_inp.*</code> 文件，这是 AFL++ 生成的的临时文件，为了取得更好的效果，需要把这些文件放到 &#x2F;tmp 目录。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> AFL_TMPDIR=/tmp/afl++<br></code></pre></td></tr></table></figure><p>使用 AFL++ 的 cmplog 特性，解决一些  fuzz 上的路径约束, 主要思路来自 <a href="https://github.com/RUB-SysSec/redqueen">https://github.com/RUB-SysSec/redqueen</a> 。<br><a href="https://github.com/AFLplusplus/AFLplusplus/blob/stable/instrumentation/README.cmplog.md">https://github.com/AFLplusplus/AFLplusplus/blob/stable/instrumentation/README.cmplog.md</a></p><p>要使用 cmplog，需要重新编译 vim，使用 <code>AFL_LLVM_CMPLOG</code> 环境变量，指定使用 cmplog 的编译。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> src/vim src/vim-afl<br>make distclean<br><br><span class="hljs-built_in">export</span> LLVM_CONFIG=<span class="hljs-string">&quot;llvm-config-15&quot;</span><br><span class="hljs-built_in">export</span> CFLAGS=<span class="hljs-string">&quot;-O1 -g -fno-omit-frame-pointer&quot;</span><br><span class="hljs-built_in">cd</span> vim-cmplog<br><span class="hljs-built_in">export</span> AFL_LLVM_CMPLOG=1<br>CC=afl-cc CXX=afl-c++ ./configure --with-features=huge --enable-gui=none<br>make<br><span class="hljs-built_in">mv</span> src/vim src/vim-cmplog<br></code></pre></td></tr></table></figure><p>编译完成后，将编译好的 vim 重命名成 vim-cmplog，可以使用下面的 AFL++ 命令行，启用 cmplog</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> AFL_TMPDIR=/tmp/afl++-cmplog<br>afl-fuzz -i testdir/crash/ -o ~/fuzz/vim -mnone -p fast -S cmplog -c ./vim-cmplog -- ./vim-afl -u NONE -i NONE -X -Z -m -n -e -s -S @@ -c <span class="hljs-string">&#x27;:qa!&#x27;</span><br></code></pre></td></tr></table></figure><p>同时运行两个 AFL++ 对 vim 进行 fuzz。</p><h2 id="Trophy"><a href="#Trophy" class="headerlink" title="Trophy"></a>Trophy</h2><p>历史上使用上述方法发现了许多 vim 漏洞，部分漏洞 vim 官方已经修复。</p><p><a href="https://github.com/vim/vim/commit/0fb375aae608d7306b4baf9c1f906961f32e2abf">https://github.com/vim/vim/commit/0fb375aae608d7306b4baf9c1f906961f32e2abf</a><br><a href="https://github.com/vim/vim/commit/b39b240c386a5a29241415541f1c99e2e6b8ce47">https://github.com/vim/vim/commit/b39b240c386a5a29241415541f1c99e2e6b8ce47</a><br><a href="https://github.com/vim/vim/commit/eec0c2b3a4cfab93dd8d4adaa60638d47a2bbc8a">https://github.com/vim/vim/commit/eec0c2b3a4cfab93dd8d4adaa60638d47a2bbc8a</a><br><a href="https://github.com/vim/vim/commit/abfa13ebe92d81aaf66669c428d767847b577453">https://github.com/vim/vim/commit/abfa13ebe92d81aaf66669c428d767847b577453</a></p><h2 id="☆-参考资料"><a href="#☆-参考资料" class="headerlink" title="☆  参考资料"></a>☆  参考资料</h2><p>[1]  <a href="https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/INSTALL.md">https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/INSTALL.md</a><br>[2]  <a href="https://github.com/AFLplusplus/AFLplusplus/tree/stable">AFL ++ stable branch</a><br>[3]  <a href="https://github.com/AFLplusplus/AFLplusplus/tree/dev">AFL++ dev branch</a><br>[4] <a href="https://github.com/AFLplusplus/AFLplusplus/blob/stable/instrumentation/README.llvm.md">https://github.com/AFLplusplus/AFLplusplus/blob/stable/instrumentation/README.llvm.md</a><br>[5] <a href="https://github.com/AFLplusplus/AFLplusplus/blob/stable/instrumentation/README.cmplog.md">https://github.com/AFLplusplus/AFLplusplus/blob/stable/instrumentation/README.cmplog.md</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;☆-1-模糊测试工具-AFL-AFL-介绍&quot;&gt;&lt;a href=&quot;#☆-1-模糊测试工具-AFL-AFL-介绍&quot; class=&quot;headerlink&quot; title=&quot;☆ 1. 模糊测试工具 AFL &amp;#x2F; AFL++介绍&quot;&gt;&lt;/a&gt;☆ 1. 模糊测试工具 AF</summary>
      
    
    
    
    
    <category term="Security" scheme="http://usmacd.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>我的 Logseq 使用实践</title>
    <link href="http://usmacd.com/cn/logseq_practice/"/>
    <id>http://usmacd.com/cn/logseq_practice/</id>
    <published>2024-03-30T16:00:00.000Z</published>
    <updated>2024-06-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>近两年陆陆续续发表了一系列关于 Logseq 实践的文字，零散不易查找阅读，抽空整理成一篇文章，希望能对大家有所帮助。</p><h2 id="Logseq-光速入门"><a href="#Logseq-光速入门" class="headerlink" title="Logseq 光速入门"></a>Logseq 光速入门</h2><p>Logseq 是个不错的工具，就是学习曲线有点陡峭，上手不太容易，最开始可以从 journal 开始，进行日常记事并使用任务管理功能安排日程。</p><p>Logseq 的高阶用法是利用 query 建立自己的工作流 （workflow），使用基于 Query 的 workflow 提示 next action 是 Logseq 最精华的功能，Logseq 的资深用户都是 Query base workflow 的爱好者。</p><p>但是入门还是建议从基础功能的使用开始 （日志，双链，大纲，本地存储 ）。我自己写过 Logseq 四篇，现在由于笔记系统上手熟练，输出反倒不如从前，有点惭愧。</p><p><a href="https://www.usmacd.com/cn/logseq/">Logseq 试用报告</a><br><a href="https://www.usmacd.com/cn/logseq2/">Logseq 使用小结（二）</a><br><a href="https://www.usmacd.com/cn/logseq3/">Logseq 使用小结（三）</a><br><a href="https://www.usmacd.com/cn/logseq_plugins/">我正在使用的 Logseq Plugin</a></p><p>关于 Logseq 的使用，Luhmann 写了不少高质量的 Logseq 文章，放在他个人的网站上 <a href="https://luhmann-logseq.notion.site/">https://luhmann-logseq.notion.site</a> 可以阅读一下。</p><p>Luhmann 写的经典文章 三个强大的工具和三个选择，内容非常得好，使用 Logseq 前阅读一遍可以少走许多弯路。尤其是三个选择这篇，在使用 Logseq 前如果不仔细思考，后期要推翻重来的话就非常麻烦了。</p><div class="note note-info">            <p><a href="https://discuss.logseq.com/t/three-power-tools-i-wish-id-known-about-when-i-started-using-logseq/1683">Three power-tools I wish I’d known about when I started using Logseq</a></p><ul><li>Templates</li><li>Aliases</li><li>Page-tags</li></ul><p><a href="https://discuss.logseq.com/t/three-choices-new-users-need-to-make/3411">Three Choices New Users Need to Make</a></p><ul><li>First choice: to use a daily journal or not?</li><li>Second Choice: tags, hierarchy, or page-tags?</li><li>Third choice: One graph for everything, or multiple graphs?</li></ul>          </div><h2 id="Logseq-同步功能的情况"><a href="#Logseq-同步功能的情况" class="headerlink" title="Logseq 同步功能的情况"></a>Logseq 同步功能的情况</h2><p>只有赞助用户（Logseq Discord 服务器 Backer 角色）可以使用Logseq 官方提供的同步功能，但是 Logseq 官方提供的同步功能不太稳定。我在 Discord 上看到了太多数据丢失的例子，所以我不敢用。</p><p>同步导致数据丢失的情况在 Logseq 多端同步的用户中最为常见，多端同步指多个设备之间数据同步，比如 MacBook 和 iPhone 之间的数据同步。</p><p>我使用第三方网盘单向同步，只有一个设备和网盘自动同步（写网盘），其他设备读网盘后，手动复制一份数据。</p><p>最近看到许多 Community 用户使用 <a href="https://syncthing.net/">Syncthing</a> 进行多端同步，效果好像不错，但我自己没有尝试这种方法。(推友 Mengxin Liu 反馈，Syncthing 同步效果也不太好)</p><h2 id="Journal-or-Page-？"><a href="#Journal-or-Page-？" class="headerlink" title="Journal or Page ？"></a>Journal or Page ？</h2><p>Logseq 用户经常会遇上一个问题，究竟是在 journal 写笔记还是新开一个 page 写。community Luhmann 用户给出他的 flowchat，我觉得写得非常好。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/logseq5_1.jpeg" alt="Journal or Page"></p><p>我自己的用法可以简单的概括为，在 Journal 记录较为零散的片段，在 Page 中对 Journal 中的片段进行重新组合Organize（聚合、重组、整合）。</p><p>Page 中保存较为正式的文字，Journal 中则会较为杂乱地记录想法。按照第二大脑 CODE 的说法，Journal 里 Capture ，Page 里 Organize 。</p><h2 id="Journal-该写点啥-？"><a href="#Journal-该写点啥-？" class="headerlink" title="Journal 该写点啥 ？"></a>Journal 该写点啥 ？</h2><p>哪些内容值得记录，是非常常见的问题。蒂亚戈•福特在《打造第二大脑》一书说认为，值得记录的内容一般有两类。</p><div class="note note-info">            <p><strong>一类，直接从外部世界中获得</strong>，比如：<br>    - 标记的重点：书籍或文章高亮（highlight）的内容<br>    - 引用的佳句：播客或有声读物中令人印象深刻的内容<br>    - 语音备忘：移动设备上记录的语音片段<br>    - 书签或收藏夹：你感兴趣的网页或社交媒体的链接<br>    - 课程要点：参加课程，会议，演讲等活动收获的启示<br>    - 图片：启发灵感的或有趣的照片或者图片</p><p><strong>一类，从内部世界获得</strong>，比如：<br>    - 故事：发生在你自己或者别人的趣事<br>    - 洞见：对事物小的和大的见解<br>    - 记忆：生活中不想忘记的经历<br>    - 反思：写在日记上的个人想法和人生教训<br>    - 沉思：随机在脑海里浮现想法（比如洗澡时）</p>          </div><p>虽然内心世界的感悟很珍贵，但是引起共鸣的内容（原文）也很有价值。原文的价值主要在下面两点：</p><ol><li>溯源：使我们的思考有坚实的基础，有利于构建思考链条</li><li>启发：让我们产生共鸣的内容，可能再次给我们带来启发</li></ol><p>我在 Logseq 的 Journal 中有两个保留内容 [[生活随记]] 和 [[每日心得]]，在回顾笔记的过程中觉得这些内容还是挺有意义的。</p><p>这些内容从某种意义上来说相当于日记，每天都对自己的经历进行记录就像照镜子一般，「每日三省吾身」 值得坚持。对待同一事物，不同时期的心境并不相同。记录下当下的感受，后期再回过来看感触还是挺大的。</p><h2 id="使用-Logseq-进行时间登记"><a href="#使用-Logseq-进行时间登记" class="headerlink" title="使用 Logseq 进行时间登记"></a>使用 Logseq 进行时间登记</h2><p>受图拉鼎的影响，利用 Logseq 启用严格的时间登记，效果不错。方法很简单，支持 markdown 的编辑器理论上都可行。</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-comment">## Time-block Grid</span><br><span class="hljs-literal">-</span> DONE task1  <span class="hljs-comment"># projectx   09:00 am</span><br><span class="hljs-literal">-</span> DONE task2  <span class="hljs-comment"># projectx   10:00 am</span><br><span class="hljs-literal">-</span> TODO task3  <span class="hljs-comment"># projecty   1:00 pm</span><br></code></pre></td></tr></table></figure><p>关于为什么要时间登记，可以阅读采访图拉鼎的播客 <a href="https://www.usmacd.com/cn/tulading/">图拉鼎谈独立开发</a></p><h2 id="使用-Logseq-定期回顾笔记"><a href="#使用-Logseq-定期回顾笔记" class="headerlink" title="使用 Logseq 定期回顾笔记"></a>使用 Logseq 定期回顾笔记</h2><p>定期回顾自己的笔记大体有下面几个好处:</p><ul><li>对抗遗忘曲线：尤其是文献笔记等自己不熟悉的笔记</li><li>推动知识内化，想法迭代：知识结构优化，新旧知识连接</li><li>遇见过去的自己： 挺好玩，挺有趣</li><li>影响现实：促进自我审视，提供思路和线索</li></ul><p>Logseq 软件没有内置随机浏览笔记的插件，第三方提供的 Plugin 可以实现这个目的，从 MarketPlace 下载 logseq-random-note 或者 Logseq Banners plugin 即可。</p><p>在我的知识管理工作流（workflow）中定期回顾笔记是非常重要的一个部分，经常都有意想不到的收获，在 <a href="https://www.usmacd.com/cn/note_review/">定期回顾笔记的好处</a> 中有更加具体的阐述。</p><h2 id="利用-Logseq-来实践卡片笔记工作流"><a href="#利用-Logseq-来实践卡片笔记工作流" class="headerlink" title="利用 Logseq 来实践卡片笔记工作流"></a>利用 Logseq 来实践卡片笔记工作流</h2><p>总体思路</p><ul><li>利用模板自动化输入笔记格式，完成闪念笔记、文献笔记、引用笔记、 永久笔记的输入的标准化</li><li>利用 query 来自动提示下一步的操作，使得整个工作流 actionable</li></ul><p>fleeting note</p><ul><li>在 daily journal 里利用模板写闪念笔记，将闪念笔记标记为 TODO （意味着后续需要采取行动），当闪念笔记被丢弃或者转为永久笔记后标记为 DONE</li><li>利用 query 在 journal 自动提示未完成的 闪念笔记，自动提示标记 TODO 的闪念笔记</li></ul><p>reference note</p><ul><li>在 daily journal 里利用模板写 reference 笔记，所有阅读过的资料都记录一条 reference 笔记</li><li>对于 reference 中的文章、论文、或书籍，需要深入分析的话，就新建一个页面在里面写笔记</li><li>利用 query 列出所有 reference 笔记，相当于拥有了个人的图书馆 (索引)</li></ul><p>permanent note</p><ul><li>在 daily query 页面利用模板写永久笔记，永久笔记自编号</li><li>在单独的页面写永久笔记具体内容，在永久笔记页面纪录来源，父永久笔记</li></ul><p>使用 Logseq 时一定要多用 Template 功能，这是保证笔记格式一致性的关键，可以自动提示应该记录的信息，具体内容可以参考我前段时间写的 <a href="https://www.usmacd.com/cn/zel_note_flow">卡片盒笔记法总体思路与工作流</a></p><h2 id="Zettelkasten-PARA-的-Logseq-实践"><a href="#Zettelkasten-PARA-的-Logseq-实践" class="headerlink" title="Zettelkasten + PARA 的 Logseq 实践"></a>Zettelkasten + PARA 的 Logseq 实践</h2><p>自从使用 Logseq 实践 Zettelkasten 后，我大致发了 1000 条推文，其中有阅读的文献笔记，也有自己思考的永久笔记。我在这两年的时间思考了大量的问题，受益匪浅。 写卡片笔记的目的是为了促进思考，目前正在实践的 PARA 又证明可以推动项目的进展。</p><p>笔记工具有没有用，关键在于人，需要有方法论的支撑，如果没有方法论的指导，认为使用一个工具就可以解决所有问题，世界上没有这么神奇的工具。</p><p>PARA 使用分类的方法将所有的信息分成四类：Projects (可操作的短期目标)，Areas (持续关注的长期目标)，Resources (感兴趣的主题)，Archives (前三类中不活跃的)</p><div class="note note-info">            <ul><li>Projects：短期目标，有截止时间 ： 购买新电脑，写研究报告，设置新客厅家具 等</li><li>Areas：长期目标和负责的内容：如 父亲，产品管理，健康，财务 等</li><li>Resources： 感兴趣的主题：呼吸练习，摄影，咖啡，金融投资 等</li><li>Archives ：不再活跃的前三类：完成或暂停的项目，不再活跃的领域，不感兴趣的主题 等</li></ul>          </div><p> PARA 并不是将东西放进文件夹的分类，而是识别你所负责的工作和生活的结构。关于 PARA 方法，我使用 Claude 翻译了 Tiago Forte 的文章 <a href="https://www.usmacd.com/cn/PARA/">一秒钟内整理数字生活的系统</a>，文章里有更加详细的介绍 。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/logseq5_2.jpeg" alt="Logseq graph"></p><h2 id="不要神话双链笔记方法"><a href="#不要神话双链笔记方法" class="headerlink" title="不要神话双链笔记方法"></a>不要神话双链笔记方法</h2><p>用了两年的 Logseq 后，神奇的发现我好像不怎么使用双链了。</p><p>Journal 的好处是可以随时输入一个较为完整的文字片段，心智负担很小。 但如果要真正对某个主题有较为深刻的理解，需要将零碎片段的完整逻辑和前后关系串连起来。</p><p>真正可以实现这个目标的是写文章，而不是依靠双向链接。 只要写文章的时候，你需要的所有内容都在同一个地方，具体的是用使用标签，还是文件夹都不是重要。</p><p>知识体系的构建是通过不断学习和自我迭代来实现，边界的延伸则可以跟随着自己的好奇心，学习真的是一件很有趣的事情。</p><p>最近有一个体会，工具真的不重要，底层方法论才是重要的东西。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.usmacd.com/cn/zel_note_flow/">卡片盒笔记法总体思路与工作流</a></li><li><a href="https//wilde-at-heart.garden/pages/my-zettelkasten-workflow-from-start-to-finish/">My Zettelkasten workflow from start to finish</a></li><li><a href="https://www.usmacd.com/cn/note_review/">定期回顾笔记的好处</a></li><li><a href="https://www.usmacd.com/cn/PARA/">一秒钟内整理数字生活的系统</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;近两年陆陆续续发表了一系列关于 Logseq 实践的文字，零散不易查找阅读，抽空整理成一篇文章，希望能对大家有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;Logseq-光速入门&quot;&gt;&lt;a href=&quot;#Logseq-光速入门&quot; class=&quot;headerlink&quot; title=&quot;Log</summary>
      
    
    
    
    
    <category term="PKM" scheme="http://usmacd.com/tags/PKM/"/>
    
    <category term="Software" scheme="http://usmacd.com/tags/Software/"/>
    
  </entry>
  
  <entry>
    <title>Some Logseq plugins I&#39;m currently using</title>
    <link href="http://usmacd.com/en/logseq_plugins_en/"/>
    <id>http://usmacd.com/en/logseq_plugins_en/</id>
    <published>2024-03-25T16:00:00.000Z</published>
    <updated>2024-03-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recommend some Logseq plugins I’m currently using. The functions of these plugins are very practical. You can refer to my previous article <a href="https://www.usmacd.com/cn/logseq2/">Logseq Usage Summary (Two)</a> for the method of installing Logseq plugins.</p><h2 id="logseq-random-note"><a href="#logseq-random-note" class="headerlink" title="logseq-random-note"></a>logseq-random-note</h2><p><a href="https://github.com/TankCool/logseq-random-note">https://github.com/TankCool/logseq-random-note</a></p><p>A plugin for randomly browsing notes in Logseq. The fact that Logseq doesn’t have a default random note feature may be an oversight, in contrast, Obsidian has a built-in “open random note” Core Plugin. Regarding the benefits of randomly discovering notes, I have written a dedicated article on <a href="https://www.usmacd.com/cn/note_review/">the advantages of periodically reviewing notes</a>. In my Logseq workflow, regularly reviewing notes is an essential part, often leading to unexpected gains.</p><p>The logseq random note plugin has an issue during usage, it uses the JavaScript <code>math.random</code> function to generate random numbers, which is of low quality, causing the random note plugin to frequently access the same note. I submitted a pull request to the plugin github repository, but the original author did not merge it. If you encounter the issue I mentioned during use, you can try my modified version of the plugin <a href="https://github.com/henices/logseq-random-note">https://github.com/henices/logseq-random-note</a></p><h2 id="logseq-Banners-plugin"><a href="#logseq-Banners-plugin" class="headerlink" title="logseq Banners plugin"></a>logseq Banners plugin</h2><p><a href="https://github.com/yoyurec/logseq-banners-plugin">https://github.com/yoyurec/logseq-banners-plugin</a></p><p>Displays banners in Logseq’s Journal or other pages. The banner can include Calendar, Weather, Pomodoro, and Random quote widgets, providing customization and free combination. I only use the random note feature, allowing me to see my previous notes unintentionally every day, which feels great.</p><p><img src="https://raw.githubusercontent.com/yoyurec/logseq-banners-plugin/main/screenshots/widgets-light-01.png" alt="banner plugin"></p><h2 id="logseq-page-tags-and-Hierarchy"><a href="#logseq-page-tags-and-Hierarchy" class="headerlink" title="logseq page-tags and Hierarchy"></a>logseq page-tags and Hierarchy</h2><p><a href="https://github.com/YU000jp/logseq-page-tags-and-hierarchy">https://github.com/YU000jp/logseq-page-tags-and-hierarchy</a></p><p>A plugin that visually displays Page-tags and Hierarchy in a page, without needing to scroll to the bottom of the page. Logseq’s Page-tags and namespace features are not as well-known as other features. Regrettably, I couldn’t find a clear explanation in Logseq’s documentation.</p><p>The namespace defines the hierarchical relationship between pages, and you can see the hierarchy at the bottom of a page. The namespace has two representation methods:</p><ul><li><code>#topic/topic0/topic1</code></li><li><code>[[topic/topic0/topic1]]</code></li></ul><p>I generally use the former expression, as it’s simpler. When I type <code>#topic</code>, Logseq automatically suggests <code>#topic/topic0</code> and <code>#topic/topic0/topic1</code>, which is very convenient.</p><p>Page-tags are a special property in the first block of a page, using <code>tags:: #topic</code> will make this page visible at the bottom of the <code>topic</code> page in reverse.</p><p>During actual usage, once a page’s content grows, checking Page-tags and the namespace Hierarchy requires scrolling to the bottom of the page, which is very inconvenient. This plugin was developed to solve this issue.</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/logseq4-page-tags.png" alt="page-tags"></p><h2 id="logseq-assets-plus"><a href="#logseq-assets-plus" class="headerlink" title="logseq-assets-plus"></a>logseq-assets-plus</h2><p><a href="https://github.com/xyhp915/logseq-assets-plus">https://github.com/xyhp915/logseq-assets-plus</a></p><p>A plugin for conveniently inserting assets, with the shortcut <code>ctrl/cmd+Shift+o</code>. In Logseq, the method to insert an asset is to use the <code>/upload a asset</code> command, press enter, and a dialog box will pop up for you to select the file you want to save. However, to insert an existing asset into a block, you can only search by name. Logseq assets plus provides richer filtering methods.</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/logseq4-asset-plus.png" alt="asset-plus"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>Logseq 使用小结 （二）<a href="https://www.usmacd.com/cn/logseq2/">https://www.usmacd.com/cn/logseq2/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Recommend some Logseq plugins I’m currently using. The functions of these plugins are very practical. You can refer to my previous articl</summary>
      
    
    
    
    
    <category term="Software" scheme="http://usmacd.com/tags/Software/"/>
    
  </entry>
  
  <entry>
    <title>我正在使用的 Logseq Plugin (插件)</title>
    <link href="http://usmacd.com/cn/logseq_plugins/"/>
    <id>http://usmacd.com/cn/logseq_plugins/</id>
    <published>2024-03-18T16:00:00.000Z</published>
    <updated>2024-03-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>推荐一些我正在使用的 <a href="https://github.com/logseq/logseq">Logseq</a> 插件，这些插件的功能都非常实用。Logseq 安装插件的方法可以参考我以前写的文章 <a href="https://www.usmacd.com/cn/logseq2/">Logseq 使用小结 （二）</a> 。</p><h2 id="logseq-random-note"><a href="#logseq-random-note" class="headerlink" title="logseq-random-note"></a>logseq-random-note</h2><p><a href="https://github.com/TankCool/logseq-random-note">https://github.com/TankCool/logseq-random-note</a></p><p>在 Logseq 中随机浏览笔记的插件。Logseq 没有默认的随机笔记功能可能是一个失误，反观 Obsidian 就有内置 open random note 的功能。关于随机发现笔记的作用，我专门写过一篇文章 <a href="https://www.usmacd.com/cn/note_review/">定期回顾笔记的好处</a>。在我的 Logseq 工作流(workflow) 中，定期回顾笔记是非常重要的部分，经常都能获得意想不到的收获。</p><p>logseq random note 插件在使用中有一个问题，生成随机数时使用了 javascript math.random 函数，这个函数生成的随机数质量不高，导致 random note 插件经常会访问同一个笔记。我向原仓库提交了修改后的源码，但是原作者没有合并。如果在使用的时候遇上我说的这个问题，可以试试我的修改版插件 <a href="https://github.com/henices/logseq-random-note">https://github.com/henices/logseq-random-note</a></p><h2 id="Logseq-Banners-plugin"><a href="#Logseq-Banners-plugin" class="headerlink" title="Logseq Banners plugin"></a>Logseq Banners plugin</h2><p><a href="https://github.com/yoyurec/logseq-banners-plugin">https://github.com/yoyurec/logseq-banners-plugin</a><br>在 Logseq 的 Journal 或者其他页面显示 banner 。Banner 中可以添加 Calendar，Weather，Pomodoro，Random quote 小组件，提供自定义功能，可以自由组合。我只使用了 random note 的功能，每天都可以不经意的看到以前的笔记，感觉非常不错。</p><p><img src="https://raw.githubusercontent.com/yoyurec/logseq-banners-plugin/main/screenshots/widgets-light-01.png" alt="banner plugin"></p><h2 id="Page-tags-and-Hierarchy"><a href="#Page-tags-and-Hierarchy" class="headerlink" title="Page-tags and Hierarchy"></a>Page-tags and Hierarchy</h2><p><a href="https://github.com/YU000jp/logseq-page-tags-and-hierarchy">https://github.com/YU000jp/logseq-page-tags-and-hierarchy</a></p><p>在页面中直观得看见 Page-tags 和 Hierarchy，不用滚动到页面底部的插件。Logseq Page-tags 和 namespace 特性，并不像其他特性被人们熟知。比较遗憾的是我没有在 Logseq 的文档中找到明确的说明。</p><p>namespace 定义了 page 之间的层级关系，可以在一个页面的底部看出层级关系。namespace 有两种表示方式：</p><ul><li><code>#topic/topic0/topic1</code></li><li><code>[[topic/topic0/topic1]]</code></li></ul><p>我一般都使用前面的表达方式，比较简单，输入 <code>#topic</code> Logseq 就会自动提示 <code>#topic/topic0</code> 和 <code>#topic/topic0/topic1</code> 非常方便。</p><p>Page-tags 是一个特殊的属性，在一个 page 的第一个block 使用 <code>tags:: #topic</code> 可以在topic 页面底部反向查看到这个 page。</p><p>实际使用的过程中会发现，一旦页面的内容多了，要查看 Page-tags 和 namespace 的 Hierarchy 必须滚动到页面底部非常费事，这个插件就是为了解决这个问题而开发的。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/logseq4-page-tags.png" alt="page-tags"></p><h2 id="logseq-assets-plus"><a href="#logseq-assets-plus" class="headerlink" title="logseq-assets-plus"></a>logseq-assets-plus</h2><p><a href="https://github.com/xyhp915/logseq-assets-plus">https://github.com/xyhp915/logseq-assets-plus</a></p><p>方便插入资源 asset 的插件，快捷键  ctrl&#x2F;cmd+Shift+O 。在Logseq 中插入 asset 的方法是，使用 &#x2F;upload a asset 命令，回车后会弹出一个对话框选择你要保存的文件即可。但是要在一个 block 中插入一个已有的 asset ，只能使用名字搜索，Logseq assets plus 提供了更加丰富的过滤方法。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/logseq4-asset-plus.png" alt="asset-plus"></p><h2 id="logseq-plugin-mark-map"><a href="#logseq-plugin-mark-map" class="headerlink" title="logseq-plugin-mark-map"></a>logseq-plugin-mark-map</h2><p><a href="https://github.com/vipzhicheng/logseq-plugin-mark-map">https://github.com/vipzhicheng/logseq-plugin-mark-map</a></p><p>将大纲笔记展示为思维导图插件，触发快捷键 mm 。将大纲笔记转化为思维导图，对内容记忆有一些帮助。</p><p><img src="https://github.com/henices/pictures/raw/master/logseq3_5.png" alt="mark-map"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>Logseq 使用小结 （二）<a href="https://www.usmacd.com/cn/logseq2/">https://www.usmacd.com/cn/logseq2/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;推荐一些我正在使用的 &lt;a href=&quot;https://github.com/logseq/logseq&quot;&gt;Logseq&lt;/a&gt; 插件，这些插件的功能都非常实用。Logseq 安装插件的方法可以参考我以前写的文章 &lt;a href=&quot;https://www.usmacd.co</summary>
      
    
    
    
    
    <category term="Software" scheme="http://usmacd.com/tags/Software/"/>
    
  </entry>
  
  <entry>
    <title>如果语言学习只能做一件事</title>
    <link href="http://usmacd.com/cn/language_learning/"/>
    <id>http://usmacd.com/cn/language_learning/</id>
    <published>2024-03-13T16:00:00.000Z</published>
    <updated>2024-03-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一则语言学习方法的笔记。英语学习是许多人关注的事，英语之所以重要是因为很多信息的第一手资料都是英文的，在维基百科上随便查阅一个词条，再对比一下简中、繁中，英语，就会发现资料的准确性和完善程度都有差距。在阅读外文书籍的时候会遇上同样的问题，国内翻译的版本最大的问题是内容不全，其次是翻译质量问题。</p><p>Youtube 上许多成功的外语学习者强调comprehensible input ，而这篇文章的方法和传统的思路较为接近，发音 + 语法 + shadowing 。</p><hr><h2 id="如果语言学习只能做一件事"><a href="#如果语言学习只能做一件事" class="headerlink" title="如果语言学习只能做一件事"></a>如果语言学习只能做一件事</h2><p>作者 Theia 是一个会五门语言的全球青年。 她分享了一个自己认为最有效的语言学习方法：</p><ol><li>找一篇语料，精读一遍。</li><li>将所有的单词、重要语法、词组放入 anki 纳入自己的单词库。</li><li>跟着录音反复阅读 + shadowing (影子跟读) ，乃至背诵。</li></ol><p>语料库的选择，应当有音频和文本，语法词汇略高于你的水平，最好是自己感兴趣的内容。这个方法坚持一两篇，就会进步挺大，用得越多，进步越大。Theia 学习 英日西荷 语言，都在用这个方法学习。</p><p>shadowing 是一个常见的语言学习方法，在录音播放时不看文本，延迟1秒左右的速度跟着说出内容。shadowing 不但锻炼听力，还可以提升发音和口语。</p><h2 id="语言学习不可以错过的一本书"><a href="#语言学习不可以错过的一本书" class="headerlink" title="语言学习不可以错过的一本书"></a>语言学习不可以错过的一本书</h2><p>Theia 认为 Fluent Forever 是语言爱好者不得不读的书。这本书给出的方法覆盖了整个语言学习，即使是有很丰富语言学习心得的人。练好发音，是语言学习第一件事，也是最重要的一件事。</p><h2 id="语法学习与「有效输入」"><a href="#语法学习与「有效输入」" class="headerlink" title="语法学习与「有效输入」"></a>语法学习与「有效输入」</h2><p>Fluent Forever 中提到一个语言学习方法，恰当地学习语法 (develop a passing familiarity with grammar)。在进行有效输入 (comprehensible input ) 之前，让自己在一定程度上熟悉目标语言语法，可以将句子有逻辑地拆解成可以理解的片段，从而加快语言学习的速度。</p><p>尽量创造语言沉浸环境，可以是阅读，看电影，但最有用的方法是看电视剧。电视剧可以给人带来多感官刺激，却不像电影情节那么紧凑，让你掉入情节中。<br>学习效果：无字幕 &gt; 目标语言字幕 &gt; 中文字幕。</p><p>Theia 还有 《一个多语者的独白》系列文章值得阅读，链接如下：</p><p><a href="https://sspai.com/post/77311">https://sspai.com/post/77311</a><br><a href="https://sspai.com/post/77851">https://sspai.com/post/77851</a><br><a href="https://sspai.com/post/78195">https://sspai.com/post/78195</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] 如果我语言学习只能做一件事…及其他碎碎念 Theia在路上 2024&#x2F;1&#x2F;06<br><a href="https://sspai.com/post/85611">https://sspai.com/post/85611</a></p><p>[2] comprehensible input 英语学习方法<br><a href="https://www.usmacd.com/cn/learning_english/">https://www.usmacd.com/cn/learning_english/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一则语言学习方法的笔记。英语学习是许多人关注的事，英语之所以重要是因为很多信息的第一手资料都是英文的，在维基百科上随便查阅一个词条，再对比一下简中、繁中，英语，就会发现资料的准确性和完善程度都有差距。在阅读外文书籍的时候会遇上同样的问题，国内翻译的版本最大的问题是内容不</summary>
      
    
    
    
    
    <category term="KNOWLEDGE" scheme="http://usmacd.com/tags/KNOWLEDGE/"/>
    
  </entry>
  
  <entry>
    <title>金融市场中的不同流派</title>
    <link href="http://usmacd.com/cn/investment_category/"/>
    <id>http://usmacd.com/cn/investment_category/</id>
    <published>2024-03-07T16:00:00.000Z</published>
    <updated>2024-03-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>价值投资：价值低估、价值成长 (巴菲特)</li><li>趋势交易：分析市场的方向动力并寻找参与该走势的方法的过程 (理查德.丹尼斯)</li><li>量化交易：高频交易、动量交易、统计套利等  (詹姆斯·西蒙斯)</li><li>市场博弈：以徐总舵主为代表的打板派</li><li>技术分析：通过研究历史交易数据（主要是价格和成交量），来预测未来的价格走势（威廉.江恩）</li><li>投资策略：ETF 指数投资、网格交易、基金定投，投资组合理论 等</li><li>投资哲学：投资方法建立于个人的金融哲学观上 （乔治·索罗斯, 既有宏观择时，又有趋势交易（反身性))</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;价值投资：价值低估、价值成长 (巴菲特)&lt;/li&gt;
&lt;li&gt;趋势交易：分析市场的方向动力并寻找参与该走势的方法的过程 (理查德.丹尼斯)&lt;/li&gt;
&lt;li&gt;量化交易：高频交易、动量交易、统计套利等  (詹姆斯·西蒙斯)&lt;/li&gt;
&lt;li&gt;市场博弈：以徐总舵主为代</summary>
      
    
    
    
    
    <category term="investment" scheme="http://usmacd.com/tags/investment/"/>
    
  </entry>
  
  <entry>
    <title>Android 手机使用 PC 代理上网的方法</title>
    <link href="http://usmacd.com/cn/android_use_proxy_of_pc/"/>
    <id>http://usmacd.com/cn/android_use_proxy_of_pc/</id>
    <published>2024-02-26T16:00:00.000Z</published>
    <updated>2024-02-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在一些特殊的情况下，可能需要使用 Android 手机或者 PC 的线路访问外部网络资源，同时没有条件连接 wifi 网络，这时候可以使用 Android Platform Tools 的 adb 工具来达到目的。</p><p>Android Platform Tools 的下载地址为：<br><a href="https://developer.android.com/tools/releases/platform-tools#downloads">https://developer.android.com/tools/releases/platform-tools#downloads</a></p><h2 id="Android-手机使用-PC-的代理上网的方法"><a href="#Android-手机使用-PC-的代理上网的方法" class="headerlink" title="Android 手机使用 PC 的代理上网的方法"></a>Android 手机使用 PC 的代理上网的方法</h2><p>用 USB 数据线连接 Android 手机和 PC，在 PC 中执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell settings put global http_proxy 127.0.0.1:7890<br>adb reverse tcp:7890 tcp:7890<br></code></pre></td></tr></table></figure><p>首先设置 Android 手机 http 全局代理为 127.0.0.1:7890，然后将手机的 127.0.0.1:7890 转发到 PC 127.0.0.1:7890 （没有找到设置 Android 系统全局使用 socks5 代理的方法）</p><p>设置 Android 全局代理需要 android.permission.WRITE_SECURE_SETTINGS 权限，ColorOS 需要在开发者选项中开启 「禁止权限监控」具体方法可以参考：<a href="https://sspai.com/post/67110">在 ColorOS 上免 root 玩机，请先打开这个开关</a>，如果是小米手机可能需要在开发者选项中打开 「USB调试（安全设置）」，我没有小米手机未测试。</p><p>如果需要恢复Android 无代理状态，需要使用下面的命令，一定要记得执行这条恢复命令，否则手机可能无法联网。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell settings delete global http_proxy<br>adb shell settings delete global global_http_proxy_host<br>adb shell settings delete global global_http_proxy_port<br></code></pre></td></tr></table></figure><p>执行 <code>adb reverse</code> 命令后，可以使用 <code>adb reverse --list</code> 查看连接建立情况：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UsbFfs</span> tcp:<span class="hljs-number">7890</span> tcp:<span class="hljs-number">7890</span><br></code></pre></td></tr></table></figure><p>不需要使用时，可以使用 <code>adb reverse --remove</code> 移除转发</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">adb <span class="hljs-keyword">reverse</span> <span class="hljs-comment">--remove tcp:7890</span><br></code></pre></td></tr></table></figure><p>参考 adb 的帮助，执行命令 <code>adb help</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">reverse</span> --<span class="hljs-keyword">list</span>           <span class="hljs-keyword">list</span> <span class="hljs-keyword">all</span> <span class="hljs-built_in">reverse</span> socket connections from device<br><span class="hljs-built_in">reverse</span> [--<span class="hljs-keyword">no</span>-rebind] REMOTE LOCAL<br>    <span class="hljs-built_in">reverse</span> socket connection using:<br>      tcp:<span class="hljs-symbol">&lt;port&gt;</span> (<span class="hljs-symbol">&lt;remote&gt;</span> may <span class="hljs-keyword">be</span> <span class="hljs-string">&quot;tcp:0&quot;</span> <span class="hljs-keyword">to</span> pick any <span class="hljs-keyword">open</span> port)<br>      localabstract:&lt;unix domain socket name&gt;<br>      localreserved:&lt;unix domain socket name&gt;<br>      localfilesystem:&lt;unix domain socket name&gt;<br><span class="hljs-built_in">reverse</span> --<span class="hljs-built_in">remove</span> REMOTE  <span class="hljs-built_in">remove</span> specific <span class="hljs-built_in">reverse</span> socket connection<br><span class="hljs-built_in">reverse</span> --<span class="hljs-built_in">remove</span>-<span class="hljs-keyword">all</span>     <span class="hljs-built_in">remove</span> <span class="hljs-keyword">all</span> <span class="hljs-built_in">reverse</span> socket connections from device<br></code></pre></td></tr></table></figure><h2 id="PC-使用-Android-手机代理上网的方法"><a href="#PC-使用-Android-手机代理上网的方法" class="headerlink" title="PC 使用 Android 手机代理上网的方法"></a>PC 使用 Android 手机代理上网的方法</h2><p>首先在手机上开启 socks5 代理 127.0.0.1:9999, 然后用 USB 数据线连接 Android 手机和 PC，在 PC 中执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb forward tcp:7890 tcp:9999<br></code></pre></td></tr></table></figure><p>这样会把 PC 127.0.0.1:7890 转发到手机 127.0.0.1:9999</p><p>使用 <code>adb forward --list</code> 查看连接建立情况</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">94e22910</span> tcp:<span class="hljs-number">7890</span> tcp:<span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><p>不需要使用时，可以使用 <code>adb forward --remove</code> 移除转发</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">adb <span class="hljs-keyword">forward</span> --<span class="hljs-keyword">remove</span> tcp:<span class="hljs-number">7890</span><br></code></pre></td></tr></table></figure><p>参考 adb 的帮助，执行命令 <code>adb help</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vim">forward --<span class="hljs-keyword">list</span>           <span class="hljs-keyword">list</span> <span class="hljs-keyword">all</span> forward socket connections<br>forward [--<span class="hljs-keyword">no</span>-rebind] LOCAL REMOTE<br>    forward socket connection using:<br>      tcp:<span class="hljs-symbol">&lt;port&gt;</span> (<span class="hljs-symbol">&lt;local&gt;</span> may <span class="hljs-keyword">be</span> <span class="hljs-string">&quot;tcp:0&quot;</span> <span class="hljs-keyword">to</span> pick any <span class="hljs-keyword">open</span> port)<br>      localabstract:&lt;unix domain socket name&gt;<br>      localreserved:&lt;unix domain socket name&gt;<br>      localfilesystem:&lt;unix domain socket name&gt;<br>      dev:&lt;character device name&gt;<br>      jdwp:&lt;process pid&gt; (remote <span class="hljs-keyword">only</span>)<br>      vsock:<span class="hljs-symbol">&lt;CID&gt;</span>:<span class="hljs-symbol">&lt;port&gt;</span> (remote <span class="hljs-keyword">only</span>)<br>      acceptfd:<span class="hljs-symbol">&lt;fd&gt;</span> (listen <span class="hljs-keyword">only</span>)<br>forward --<span class="hljs-built_in">remove</span> LOCAL   <span class="hljs-built_in">remove</span> specific forward socket connection<br>forward --<span class="hljs-built_in">remove</span>-<span class="hljs-keyword">all</span>     <span class="hljs-built_in">remove</span> <span class="hljs-keyword">all</span> forward socket connections<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] 在 ColorOS 上免 root 玩机，请先打开这个开关 - 克莱德 2021.06.08<br><a href="https://sspai.com/post/67110">https://sspai.com/post/67110</a></p><p>[2] 在 Android 手机上的使用 stunnel - zz 2021.2.24<br><a href="https://www.usmacd.com/cn/android_stunnel/">https://www.usmacd.com/cn/android_stunnel/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在一些特殊的情况下，可能需要使用 Android 手机或者 PC 的线路访问外部网络资源，同时没有条件连接 wifi 网络，这时候可以使用 Android Platform Tools 的 adb 工具来达到目的。&lt;/p&gt;
&lt;p&gt;Android Platform Tools</summary>
      
    
    
    
    
    <category term="Android" scheme="http://usmacd.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>如何写好一篇技术笔记</title>
    <link href="http://usmacd.com/cn/how_to_write_technique_note/"/>
    <id>http://usmacd.com/cn/how_to_write_technique_note/</id>
    <published>2024-02-03T16:00:00.000Z</published>
    <updated>2024-02-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>翻看前些年的笔记，发现笔记内容的详尽程度将决定未来能留下来多少有用的知识。不论记性多好，大多数内容都会随着时间遗忘在历史的长河中。在得到听了很多课程，基本上能记住的不多，最终能用上的可能还是记录下来的一些东西，古人云：「不动笔墨不读书」还是挺有道理的。</p><p>技术笔记和其他的一般笔记不同，详尽程度将决定笔记的质量，有一些十多年前的笔记我现在已经完全看不懂了，有的文档仅仅写了短短几句，明显没有写完，但真的就再也想不起任何内容了。痛定思痛后，我决定总结一篇如何写技术笔记的文章。</p><h2 id="写技术技术记笔记时，应该注意内容"><a href="#写技术技术记笔记时，应该注意内容" class="headerlink" title="写技术技术记笔记时，应该注意内容"></a>写技术技术记笔记时，应该注意内容</h2><p>写详细的记录是为了在若干年后，可以重现所有的操作，如果上下文有丢失，将遇到很大的困难。反复学习，不断迭代，所有的积累才能有效累加，为了达到这个目的，写技术笔记至少需要做到以下几点：</p><ul><li><ol><li>完整性：必须包括原始需求、先验知识、现有解决方案、具体实践、参考文献。</li></ol><ul><li>具体实践包括不但包括成功的经验还包括失败的尝试</li></ul></li><li><ol start="2"><li>严谨性：所有笔记内容都经过验证，包括参考文献中的结论，没有验证过的就说未验证。</li></ol></li><li><ol start="3"><li>可复现：完整展示环境搭建过程，命令行的所有参数，完整的命令行输出，完整的源代码和编译参数。</li></ol></li><li><ol start="4"><li>深入细节：魔鬼都在细节之中。笔记详细说明各种坑点，关键细节的细微差异。</li></ol><ul><li>刨根问底，使用调试器等工具展示底层的细节。</li></ul></li><li><ol start="5"><li>持续性：反复迭代，在自己感兴趣领域的不断积累。</li></ol></li></ul><p>失败的尝试可能是最容易忽略的地方，明明查询了很多资料，尝试了很多不同的方法，最后记录的只有成功的那一条。有一种可能，在极端的情况下，所有的尝试都失败了，是不是就完全放弃了？<br>如果记录了所有失败的尝试，过一段时间后，你可能重新尝试，但有个前提上下文没有丢失，不然很可能重复走上次失败的尝试。</p><h2 id="参考资料的学问"><a href="#参考资料的学问" class="headerlink" title="参考资料的学问"></a>参考资料的学问</h2><p>我以前写参考资料的时候，只有一个链接，总是觉得这样就足够了，最近感觉应该要写个标题，这样一下就可以看出参考资料的主题。但如果只记录参考资料的链接和标题，其实是存在信息缺失的。<br>从技术演进的角度看，文章发表的时间是非常有意义的，从总体上看技术是进步的，我们应该优先学习先进的方法。作者信息则可以让我们认识领域的专家，靠谱的作者的可信度，应该上调一个级别。</p><p>scz 在微博上举例利用参考资料的时间信息，搜索的例子：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">有些十多年前的微软blog，可能形如:<br>h__p://blogs.technet.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">b</span>/<span class="hljs-symbol">&lt;part0&gt;</span>/archive/<span class="hljs-symbol">&lt;year&gt;</span>/<span class="hljs-symbol">&lt;month&gt;</span>/<span class="hljs-symbol">&lt;day&gt;</span>/<span class="hljs-symbol">&lt;part1&gt;</span>.aspx<br>原链接肯定不存在了，其中一部分可以换成下面这种样子去访问<br>h__ps://learn.microsoft.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">en</span>-us/archive/blogs/<span class="hljs-symbol">&lt;part0&gt;</span>/<span class="hljs-symbol">&lt;part1&gt;</span><br></code></pre></td></tr></table></figure><p>所以，参考资料应该记录：标题、作者、日期、链接</p><h2 id="严谨的记录带来一种有序"><a href="#严谨的记录带来一种有序" class="headerlink" title="严谨的记录带来一种有序"></a>严谨的记录带来一种有序</h2><p>严谨的记录是对内心的一种拷问，要求不断地问自己是否真搞清楚了，有没有遗漏前提条件，是否只是某种巧合。严谨的记录带来一种新的有序，不断完善的基础概念，不断增加的各种尝试&#x2F;方法，从而提供跨出知识边界，跳出思维定势的可能性。</p><h2 id="记笔记的态度比笔记方法重要"><a href="#记笔记的态度比笔记方法重要" class="headerlink" title="记笔记的态度比笔记方法重要"></a>记笔记的态度比笔记方法重要</h2><p>笔记是一笔可以积累的财富，认真写笔记可以在未来的时间里获得复利，态度决定一切，这比所谓第二大脑，卡片笔记法都重要。任何可以持续积累并获得进步的习惯应该坚持下去。对于个人成长来说，不断记录，不断总结，不断分析，才能螺旋前进。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以 scz 的话结尾：</p><blockquote><p>若自己写的技术文档三个月之后乃至更长时间跨度，不能指导自己的相关工作，该文档严重不合格。该标准很靠谱，诸君可自行检验。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] 网络安全学习方法之一  scz    2023-09-07 19:43<br>    <a href="https://scz.617.cn/misc/202309071943.txt">https://scz.617.cn/misc/202309071943.txt</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;翻看前些年的笔记，发现笔记内容的详尽程度将决定未来能留下来多少有用的知识。不论记性多好，大多数内容都会随着时间遗忘在历史的长河中。在得到听了很多课程，基本上能记住的不多，最终能用上的可能还是记录下来的一些东西，古人云：「不动笔墨不读书」还是挺有道理的。&lt;/p&gt;
&lt;p&gt;技术笔</summary>
      
    
    
    
    
    <category term="PKM" scheme="http://usmacd.com/tags/PKM/"/>
    
  </entry>
  
  <entry>
    <title>《笔记的方法》 如何做筛选，获取高质量信息</title>
    <link href="http://usmacd.com/cn/how_to_get_good_info/"/>
    <id>http://usmacd.com/cn/how_to_get_good_info/</id>
    <published>2024-01-31T16:00:00.000Z</published>
    <updated>2024-02-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在信息爆炸时代，我觉得研究如何获得有效信息是非常重要的。在《笔记的方法》中，少楠分享了如何获取优质的信息的方法，分别是：</p><ul><li>做减法：削减你的信息</li><li>做加法：添加书本以外的信息源</li><li>做乘法：用多重视角看待信息</li></ul><h2 id="做减法：削减你的信息源"><a href="#做减法：削减你的信息源" class="headerlink" title="做减法：削减你的信息源"></a>做减法：削减你的信息源</h2><p>稀缺的不是信息，而是我们的注意力。我们需要避免信息过载，分散我们的注意力，这样才能专注有价值的信息。</p><h3 id="方法1：削减利用你情绪的信息源"><a href="#方法1：削减利用你情绪的信息源" class="headerlink" title="方法1：削减利用你情绪的信息源"></a>方法1：削减利用你情绪的信息源</h3><ul><li>比如将被 GPT 取代的 30 个岗位，其中有你的吗？</li></ul><h3 id="方法2：削减让自己过于舒适的信息源"><a href="#方法2：削减让自己过于舒适的信息源" class="headerlink" title="方法2：削减让自己过于舒适的信息源"></a>方法2：削减让自己过于舒适的信息源</h3><ul><li>比如没有增量信息，不能带来新知和启发信息源</li><li>观点很熟悉和认同的信息源，容易培养惰性</li></ul><h3 id="方法3：削减缺乏具体事实的信息源"><a href="#方法3：削减缺乏具体事实的信息源" class="headerlink" title="方法3：削减缺乏具体事实的信息源"></a>方法3：削减缺乏具体事实的信息源</h3><ul><li>没有事实依据、大量春秋笔法、不符合基本逻辑的过于主观的观点的信息源</li></ul><h2 id="做加法：添加书本以外的信息源"><a href="#做加法：添加书本以外的信息源" class="headerlink" title="做加法：添加书本以外的信息源"></a>做加法：添加书本以外的信息源</h2><ul><li>书本信息的第一个问题：书本上的知识不够及时，跟不上新技术</li><li>书本信息的第二个问题：书本上学来的大多是理论，理论和实际情况总是有些差别</li></ul><h3 id="方法1：把他人作为信息源，听实践者言"><a href="#方法1：把他人作为信息源，听实践者言" class="headerlink" title="方法1：把他人作为信息源，听实践者言"></a>方法1：把他人作为信息源，听实践者言</h3><ul><li>1）听实践者讲述事实时，注意他在叙述过程中提及的细节。充满细节的事实信息，远比充满戏剧性的宏大叙事更有价值</li><li>2）听实践者讲述事实时，重点听他复盘失败的经历</li><li>3）尽量不要看第三方的叙述，而要看实践者自己写的文章或接受的采访，确保得到一手的信息</li></ul><h3 id="方法2：亲自下场实践"><a href="#方法2：亲自下场实践" class="headerlink" title="方法2：亲自下场实践"></a>方法2：亲自下场实践</h3><ul><li>1）现场观察，现场调研</li><li>2）投入时间，投入金钱，亲身感受</li></ul><h2 id="做乘法：用多重视角看待信息"><a href="#做乘法：用多重视角看待信息" class="headerlink" title="做乘法：用多重视角看待信息"></a>做乘法：用多重视角看待信息</h2><h3 id="方法1-考察概念"><a href="#方法1-考察概念" class="headerlink" title="方法1: 考察概念"></a>方法1: 考察概念</h3><ul><li>向下看，将模糊的概念界定地更清晰，对客观事物、客观事实的认识会更加深入</li></ul><h3 id="方法2-寻找范式"><a href="#方法2-寻找范式" class="headerlink" title="方法2: 寻找范式"></a>方法2: 寻找范式</h3><ul><li>向上看，寻找可迁移范式，抽象一层</li></ul><h3 id="方法3-顺藤摸瓜"><a href="#方法3-顺藤摸瓜" class="headerlink" title="方法3: 顺藤摸瓜"></a>方法3: 顺藤摸瓜</h3><ul><li>向四周看, 找到信息相关联的线索，逐一捋清</li></ul><h2 id="多个独立信息源，交叉验证"><a href="#多个独立信息源，交叉验证" class="headerlink" title="多个独立信息源，交叉验证"></a>多个独立信息源，交叉验证</h2><p>这点是我补充的，独立信息源很重要，有些时候多个地方的信息其实来自同一个信息源，这样的信息仍然是不可靠的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在信息爆炸时代，我觉得研究如何获得有效信息是非常重要的。在《笔记的方法》中，少楠分享了如何获取优质的信息的方法，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;做减法：削减你的信息&lt;/li&gt;
&lt;li&gt;做加法：添加书本以外的信息源&lt;/li&gt;
&lt;li&gt;做乘法：用多重视角看待信息&lt;/li&gt;
</summary>
      
    
    
    
    
    <category term="PKM" scheme="http://usmacd.com/tags/PKM/"/>
    
  </entry>
  
  <entry>
    <title>卡片盒笔记法总体思路与工作流</title>
    <link href="http://usmacd.com/cn/zel_note_flow/"/>
    <id>http://usmacd.com/cn/zel_note_flow/</id>
    <published>2024-01-28T16:00:00.000Z</published>
    <updated>2024-01-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我经常在少数派等网站上看到卡片盒笔记的文章，这些文章少则几千字，多则上万字。过于复杂的方法是很难实践的，我尝试用一种简单的方法把卡片盒笔记法说清楚，希望能给大家带来一些帮助。</p><h2 id="卡片盒笔记法核心要义"><a href="#卡片盒笔记法核心要义" class="headerlink" title="卡片盒笔记法核心要义"></a>卡片盒笔记法核心要义</h2><p>1）用自己的话记录最感兴趣，最有用的知识，记录自己的洞见，而不是单纯记录信息<br>2）处理各种想法，探寻想法之间的关联、冲突、拓展，建立成熟的想法集群，并和其他的想法集群联系在一起<br>3) 针对项目或主题调整笔记顺序，根据笔记的邻近度聚合不同的想法，从更高的思维层次上完成各个想法的再拼图</p><h2 id="卡片盒笔记法的关键思路"><a href="#卡片盒笔记法的关键思路" class="headerlink" title="卡片盒笔记法的关键思路"></a>卡片盒笔记法的关键思路</h2><p>卢曼的卡片盒笔记系统不使用预先设定的系统的次序，不按照主题、子主题的方式存放笔记，而是使用固定编号的系统结构。</p><ul><li>卢曼认为卡片盒笔记系统和我们自己是不断发展的，不可能提前几十年就把笔记束缚在某个次序上。</li><li>使用固定编号的方法，将减少我们安排笔记位置的复杂性，使我们可以创造高度复杂的笔记卡片。</li><li>使用固定编号是任意基于内容的系统结构的抽象，将使我们的卡片和笔记系统达到一个更高类型的秩序。</li></ul><p>卢曼的卡片盒笔记系统使用固定编号的方法标记唯一的一条笔记，这种编号系统有很大的优势。</p><ul><li>固定编号使笔记之间能够相互连接</li><li>固定编号使笔记能够任意的内部分叉 (internal branching)，内部生长 (internal growth)</li></ul><hr><ul><li>57&#x2F;12<ul><li>57&#x2F;12a<ul><li>57&#x2F;12a1</li><li>57&#x2F;12a2</li></ul></li><li>57&#x2F;12b</li></ul></li><li>57&#x2F;13</li></ul><hr><p>由于缺乏系统的顺序，需要维护关键字登记册（Register），登记册用于查找笔记，固定编号对于登记册来说是不可或缺的。(这里说的登记册相当于索引卡片)</p><h2 id="四种不同类型笔记"><a href="#四种不同类型笔记" class="headerlink" title="四种不同类型笔记"></a>四种不同类型笔记</h2><p>闪念笔记 ( fleeting notes )，记录脑海中闪过的想法 （必须拥有随时记录想法的工具）</p><p>文献笔记 ( literature notes )，阅读资料都要记笔记，用自己的话记简要记录不想遗忘的、感兴趣的内容。</p><ul><li>内容要精心选择，引文要格外挑剔</li><li>记录参考资料的细节，利于后期跟踪回顾</li></ul><p>永久笔记 ( permanent notes )，参考前两类笔记，用完整的句子准确记录新的想法</p><ul><li>思考前两类笔记和自己的研究、感兴趣的内容，和近期的思考是否有关联</li><li>新输入的信息是否和以前记录的信息或者脑海里的想法有矛盾，互相印证，或者产生了新的想法。新想法是否又引出了什么新问题？</li><li>用完整的句子准确记录新的想法，标注来源和参考资料，做到精确、清晰、简短。</li></ul><p>项目笔记 ( project notes ), 项目笔记只和某个特定的项目有关，项目结束后可以归档或者丢弃</p><ul><li>待办事项、备忘录、文献收集、草稿片段和手稿评论等</li></ul><h2 id="四种不同类型的索引卡片"><a href="#四种不同类型的索引卡片" class="headerlink" title="四种不同类型的索引卡片"></a>四种不同类型的索引卡片</h2><ul><li>主题索引，汇集所有主题相关的笔记，每条笔记用几个关键词简要说明核心内容</li><li>卡片索引，逻辑相关笔记的前一条和后一条，这些笔记可能并不相互邻近</li><li>关联索引，位置相近的不同主题的概览，这些笔记可能具有相同的某个更大主题</li><li>双向索引，两条笔记可以完全没有关系，关联到一起却有可能出现预想不到的效果</li></ul><h2 id="卡片盒笔记法工作流-workflow"><a href="#卡片盒笔记法工作流-workflow" class="headerlink" title="卡片盒笔记法工作流 (workflow)"></a>卡片盒笔记法工作流 (workflow)</h2><h3 id="步骤1：收集资料，写资源笔记"><a href="#步骤1：收集资料，写资源笔记" class="headerlink" title="步骤1：收集资料，写资源笔记"></a>步骤1：收集资料，写资源笔记</h3><ul><li>关注 P.A.R.A 里 Areas 里的领域和 Resources 里感兴趣主题相关的书籍、文章、论文等资料，将他们保存到资料库</li><li>一份资料写一条资源笔记 (block)，在资源笔记中链接原始出处</li></ul><h3 id="步骤2：捕捉灵感，写闪念笔记"><a href="#步骤2：捕捉灵感，写闪念笔记" class="headerlink" title="步骤2：捕捉灵感，写闪念笔记"></a>步骤2：捕捉灵感，写闪念笔记</h3><ul><li>我们可以使用快速笔记软件简要记录飞逝的灵感，在时间紧迫的情况下可以只记录关键字。</li></ul><h3 id="步骤3：阅读资料，写引文笔记"><a href="#步骤3：阅读资料，写引文笔记" class="headerlink" title="步骤3：阅读资料，写引文笔记"></a>步骤3：阅读资料，写引文笔记</h3><ul><li>我们在阅读资料时为每一份资源创建一个页面 (page)，在这个页面中链接原始的资源笔记</li><li>在阅读资料时将感兴趣的引文加粗 ，将加粗后的引文保存在为资料创建的的页面里</li><li>在阅读资料时将最好的引文高亮，这样的引文是加粗的并且是高亮的</li></ul><h3 id="步骤4：参考引文笔记，写文献笔记"><a href="#步骤4：参考引文笔记，写文献笔记" class="headerlink" title="步骤4：参考引文笔记，写文献笔记"></a>步骤4：参考引文笔记，写文献笔记</h3><ul><li>参考引文笔记写文献笔记，做到精简摘要的核心原则：原子原则，用自己的话，保留上下文</li><li>将文献笔记和参考的引文原文 block 做连接</li></ul><h3 id="步骤5：参考闪念笔记和文献笔记，写永久笔记"><a href="#步骤5：参考闪念笔记和文献笔记，写永久笔记" class="headerlink" title="步骤5：参考闪念笔记和文献笔记，写永久笔记"></a>步骤5：参考闪念笔记和文献笔记，写永久笔记</h3><ul><li>参考闪念笔记和文献笔记写永久笔记，永久笔记需要用完整的句子记录新的想法 (洞见)。</li><li>将永久笔记和文献笔记做链接，将永久笔记和其他永久笔记做链接</li><li>如果写永久笔记时参考了闪念笔记，将闪念笔记归档或者删除</li></ul><h3 id="步骤6：参考永久笔记，写-MOCs-笔记"><a href="#步骤6：参考永久笔记，写-MOCs-笔记" class="headerlink" title="步骤6：参考永久笔记，写 MOCs 笔记"></a>步骤6：参考永久笔记，写 MOCs 笔记</h3><ul><li>当永久笔记积累到一定数量，基于永久笔记的内容邻近度使用 MOCs 自顶向下组织相关内容</li></ul><h3 id="步骤7：定期漫游笔记-Random-Notes"><a href="#步骤7：定期漫游笔记-Random-Notes" class="headerlink" title="步骤7：定期漫游笔记 (Random Notes)"></a>步骤7：定期漫游笔记 (Random Notes)</h3><ul><li>在漫游笔记过程中用新视角去审视旧想法，不断迭代自已的想法，螺旋前进。</li></ul><h3 id="步骤8：定期制作索引卡片"><a href="#步骤8：定期制作索引卡片" class="headerlink" title="步骤8：定期制作索引卡片"></a>步骤8：定期制作索引卡片</h3><ul><li>为了能够方便的索引我们的笔记，需要制作索引卡片，按照不同的主题整理。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p>定期回顾笔记的好处<br><a href="https://www.usmacd.com/cn/note_review/">https://www.usmacd.com/cn/note_review/</a></p></li><li><p>关于笔记的一些思考<br><a href="https://www.usmacd.com/cn/note/">https://www.usmacd.com/cn/note/</a></p></li><li><p>Communicating with slip boxes - Niklas Luhmann<br><a href="https://luhmann.surge.sh/communicating-with-slip-boxes">https://luhmann.surge.sh/communicating-with-slip-boxes</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我经常在少数派等网站上看到卡片盒笔记的文章，这些文章少则几千字，多则上万字。过于复杂的方法是很难实践的，我尝试用一种简单的方法把卡片盒笔记法说清楚，希望能给大家带来一些帮助。&lt;/p&gt;
&lt;h2 id=&quot;卡片盒笔记法核心要义&quot;&gt;&lt;a href=&quot;#卡片盒笔记法核心要义&quot; cla</summary>
      
    
    
    
    
    <category term="PKM" scheme="http://usmacd.com/tags/PKM/"/>
    
  </entry>
  
  <entry>
    <title>python3 pip loading egg is deprecated 警告的解决方法</title>
    <link href="http://usmacd.com/cn/egg-is-deprecated/"/>
    <id>http://usmacd.com/cn/egg-is-deprecated/</id>
    <published>2024-01-16T16:00:00.000Z</published>
    <updated>2024-02-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决-egg-is-deprecation-警告"><a href="#解决-egg-is-deprecation-警告" class="headerlink" title="解决 egg is deprecation 警告"></a>解决 egg is deprecation 警告</h2><p>python3 -m pip install some_package 时发现 exploitable 有警告：</p><blockquote><p>DEPRECATION: Loading egg at exploitable-1.32-py3.12.egg is deprecated. pip 24.3 will enforce this behaviour change. A possible replacement is to use pip for package installation.<br>Discussion can be found at <a href="https://github.com/pypa/pip/issues/12330">https://github.com/pypa/pip/issues/12330</a></p></blockquote><p>pip 24.3 将废弃 egg 形式的 python package, 根据 github issue [1] 的信息 pip 24.3 将在 October 2024 发布。可以使用下面的方法，要去掉上面的警告信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br><span class="hljs-built_in">cd</span> exploitable_src_dir<br><br><span class="hljs-comment"># 删除老的 build 结果</span><br><span class="hljs-built_in">rm</span> -rf build dist htmlcov *.egg-info<br><br><span class="hljs-comment"># 升级 pip</span><br>python3 -m pip install --upgrade build<br><br><span class="hljs-comment"># 重新 build</span><br>python3 -m build --wheel<br><br><span class="hljs-comment"># 使用 wheel 的方式安装</span><br>python3 -m pip install . --user<br><br></code></pre></td></tr></table></figure><p>一般情况下，不用重新写 pyproject.toml ，执行上面命令就可以了。</p><h2 id="在-Wheel-中添加二进制文件的方法"><a href="#在-Wheel-中添加二进制文件的方法" class="headerlink" title="在 Wheel 中添加二进制文件的方法"></a>在 Wheel 中添加二进制文件的方法</h2><p>根据python 官方的文档，MANIFEST.in 只对 source distributions (sdist) 起作用。</p><blockquote><p>MANIFEST.in does not affect binary distributions such as wheels.</p></blockquote><p>要想给 wheel 添加非纯 python 的文件，有一些困难，主要是一些使用 Extension 的 Python Package 会遇上这个问题。通过研究发现，可以控制 <code>setup.py bdist_wheel</code> 的参数达到打包so 文件的效果。</p><p>执行 <code>python3 setup.py bdist_wheel --help</code> ，可以看到详细的参数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">Options <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;bdist_wheel&#x27;</span> command:<br>  <span class="hljs-comment">--bdist-dir (-b)  temporary directory for creating the distribution</span><br>  <span class="hljs-comment">--plat-name (-p)  platform name to embed in generated filenames (default:</span><br>                    linux_x86_64)<br>  <span class="hljs-comment">--keep-temp (-k)  keep the pseudo-installation tree around after creating</span><br>                    the distribution archive<br>  <span class="hljs-comment">--dist-dir (-d)   directory to put final built distributions in</span><br>  <span class="hljs-comment">--skip-build      skip rebuilding everything (for testing/debugging)</span><br>  <span class="hljs-comment">--relative        build the archive using relative paths (default: false)</span><br>  <span class="hljs-comment">--owner (-u)      Owner name used when creating a tar file [default: current</span><br>                    <span class="hljs-keyword">user</span>]<br>  <span class="hljs-comment">--group (-g)      Group name used when creating a tar file [default: current</span><br>                    <span class="hljs-keyword">group</span>]<br>  <span class="hljs-comment">--universal       make a universal wheel (default: false)</span><br>  <span class="hljs-comment">--compression     zipfile compression (one of: stored, deflated) (default:</span><br>                    <span class="hljs-string">&#x27;deflated&#x27;</span>)<br>  <span class="hljs-comment">--python-tag      Python implementation compatibility tag (default: &#x27;py3&#x27;)</span><br>  <span class="hljs-comment">--build-number    Build number for this particular version. As specified in</span><br>                    PEP<span class="hljs-number">-0427</span>, this must <span class="hljs-keyword">start</span> <span class="hljs-keyword">with</span> a digit. [<span class="hljs-keyword">default</span>: <span class="hljs-keyword">None</span>]<br>  <span class="hljs-comment">--py-limited-api  Python tag (cp32|cp33|cpNN) for abi3 wheel tag (default:</span><br>                    <span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><p>利用<code>--bdist-dir</code> 参数，修改生成wheel distributions 的目录可以达到目的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> setuptools <span class="hljs-keyword">import</span> setup, Extension, find_packages<br><br>lib_name = Extension()<br>setup(name=<span class="hljs-string">&#x27;package_name&#x27;</span>,<br>      packages=find_packages(),<br>      package_data=&#123;<span class="hljs-string">&#x27;&#x27;</span>: [<span class="hljs-string">&#x27;*.so&#x27;</span>]&#125;,<br>      include_package_data=<span class="hljs-literal">True</span>,<br>      ...,<br>      ext_modules=[lib_name],<br>      options=&#123;<br>          <span class="hljs-string">&#x27;bdist_wheel&#x27;</span>: &#123;<span class="hljs-string">&#x27;python_tag&#x27;</span>: <span class="hljs-string">&#x27;cp30&#x27;</span>, <span class="hljs-string">&#x27;py_limited_api&#x27;</span>: <span class="hljs-string">&#x27;cp32&#x27;</span>, <span class="hljs-string">&#x27;bdist_dir&#x27;</span>: <span class="hljs-string">&#x27;build&#x27;</span>&#125;,<br>          <span class="hljs-string">&#x27;build_ext&#x27;</span>: &#123;<span class="hljs-string">&#x27;build_lib&#x27;</span>: <span class="hljs-string">&#x27;build/package_name&#x27;</span>&#125;,<br>      &#125;<br>)<br></code></pre></td></tr></table></figure><p>修改 setup.py 后，重新执行 <code>python3 -m build --wheel</code> 即可。</p><h2 id="参考信息"><a href="#参考信息" class="headerlink" title="参考信息"></a>参考信息</h2><p>[1] <a href="https://github.com/pypa/pip/issues/12330">Remove support for installed .egg distributions</a><br>[2] <a href="https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-your-project-to-pypi">Packaging Python Projects</a><br>[3] <a href="https://docs.python.org/3.11/distutils/setupscript.html">Writing the Setup Script</a><br>[4] <a href="https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/">Packaging and distributing projects</a><br>[5] <a href="https://buildmedia.readthedocs.org/media/pdf/wheel/stable/wheel.pdf">wheel Documentation</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解决-egg-is-deprecation-警告&quot;&gt;&lt;a href=&quot;#解决-egg-is-deprecation-警告&quot; class=&quot;headerlink&quot; title=&quot;解决 egg is deprecation 警告&quot;&gt;&lt;/a&gt;解决 egg is depr</summary>
      
    
    
    
    
    <category term="Programming" scheme="http://usmacd.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>公开写作的好处和坚持不懈</title>
    <link href="http://usmacd.com/cn/public_writing/"/>
    <id>http://usmacd.com/cn/public_writing/</id>
    <published>2023-12-04T16:00:00.000Z</published>
    <updated>2023-12-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="公开写作的好处"><a href="#公开写作的好处" class="headerlink" title="公开写作的好处"></a>公开写作的好处</h2><p>只有将想法写出来的时候，你才会发现似乎严密的论证中的逻辑漏洞和无知之处，不动笔的思考往往马虎。</p><ul><li>写下你学习的东西，可以加深你对该主题的理解，有时候向别人解释时你会发现自己的知识缺口。写作不仅是一个记录的方法，它是一个加深理解和暴露知识差距的强大工具。</li><li>写作使我们更加彻底地探索主题，并以更加连贯和准确的方式清晰地表达自己的想法。</li></ul><h2 id="坚持不懈（Consistency）的重要性"><a href="#坚持不懈（Consistency）的重要性" class="headerlink" title="坚持不懈（Consistency）的重要性"></a>坚持不懈（Consistency）的重要性</h2><p>虽然动机可能会点燃写作或任何其他创造性活动的兴趣火花，但真正点燃成功之火的是持续性。</p><ul><li>构建习惯：坚持不懈有利于习惯的建立。习惯一旦建立，将形成自动的行为，需要更少的努力保持行为模式，同时更加自然并享受其中的过程</li><li>逐步提高：持续练习可以带来逐步的提高，每次练习可能获得一个很小的进步，但拉长时间看，微小的进步会积累成显著的进步</li><li>保持动力：坚持不懈有助于保持动力。定期参加练习可以不断获得灵感，并形成肌肉记忆，显著减小开始练习时的阻力。</li><li>达到长期目标：成功通常是长期持续努力的结果。坚持不懈将日常行动和长期目标结合起来，创建一条通往成功之路。</li></ul><h2 id="坚持不懈的挑战"><a href="#坚持不懈的挑战" class="headerlink" title="坚持不懈的挑战"></a>坚持不懈的挑战</h2><ul><li>克服拖延症：拖延是坚持不懈最大的障碍，制定一个有规律的时间计划表，创造一个有利的环境，都有助于克服拖延这一挑战</li><li>处理倦怠：坚持不懈并不是不休息，平衡的生活是防止倦怠的关键，休息和充电与奋力向前同样重要</li><li>管理预期：并不是每一次练习都可以获得丰硕的成果，拥抱不完美，不要太过关注直接的成果，这样才能和坚持不懈的努力建立健康的关系。</li></ul><h2 id="保持坚持不懈的策略"><a href="#保持坚持不懈的策略" class="headerlink" title="保持坚持不懈的策略"></a>保持坚持不懈的策略</h2><ul><li>设定现实的目标： 将长期目标分解成较小的、可实现的阶段性目标，注重取得的进步而非过程完美</li><li>创建例程：创建固定的例程，创建保持坚持不懈的日常安排</li><li>寻求责任感：和朋友分享你的目标或者加入群组，从别人那里获得鼓励和责任感</li><li>庆祝进步：认可并庆祝取得的进步，哪怕是微小的进步，也能产生积极的正反馈，激发继续前进的动力</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://addyosmani.com/blog/write-learn/">https://addyosmani.com/blog/write-learn/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;公开写作的好处&quot;&gt;&lt;a href=&quot;#公开写作的好处&quot; class=&quot;headerlink&quot; title=&quot;公开写作的好处&quot;&gt;&lt;/a&gt;公开写作的好处&lt;/h2&gt;&lt;p&gt;只有将想法写出来的时候，你才会发现似乎严密的论证中的逻辑漏洞和无知之处，不动笔的思考往往马虎。&lt;/p</summary>
      
    
    
    
    
    <category term="KNOWLEDGE" scheme="http://usmacd.com/tags/KNOWLEDGE/"/>
    
  </entry>
  
  <entry>
    <title>VMware Workstation Windows 10 host Ubuntu 18.04 Guest 中加载 Linux 内核 kvm 模块</title>
    <link href="http://usmacd.com/cn/qemu_kvm/"/>
    <id>http://usmacd.com/cn/qemu_kvm/</id>
    <published>2023-11-27T16:00:00.000Z</published>
    <updated>2023-11-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里在 VMware Workstation Guset OS 里使用 qemu 的用法，有点像俄罗斯套娃。</p><p>qemu.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">qemu-system-x86_64 \<br>  -m 2G \<br>  -smp 2 \<br>  -kernel <span class="hljs-variable">$KERNEL</span>/arch/x86——64/boot/bzImage \<br>  -append <span class="hljs-string">&quot;console=ttyS0 root=/dev/sda earlyprintk=serial net.ifnames=0&quot;</span> \<br>  -drive file=<span class="hljs-variable">$IMAGE</span>/bullseye.img,format=raw \<br>  -net user,host=10.0.2.10,hostfwd=tcp:127.0.0.1:10021-:22 \<br>  -net nic,model=e1000 \<br>  -enable-kvm \<br>  -nographic \<br>  -pidfile vm.pid \<br>  2&gt;&amp;1 | <span class="hljs-built_in">tee</span> vm.log<br></code></pre></td></tr></table></figure><p>执行命令后 <code>bash ./qemu.sh</code> 后报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">Could not access KVM kernel module: No such file or directory. <br>qemu-system-x86_64: failed to initialize KVM: No such file or directory<br></code></pre></td></tr></table></figure><h2 id="解决-failed-to-initialize-KVM-错误"><a href="#解决-failed-to-initialize-KVM-错误" class="headerlink" title="解决 failed to initialize KVM 错误"></a>解决 failed to initialize KVM 错误</h2><p><code>lsmod | grep -i kvm</code> 发现没有加载 kvm 内核模块</p><p>使用 kvm-ok 检查具体情况。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo /usr/sbin/kvm-ok<br><br>INFO: Your CPU does not support KVM extension<br>KVM acceleration can NOT be used<br></code></pre></td></tr></table></figure><p>首先检查 VMware Workstation 的设置，发现处理器没有勾选虚拟化相关的设置。</p><ul><li>关机，调整 VMware 设置，设置 -&gt; 硬件 -&gt; 处理器 -&gt; 虚拟化引擎 -&gt; 选择 虚拟化 Intel VT-x &#x2F; EPT 或 AMD-V &#x2F; RVI</li></ul><p>重新打开 Ubuntu Guest 虚拟机报错 <code>此平台不支持虚拟化的Intel VT-x/EPT</code></p><h2 id="解决此平台不支持虚拟化的Intel-VT-x-EPT"><a href="#解决此平台不支持虚拟化的Intel-VT-x-EPT" class="headerlink" title="解决此平台不支持虚拟化的Intel VT-x&#x2F;EPT"></a>解决此平台不支持虚拟化的Intel VT-x&#x2F;EPT</h2><p>首先检查 BIOS 的设置是否正确，任务右键打开任务管理器 -&gt; 性能 -&gt; CPU 右下角，虚拟化：已启用，说明 BIOS 设置没有问题。</p><p>网络上的资料说需要禁用 Hyper-V，使用命令行的方法比较方便。</p><ul><li>以管理员权限打开 CMD 执行命令 <code>bcdedit /set hypervisorlaunchtype off</code> 关闭 hypervisorlaunchtype，重启系统</li></ul><p>重新执行 <code>/usr/sbin/kvm-ok</code> 显示一切正常</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">INFO:</span> <span class="hljs-keyword">/dev/</span>kvm exists<br>KVM acceleration can be used<br></code></pre></td></tr></table></figure><p><code>egrep &quot;vmx|svm&quot; /proc/cpuinfo</code> 匹配 vmx，<code>lsmod | grep -i kvm</code> 显示加载了 <code>kvm_intel</code> 和 <code>kvm</code> 内核模块。</p><p>重新验证 Ubuntu Guest 里 qemu 是否正常工作，执行执行 qemu.sh，报错 <code>Could not access KVM kernel module: Permission denied</code></p><h2 id="解决-failed-to-initialize-KVM-Permission-denied"><a href="#解决-failed-to-initialize-KVM-Permission-denied" class="headerlink" title="解决 failed to initialize KVM: Permission denied"></a>解决 failed to initialize KVM: Permission denied</h2><p>看上去是权限问题，将当前用户添加在 kvm 组，<code>sudo usermod -a -G kvm &quot;test&quot;</code>，重启系统，执行 <code>bash ./qemu.sh</code> 成功启动</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">early <span class="hljs-built_in">console</span> in setup code<br>early <span class="hljs-built_in">console</span> in extract_kerne<br>...<br></code></pre></td></tr></table></figure><p>此文档可能有不完备之处，后续会继续更新此文档。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.xda-developers.com/disable-hyper-v-windows-11/">https://www.xda-developers.com/disable-hyper-v-windows-11/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里在 VMware Workstation Guset OS 里使用 qemu 的用法，有点像俄罗斯套娃。&lt;/p&gt;
&lt;p&gt;qemu.sh&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    
    <category term="linux" scheme="http://usmacd.com/tags/linux/"/>
    
    <category term="Security" scheme="http://usmacd.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>comprehensible input  英语学习方法</title>
    <link href="http://usmacd.com/cn/learning_english/"/>
    <id>http://usmacd.com/cn/learning_english/</id>
    <published>2023-11-22T16:00:00.000Z</published>
    <updated>2023-11-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>youtube 上有 youtuber 在不出国的情况下，将第二外语学习到母语者水平的成功案例。</p><p>Makoto 是一位会说中日英三门语言的 Youtuber，他总结自己学习第二外语的成功经验，可以简单地归纳成一句话：掌握第二外语最重要的是必须有大量地道的 comprehensible input (可理解的输入)。</p><p>Comprehensible input 是 Stephen D. Krashen 提出的语言习得假说，强调语言学习是获得的，而不是通过学习得到的。听力或者阅读获取的内容都可以是有效的输入，获取内容的语言难度必须略高于学习者的水平。</p><p>多大的地道语言输入量才是合适的 ？Makoto 推荐的时长为 1 个小时，30 分钟后休息 5 分钟，然后再继续下一个 30 分钟的学习。</p><p>Youtuber Makoto comprehensible input 英语学习具体步骤：<br>1）使用传统的学习方法，掌握 2000 个单词<br>2）在 youtube 上看视频，打开字幕边看边听，接受一些搞不懂的内容 (如果大量单词不认识就放弃)<br>3）在 youtube 上看视频，如果难度不够 (能听懂 80%以上)，就提高难度<br>4）将口语练习放到最后的步骤，只有输入够了，才能说出地道的外语</p><p>从理解内容到流利地说还有一段距离，Makoto 使用的方法是付费真人聊天，算是比较常规的方法。详细内容可以参考原视频。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;youtube 上有 youtuber 在不出国的情况下，将第二外语学习到母语者水平的成功案例。&lt;/p&gt;
&lt;p&gt;Makoto 是一位会说中日英三门语言的 Youtuber，他总结自己学习第二外语的成功经验，可以简单地归纳成一句话：掌握第二外语最重要的是必须有大量地道的 co</summary>
      
    
    
    
    
    <category term="KNOWLEDGE" scheme="http://usmacd.com/tags/KNOWLEDGE/"/>
    
  </entry>
  
</feed>
