<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>安全代码</title>
  
  <subtitle>关注科技、投资、健康，和个人成长</subtitle>
  <link href="https://usmacd.com/atom.xml" rel="self"/>
  
  <link href="https://usmacd.com/"/>
  <updated>2024-09-24T16:00:00.000Z</updated>
  <id>https://usmacd.com/</id>
  
  <author>
    <name>henices</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何破除写博客的焦虑</title>
    <link href="https://usmacd.com/cn/write_blog_afraid/"/>
    <id>https://usmacd.com/cn/write_blog_afraid/</id>
    <published>2024-09-24T16:00:00.000Z</published>
    <updated>2024-09-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>中文独立博客犹如互联网上的一道靓丽风景线，众多博主在这片天地里记录人生百态，分享精彩纷呈的生活点滴。</p><p>从 Google Reader 开始，我用 RSS 订阅了很多中文独立博客。然而，如今能看到更新的博文寥寥无几，大多数博客陷入了长久的沉寂。</p><p>更糟糕的是，我的订阅列表中，越来越多的博客链接已经无法访问。</p><p>前不久，我在”积薪”平台上读到一篇有关博客写作的文章，引发了我的一些思考，跟大家分享一些我的看法。</p><p>比较尴尬的是，积薪也没法访问了 …</p><p>《写博客的焦虑》</p><p><a href="https://homura.live/2023/11/22/Other/anxiety-of-blogging/">https://homura.live/2023/11/22/Other/anxiety-of-blogging/</a></p><p>作者 Homura 总结写博客的焦虑有下面几点：</p><p>负面想法很重，想一些负面的东西要不要写</p><p>纠结要不要放上去，有的内容因为比较短，有的内容因为不那么“好”</p><p>自己的想法太少</p><p>觉得自己内容不佳，觉得自己水平不佳</p><p>想写好文章：具体点来说就是“内容长”，”看起来高深“，这种看起来好的内容</p><p>最后，发出感叹「我何时才能真正能写出好文章呢？」。</p><p>homura 写博客遇到的困难，我总结下来有 4 个，选题困难、篇幅较短、内容不佳、想写好文章。</p><h2 id="选题困难"><a href="#选题困难" class="headerlink" title="选题困难"></a>选题困难</h2><p>博客选题是有点困难，但也好解决。</p><p>在 @3 如何讲好一个故事 中分享了三种故事，你自己的故事，别人的故事，某个品牌或产品的故事。</p><p>独立博客当然最适合讲自己的故事，你的旅游见闻，你的读书心得，你的技术见解。</p><p>还有一个简单的标准，你写的文章能不能给别人带来一些帮助，哪怕是很小的一个人群。</p><p>纯笔记的技术类博客文章，我不建议写。</p><p>软件下载、安装、编译这些简单步骤，直接参考官方文档或 Github README 是更好的选择。</p><p>技术类的文章，要写搜索引擎无法简单找到答案的内容。</p><h2 id="篇幅较短"><a href="#篇幅较短" class="headerlink" title="篇幅较短"></a>篇幅较短</h2><p>这可能是对写博客最大的误解了。</p><p>文章的好坏和篇幅的长短没有绝对关系 ，重要的是你想表达什么观点，这些观点是否有证据支撑。</p><p>我经常看到大几千字的文章，却很难从里面提炼出作者想表达的重要观点。</p><p>Owen 博客的 短想法 页面，我就很喜欢。简短精炼的文字，反而更能引发深刻的思考。</p><p>不用过于追求深度长文，思考的内容多，文章的字数就多，这是自然的过程。</p><p>我们更需要清晰地表达，内容质量才是文章好坏的决定性因素。</p><h2 id="内容不佳"><a href="#内容不佳" class="headerlink" title="内容不佳"></a>内容不佳</h2><p>我从 2000 年左右开始写博客，向来没有觉得写文章有压力，总结起来有下面几点：</p><p>第一，觉得自己比较菜，得向前辈学习</p><p>第二，觉得自己的观点有偏见，希望大家可以指导我</p><p>第三，秉承互联网的分享精神，能分享就尽量分享</p><p>以学习和分享的心态写博客，尽力做到自己的最好水平就行。</p><p>大多数人写博客都是从水平不高开始的，只要坚持输出，一段时间后内容的水平就会慢慢提高。</p><p>尽你最大的努力去做到正确，但当你出错时也不要担心。</p><h2 id="想写好文章"><a href="#想写好文章" class="headerlink" title="想写好文章"></a>想写好文章</h2><p>日常写的文章也就是自己的日常水平，正常发挥即可。</p><p>写文章是为了提高自己的水平和能力，为自己而写，别人眼里的好和坏和自己关系不大。</p><p>从方法论上讲，读书学习是输入，写文章是输出，两者相辅相成。</p><p>文章的好坏由两方面决定，第一内容是否好，第二表达是否好。</p><p>表达可以通过刻意练习来提高。</p><p>内容质量的提高，唯有大量的输入、学习、总结才能做到，同样没有捷径。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>为什么要写博客是一个重要的动机问题。内在动机的基础因素有五个：好奇心、激情、目标、掌控感、自主权。</p><p>个人独立博客，自主权和掌控感得到极大满足，你有排版的自由，内容选择的自由，这也就是大家喜欢折腾博客系统的原因。</p><p>但是，好奇心和目标两个动机因素的作用时间更长，也是决定能否持续做一件事的关键。</p><p>我写博客是受到业内一位前辈的影响，他有着传统互联网分享精神的理想主义情怀，我希望这种分享精神能传承下去。</p><p>对长期分享的朋友，我心存感激，他们是值得敬佩的人。</p><p>写博客要有一定的表达欲望和分享精神，只有这样的文字大家才会爱看。</p><p>翻看 Homura 的博客，他还在坚持更新，希望他能继续坚持下去。</p><div class="note note-info">            <p>本文来自 「曼福吉的分享」<a href="https://xiaobot.net/p/MindForge">https://xiaobot.net/p/MindForge</a> 小报童专栏 </p><p>详情请见：<a href="https://www.usmacd.com/cn/share_knowledge/">付费专栏：《曼福吉的分享》</a></p>          </div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;中文独立博客犹如互联网上的一道靓丽风景线，众多博主在这片天地里记录人生百态，分享精彩纷呈的生活点滴。&lt;/p&gt;
&lt;p&gt;从 Google Reader 开始，我用 RSS 订阅了很多中文独立博客。然而，如今能看到更新的博文寥寥无几，大多数博客陷入了长久的沉寂。&lt;/p&gt;
&lt;p&gt;更</summary>
      
    
    
    
    
    <category term="KNOWLEDGE" scheme="https://usmacd.com/tags/KNOWLEDGE/"/>
    
    <category term="PMK" scheme="https://usmacd.com/tags/PMK/"/>
    
  </entry>
  
  <entry>
    <title>50 行代码打造全本地的 RAG 知识检索系统</title>
    <link href="https://usmacd.com/cn/local_rag_llamaindex/"/>
    <id>https://usmacd.com/cn/local_rag_llamaindex/</id>
    <published>2024-09-22T16:00:00.000Z</published>
    <updated>2024-09-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>非常粗糙的示例代码，使用 Ollama 和 LlamaIndex 打造全本地的知识检索系统。</p><p>LlamaIndex 的安装方法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">python3 -m venv .venv<br><span class="hljs-built_in">source</span> .venv/bin/activate<br>pip3 install llama-index<br>pip3 install llama-index-llms-ollama <br>pip3 install llama-index-embeddings-huggingface<br>pip3 install llama-index-embeddings-ollama<br></code></pre></td></tr></table></figure><p>Ollama 的安装可以参考：<a href="https://www.usmacd.com/cn/Debian_Nvidia_Ollama/">Debian 12 安装 Nvidia 驱动和 Ollama</a></p><p>在例子中，检索目标为 markdown 格式的笔记，供参考。</p><p>使用方法：<code>python3 rag_query.py &quot;分析全部文本内容，分点列出个人成长的建议&quot;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#! /usr/bin/python3</span><br><span class="hljs-comment">#coding: utf-8;</span><br><span class="hljs-comment"># author: @henices</span><br><br><span class="hljs-keyword">from</span> llama_index.core.node_parser <span class="hljs-keyword">import</span> MarkdownNodeParser, SimpleFileNodeParser, MarkdownElementNodeParser<br><span class="hljs-keyword">from</span> llama_index.readers.file <span class="hljs-keyword">import</span> FlatReader<br><span class="hljs-keyword">from</span> llama_index.core <span class="hljs-keyword">import</span> VectorStoreIndex<br><span class="hljs-keyword">from</span> llama_index.core <span class="hljs-keyword">import</span> Settings<br><span class="hljs-keyword">from</span> llama_index.llms.ollama <span class="hljs-keyword">import</span> Ollama<br><br><span class="hljs-comment">#from llama_index.embeddings.huggingface import HuggingFaceEmbedding</span><br><span class="hljs-keyword">from</span> llama_index.embeddings.ollama <span class="hljs-keyword">import</span> OllamaEmbedding<br><br><span class="hljs-keyword">from</span> llama_index.core <span class="hljs-keyword">import</span> SimpleDirectoryReader<br><span class="hljs-keyword">from</span> llama_index.core <span class="hljs-keyword">import</span> StorageContext, load_index_from_storage<br><br><span class="hljs-keyword">from</span> llama_index.core <span class="hljs-keyword">import</span> get_response_synthesizer<br><span class="hljs-keyword">from</span> llama_index.core.response_synthesizers <span class="hljs-keyword">import</span> ResponseMode<br><br><br><span class="hljs-keyword">import</span> llama_index.core<br>llama_index.core.set_global_handler(<span class="hljs-string">&quot;simple&quot;</span>)<br><br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br><span class="hljs-keyword">import</span> pprint<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os.path<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><br>    logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)<br>    logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))<br><br>    ollama_embedding = OllamaEmbedding(<br>        model_name=<span class="hljs-string">&quot;bge-m3&quot;</span>,<br>        base_url=<span class="hljs-string">&quot;http://127.0.0.1:11434&quot;</span>,<br>    )<br>    <span class="hljs-comment">#Settings.embed_model = HuggingFaceEmbedding(model_name=&quot;BAAI/bge-base-en-v1.5&quot;)</span><br>    Settings.embed_model = ollama_embedding<br><br>    Settings.llm = Ollama(<br>            model=<span class="hljs-string">&quot;qwen2.5:14b-instruct-fp16&quot;</span>,<br>            request_timeout=<span class="hljs-number">60.0</span>*<span class="hljs-number">5</span>)<br><br>    Settings.chunk_size = <span class="hljs-number">512</span><br>    Settings.chunk_overlap = <span class="hljs-number">50</span><br><br><br>    <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&#x27;./storage&#x27;</span>):<br>        storage_context = StorageContext.from_defaults(persist_dir=<span class="hljs-string">&quot;./storage&quot;</span>)<br>        index = load_index_from_storage(storage_context)<br><br>    <span class="hljs-keyword">else</span>:<br><br>        parser = MarkdownNodeParser()<br>        md_docs = SimpleDirectoryReader(<span class="hljs-string">&quot;data&quot;</span>).load_data()<br>        nodes = parser.get_nodes_from_documents(md_docs)<br><br>        index = VectorStoreIndex(nodes)<br><br>        index.storage_context.persist(persist_dir=<span class="hljs-string">&quot;./storage&quot;</span>)<br><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;finish index&#x27;</span>)<br><br>    response_synthesizer = get_response_synthesizer(<br>            streaming=<span class="hljs-literal">True</span>,<br>            response_mode=ResponseMode.SIMPLE_SUMMARIZE)<br>    query_engine = index.as_query_engine(<br>            response_synthesizer=response_synthesizer, similarity_top_k=<span class="hljs-number">10</span>, similarity_cutoff=<span class="hljs-number">0.5</span>)<br><br>    streaming_response = query_engine.query(sys.argv[<span class="hljs-number">1</span>])<br>    <span class="hljs-built_in">print</span>(streaming_response.print_response_stream())<br><br>    <span class="hljs-keyword">for</span> idx, node <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(streaming_response.source_nodes):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%d=========\n&#x27;</span> % idx)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s\n\n&#x27;</span> % node.text)<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/ollama/ollama">https://github.com/ollama/ollama</a></li><li><a href="https://github.com/run-llama/llama_index">https://github.com/run-llama/llama_index</a></li><li><a href="https://docs.llamaindex.ai/en/stable/">https://docs.llamaindex.ai/en/stable/</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;非常粗糙的示例代码，使用 Ollama 和 LlamaIndex 打造全本地的知识检索系统。&lt;/p&gt;
&lt;p&gt;LlamaIndex 的安装方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;</summary>
      
    
    
    
    
    <category term="ai" scheme="https://usmacd.com/tags/ai/"/>
    
  </entry>
  
  <entry>
    <title>ssh publickey permission denied 错误的解决方法</title>
    <link href="https://usmacd.com/cn/ssh-publickey-permission-denied/"/>
    <id>https://usmacd.com/cn/ssh-publickey-permission-denied/</id>
    <published>2024-09-04T16:00:00.000Z</published>
    <updated>2024-09-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>openssh publickey 登录的方式突然不好用了，检查 <code>grep sshd /var/log/auth.log</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Aug</span> <span class="hljs-number">30</span> <span class="hljs-number">16</span>:<span class="hljs-number">58</span>:<span class="hljs-number">33</span> pm-<span class="hljs-number">65</span>c50001 sshd[<span class="hljs-number">9118</span>]: Authentication refused: bad ownership or modes for directory /root<br></code></pre></td></tr></table></figure><p>执行下面的命令后，可以成功登录了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chown</span> root:root /root<br><span class="hljs-built_in">chown</span> root:root /root/.ssh<br><span class="hljs-built_in">chmod</span> 700 /root/.ssh<br><span class="hljs-built_in">chmod</span> 600 /root/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;ssh&#x2F;sshd_config 文件中最关键的配置项</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">PasswordAuthentication</span> <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p>我以前也遇到过这个问题，都是 file permession 设置错误，这次是 directory ownership 设置错误。排查此类错误，最靠谱的方法还是看日志，我折腾了 1 个小时。</p><p>Claude 3.5 Sonnet 没有回答出正确答案。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">fix <span class="hljs-keyword">error</span> `ssh publickey  Permission denied`<br><br><br><span class="hljs-keyword">To</span> fix the <span class="hljs-string">&quot;ssh publickey Permission denied&quot;</span> <span class="hljs-keyword">error</span>, we need <span class="hljs-keyword">to</span> troubleshoot your SSH <span class="hljs-keyword">key</span> configuration. Here are some steps <span class="hljs-keyword">to</span> resolve this issue:<br><br>Check <span class="hljs-keyword">if</span> your SSH <span class="hljs-keyword">key</span> <span class="hljs-built_in">is</span> added <span class="hljs-keyword">to</span> the SSH agent:<br><br>ssh-add -l<br><span class="hljs-keyword">If</span> your <span class="hljs-keyword">key</span> isn<span class="hljs-comment">&#x27;t listed, add it:</span><br><br>ssh-add ~/.ssh/your_private_key<br>Verify that your <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span> <span class="hljs-built_in">is</span> properly added <span class="hljs-keyword">to</span> the remote server<span class="hljs-comment">&#x27;s authorized_keys file. On the remote server, check:</span><br><br>cat ~/.ssh/authorized_keys<br>Your <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span> should be listed here.<br>Ensure correct permissions <span class="hljs-keyword">on</span> SSH files:<br><br>chmod <span class="hljs-number">700</span> ~/.ssh<br>chmod <span class="hljs-number">600</span> ~/.ssh/authorized_keys<br><span class="hljs-keyword">Try</span> connecting <span class="hljs-keyword">with</span> verbose output <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> more information:<br><br>ssh -vv user@host<br><br>Make sure you<span class="hljs-comment">&#x27;re using the correct username and hostname.</span><br>Check <span class="hljs-keyword">if</span> the remote server allows <span class="hljs-keyword">public</span> <span class="hljs-keyword">key</span> authentication <span class="hljs-keyword">in</span> its SSH configuration.<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;openssh publickey 登录的方式突然不好用了，检查 &lt;code&gt;grep sshd /var/log/auth.log&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    
    <category term="linux" scheme="https://usmacd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Obsidian 使用技巧</title>
    <link href="https://usmacd.com/cn/obsidian/"/>
    <id>https://usmacd.com/cn/obsidian/</id>
    <published>2024-09-01T16:00:00.000Z</published>
    <updated>2024-09-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="☆-在-Obsidian-中使用-mind-map"><a href="#☆-在-Obsidian-中使用-mind-map" class="headerlink" title="☆ 在 Obsidian 中使用 mind map"></a>☆ 在 Obsidian 中使用 mind map</h2><p><a href="https://github.com/joethei/obsidian-plantuml">https://github.com/joethei/obsidian-plantuml</a></p><ol><li>Settings -&gt; community plugins -&gt; Browse 安装 plantUML 插件</li><li>Enable PlantUML 插件</li></ol><p>在  markdown 文档中，使用代码块 <code>```plantuml ```</code> 添加 mind map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plantuml">@startmindmap<br><br>* Debian<br>** Ubuntu<br>*** Linux Mint<br>*** Kubuntu<br>*** Lubuntu<br>*** KDE Neon<br>** LMDE<br>** SolydXK<br>** SteamOS<br>** Raspbian with a very long name<br>*** &lt;s&gt;Raspmbc&lt;/s&gt; =&gt; OSMC<br>*** &lt;s&gt;Raspyfi&lt;/s&gt; =&gt; Volumio<br><br>@endmindmap<br></code></pre></td></tr></table></figure><p>可以在 mind map 中点击鼠标右键 Export diagram 可以导出图片。</p><h2 id="☆-Obsidian-如何插入图片"><a href="#☆-Obsidian-如何插入图片" class="headerlink" title="☆ Obsidian 如何插入图片"></a>☆ Obsidian 如何插入图片</h2><ol><li>拖拽 （Drap and Drop）</li></ol><p>如果图片已经下载，使用文件浏览器拖拽到Obsidian 的笔记中。</p><ol start="2"><li>复制粘贴</li></ol><p>从 screenshot 等软件中复制，然后粘贴到Obsidian 的笔记中</p><ol start="3"><li>插入外部图片</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less">!<span class="hljs-selector-attr">[Engelbart|100x145]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//url/Engelbart.jpg)</span><br></code></pre></td></tr></table></figure><p><a href="https://help.obsidian.md/Editing+and+formatting/Basic+formatting+syntax#External+images">https://help.obsidian.md/Editing+and+formatting/Basic+formatting+syntax#External+images</a></p><ol start="4"><li>插入 vault 中的图片</li></ol><p>a. 将图片放入Obsidan 的 Vault 中<br>b. 在文档中使用下面的语法</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">!<span class="hljs-string">[[Engelbart.jpg]]</span><br></code></pre></td></tr></table></figure><p>技巧：在文档中输入 <code>[[]]</code> 可以浏览 Vault 中的文件。</p><p><a href="https://help.obsidian.md/Linking+notes+and+files/Embed+files#Embed+an+image+in+a+note">https://help.obsidian.md/Linking+notes+and+files/Embed+files#Embed+an+image+in+a+note</a></p><ol start="5"><li>图片存放路径设置</li></ol><p>Settings &gt; Files &amp; Links，查找 Default location for new attachments，设置目录。</p><p>图片存放路径默认的路径为 Vault folder.</p><h2 id="☆-Obsidian-主题插件-Style-Settings"><a href="#☆-Obsidian-主题插件-Style-Settings" class="headerlink" title="☆ Obsidian 主题插件 Style Settings"></a>☆ Obsidian 主题插件 Style Settings</h2><p>Obsidian 的很多主题使用 Style Settings 插件，安装后可以对主题灵活配置。</p><p>Settings -&gt; Community plugins -&gt; Browse 搜索 Sytle Settings 安装即可。</p><h2 id="☆-Obsidian-行宽问题解决"><a href="#☆-Obsidian-行宽问题解决" class="headerlink" title="☆ Obsidian 行宽问题解决"></a>☆ Obsidian 行宽问题解决</h2><p>Obsidian 的默认配置有个问题，阅读模式和编模式都限制了最大行宽，对程序员不是很友好，尤其是阅读源代码的情况。</p><p>网络上搜索到的解决方案都是使用 custom css ，但是 custom css 并不通用。</p><p>后面发现， Obsidian 的设置 -&gt; 编辑器 -&gt; 缩减栏宽 选项，会限制 文档的行宽， 关闭这个选项可以自由调整文档行宽。</p><h2 id="☆-Obsidian-快速编辑"><a href="#☆-Obsidian-快速编辑" class="headerlink" title="☆ Obsidian 快速编辑"></a>☆ Obsidian 快速编辑</h2><ol><li>打开 vim 编辑模式： Options -&gt; Editor -&gt; vim key bindings</li><li>v 进入 visual mode, 选中文字， ctrl + p 选择操作（支持搜索），回车</li></ol><p><img src="https://raw.githubusercontent.com/henices/pictures/master/obcmd-0.png" alt="obcmd-0"></p><h2 id="☆-Obsidan-vim-key-bindings-列模式"><a href="#☆-Obsidan-vim-key-bindings-列模式" class="headerlink" title="☆ Obsidan vim key bindings 列模式"></a>☆ Obsidan vim key bindings 列模式</h2><p>Obsidian vim key bindings 已经支持列编辑模式，normal 模式下， ctrl + v 触发。</p><h2 id="☆-Obsidian-设置代理的方法"><a href="#☆-Obsidian-设置代理的方法" class="headerlink" title="☆ Obsidian 设置代理的方法"></a>☆ Obsidian 设置代理的方法</h2><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/Applications/</span>Obsidian.app<span class="hljs-regexp">/Contents/</span>MacOS<span class="hljs-regexp">/Obsidian --proxy-server=socks5:/</span>/<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">7890</span><br></code></pre></td></tr></table></figure><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./Obsidian.AppImage</span> <span class="hljs-params">--proxy-server=</span><span class="hljs-string">&quot;socks5://127.0.0.1:9999&quot;</span><br></code></pre></td></tr></table></figure><h2 id="☆-Obsidian-vim-key-bindings-输入法切换"><a href="#☆-Obsidian-vim-key-bindings-输入法切换" class="headerlink" title="☆ Obsidian vim key bindings 输入法切换"></a>☆ Obsidian vim key bindings 输入法切换</h2><p>首先需要安装 <a href="https://github.com/hideakitai/obsidian-vim-im-control%EF%BC%8C">https://github.com/hideakitai/obsidian-vim-im-control，</a> Community Plugins 里搜索 Vim IM Control 可以直接安装。</p><p>Vim IM Control 插件可以解决 Obsidian 使用 vim key bindings 时 Fcitx <code>InsertLeave</code> and <code>InsertEnter</code> 输入法切换问题，在作用相当于 fcitx.vim 插件。</p><p>MacOS 下，Vim IM Control 调用 im-switch ，可以达到相同的输入法自动切换效果。</p><h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><p>Vim IM Control 配置参考：</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/obcmd-2.png" alt="obcmd-2"></p><h3 id="MacOS-1"><a href="#MacOS-1" class="headerlink" title="MacOS"></a>MacOS</h3><p>需要安装 <a href="https://github.com/daipeihust/im-select/">im-select</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">curl -Ls https://raw.githubusercontent.<span class="hljs-keyword">com</span>/daipeihust/<span class="hljs-keyword">im</span>-select/master/install_mac.<span class="hljs-keyword">sh</span> | <span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>im-select 默认安装路径：<code>/usr/local/bin/im-select</code></p><p>Vim IM Control 配置参考：</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/obcmd-1.jpeg" alt="obcmd-1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;☆-在-Obsidian-中使用-mind-map&quot;&gt;&lt;a href=&quot;#☆-在-Obsidian-中使用-mind-map&quot; class=&quot;headerlink&quot; title=&quot;☆ 在 Obsidian 中使用 mind map&quot;&gt;&lt;/a&gt;☆ 在 Obsidia</summary>
      
    
    
    
    
    <category term="Software" scheme="https://usmacd.com/tags/Software/"/>
    
  </entry>
  
  <entry>
    <title>几秒钟内整理数字生活的系统</title>
    <link href="https://usmacd.com/cn/PARA_methd/"/>
    <id>https://usmacd.com/cn/PARA_methd/</id>
    <published>2024-08-25T16:00:00.000Z</published>
    <updated>2024-08-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在使用知识管理系统对信息进行整理时，最令人头痛的地方是很难将信息划分到一个具体的类别 （打标签） 。</p><p>虽然现代的知识管理软件，支持多个标签联合查询或支持标签的级联查询，在具体的信息分类问题上依然没有找到好方法。</p><p>时间一长，我们甚至难以记起我们使用了哪些标签。</p><p>Tiago Forte 是知名的生产力效率专家，在 《Build a Second Bain》一书中，介绍了一种 PARA 的信息组织方法。</p><p>PARA 是一个简单、灵活的系统，可以组织任何类型的数字信息，更重要的是它可以极大地加速你完成最重要的项目和实现目标。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/para1.png" alt="para1"></p><p>下面文字将总结 PARA 方法的核心要点：</p><h2 id="01-PARA-使用的分类方法"><a href="#01-PARA-使用的分类方法" class="headerlink" title="01&#x2F; PARA 使用的分类方法"></a>01&#x2F; PARA 使用的分类方法</h2><p>PARA 将所有的信息分成四类：Projects (可操作的短期目标)，Areas (持续关注的责任领域)，Resources (感兴趣的主题)，Archives (前三类中不活跃的)</p><ul><li>Projects：短期目标，有截止时间 ： 购买新电脑，写研究报告，设置新客厅家具 等</li><li>Areas：长期目标和负责的内容：如 父亲，产品管理，健康，财务 等</li><li>Resources： 感兴趣的主题：呼吸练习，摄影，咖啡，金融投资 等</li><li>Archives ：不再活跃的前三类：完成或暂停的项目，不再活跃的领域，不感兴趣的主题 等</li></ul><p><img src="https://raw.githubusercontent.com/henices/pictures/master/para2.png" alt="para2"></p><h2 id="02-按照项目和目标组织信息"><a href="#02-按照项目和目标组织信息" class="headerlink" title="02&#x2F; 按照项目和目标组织信息"></a>02&#x2F; 按照项目和目标组织信息</h2><p>学生时期所使用宽泛分类方法不再适用毕业后的工作和生活，非常宽泛的主题比如“市场营销”、“心理学” 在职业生涯中完全没有意义。</p><p>你正在努力推出新产品,计划家庭度假,做出关键决定，你绝对没有时间在一个广阔的类别如“心理学”中搜寻你需要的那一点信息。</p><p>使用项目和目标组织信息的方法可以快速启动项目，启动项目所有的资料已经就绪，不用再到处找资料了。</p><p>将你所负责的领域拆分成可以操作的项目，你就可以通过具体的项目推进领域的进展</p><h2 id="03-使用你想要的生活方式组织信息"><a href="#03-使用你想要的生活方式组织信息" class="headerlink" title="03&#x2F; 使用你想要的生活方式组织信息"></a>03&#x2F; 使用你想要的生活方式组织信息</h2><ul><li>PARA 并不是将东西放进文件夹的分类，而是识别你所负责的工作和生活的结构。它是以一种支持和构建你想要的未来生活的方式来组织信息。</li><li>PARA 将使得我们直面具体的任务，打破“正在准备”，“正在研究” 的虚假进展</li><li>PARA 提供了一种极简的方法来组织信息，在这种情况下你除了进行下一步外没有任何的可以拖延的借口</li></ul><p>英文原文：<a href="https://fortelabs.com/blog/para">https://fortelabs.com/blog/para</a><br>中文翻译：<a href="https://www.usmacd.com/cn/PARA/">https://www.usmacd.com/cn/PARA/</a></p><hr><h2 id="我的讨论"><a href="#我的讨论" class="headerlink" title="我的讨论"></a>我的讨论</h2><p>PARA 是很简单的分类系统，它的核心思路就两点：在责任领域上不断精进，在具体项目上不断推进。</p><p>父亲是一个责任领域，在孩子成长的任何阶段，父亲都需要发挥重要的作用。</p><p>但父亲是一个宽泛的名词，作为一个好父亲，你必须教会孩子游泳、辅导孩子数学，这就是一系列的项目，完成了这些项目你会是一个更好的父亲。</p><p>少楠在得到知识城邦 《笔记的方法》背后的人与事的文章中，也介绍过笔记分类方法中领域的概念。<br><a href="https://m.igetget.com/share/note/detail/xbEGwQD09BNQW5VVxgdEZ1jZ2zkLNe">https://m.igetget.com/share/note/detail/xbEGwQD09BNQW5VVxgdEZ1jZ2zkLNe</a></p><blockquote><p>其实在《笔记的方法》分类方法中，最重要的一个概念就是区分什么是你的领域（Area），而定义领域的最重要衡量标准，是你需不需要为此负责任。</p><p>许多时候我们觉得学某些东西开心，其实并不是真开心，而是做砸了也无妨，因为不需要负责任。比如学画画很开心，但你真要考试，甚至通过画画找工作，其实大概率会变得不开心。又比如看电影开心吧？</p><p>但我们大学时代上剪辑课，一个《霸王别姬》5 分钟的片段看了一星期，都快看吐了，一点都不开心，但因为要考试，要自己拍片子做剪辑，需要为自己和作品负责，就不得不这样。</p><p>但责任也不都是痛苦，也意味着对他人有好处。就像单身时健康只是影响自己，而有家有口后，健康就不仅仅是对自己负责，而是对全家人负责。用一个经济学术语说，就是「具有正外部效应」。</p><p>所以做笔记，做知识管理，觉得分类难，找不到重点。核心是不知道需要为什么领域的事情负责任。</p><p>当你确定了领域，然后去直面它，挑战它，不断精进它。这样，所有的知识才能和实践结合，并且能不断产出具有外部性的成果，不断推着你向上攀登。</p></blockquote><p>在信息管理实践中，将关注的领域（A）和进行的项目（P）混淆是最常见的问题，将导致下面的两个问题：</p><ul><li>不将领域拆分成项目你无法将获知你所负责的内容和具体工作量</li><li>不将领域拆分成项目你无法将你正在进行的工作和长期目标连接起来</li></ul><p>比如招聘工作的工作量到底有多大？ 换成招聘二个 Android 研发工程师，是不是就清楚很多？</p><p>要实践 PARA ，将项目和领域区分开来后，一般是两条主线：</p><ul><li>责任领域 (area) -&gt; 项目 (project) -&gt; 任务 （task)</li><li>兴趣资源 (resource) -&gt; 项目 (project) -&gt; 任务 （task）</li></ul><p>PARA 几个分类之间的转换关系，也很有意思。</p><ul><li>项目 (P) 应该有一个相对应的领域 (A)，进行的项目应该让领域更加精进</li><li>项目 (P) 完成后不再活跃，将归档到存档 (A)</li><li>领域 (A) 可能变成资源 (R), 责任领域变成你感兴趣的主题，比如你换工作了</li><li>资源 (R) 可能变成领域 (A), 感兴趣的主题变成你的责任领域，比如文科生转码</li></ul><p>我使用 PARA 的分类方法已经有两年时间，它确实大大降低了我的心智负担，让我重新识别了自己的生活结构，将主要的精力放在重要的事情上。</p><div class="note note-info">            <p>本文来自 「曼福吉的分享」<a href="https://xiaobot.net/p/MindForge">https://xiaobot.net/p/MindForge</a> 小报童专栏 </p><p>详情请见：<a href="https://www.usmacd.com/cn/share_knowledge/">付费专栏：《曼福吉的分享》</a></p>          </div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们在使用知识管理系统对信息进行整理时，最令人头痛的地方是很难将信息划分到一个具体的类别 （打标签） 。&lt;/p&gt;
&lt;p&gt;虽然现代的知识管理软件，支持多个标签联合查询或支持标签的级联查询，在具体的信息分类问题上依然没有找到好方法。&lt;/p&gt;
&lt;p&gt;时间一长，我们甚至难以记起我们</summary>
      
    
    
    
    
    <category term="PKM" scheme="https://usmacd.com/tags/PKM/"/>
    
  </entry>
  
  <entry>
    <title>如何提取 Android 手机中已经安装的 APK 文件</title>
    <link href="https://usmacd.com/cn/android_apk_extract/"/>
    <id>https://usmacd.com/cn/android_apk_extract/</id>
    <published>2024-08-21T16:00:00.000Z</published>
    <updated>2024-08-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先需要下载 Android Platform Tools 获取 adb 工具。</p><p>Android Platform Tools 的下载地址为：<br><a href="https://developer.android.com/tools/releases/platform-tools#downloads">https://developer.android.com/tools/releases/platform-tools#downloads</a></p><p>在本机执行下面命令，可以提取 Android 手机上安装的 apk 文件。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> pm <span class="hljs-keyword">list</span> packages<br>adb <span class="hljs-keyword">shell</span> pm path &lt;package name&gt;<br>adb pull <span class="hljs-symbol">&lt;apk_path_on_device&gt;</span><br></code></pre></td></tr></table></figure><p>如果要在另外一台手机上安装 Android 应用，则需要在本机执行另外两条命令。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">adb <span class="hljs-keyword">install </span><span class="hljs-keyword">base.apk </span><span class="hljs-comment"># or </span><br>adb <span class="hljs-keyword">install-multiple </span><span class="hljs-keyword">base.apk </span>split_config.arm64_v8a.apk *.apk<br></code></pre></td></tr></table></figure><p>注：本篇需要一些专业知识，至少需要知道 Android 应用 package name 的含义。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先需要下载 Android Platform Tools 获取 adb 工具。&lt;/p&gt;
&lt;p&gt;Android Platform Tools 的下载地址为：&lt;br&gt;&lt;a href=&quot;https://developer.android.com/tools/releases/p</summary>
      
    
    
    
    
    <category term="Android" scheme="https://usmacd.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Debian 12 安装 Nvidia 驱动和 Ollama</title>
    <link href="https://usmacd.com/cn/Debian_Nvidia_Ollama/"/>
    <id>https://usmacd.com/cn/Debian_Nvidia_Ollama/</id>
    <published>2024-07-25T16:00:00.000Z</published>
    <updated>2024-09-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>根据同事反馈，高版本的 NVIDIA 驱动兼容性有问题，需要安装 Nvidia 驱动 525.147.05 ，过程中可能需要升级内核。</p><h2 id="安装-Nvidia-驱动"><a href="#安装-Nvidia-驱动" class="headerlink" title="安装 Nvidia 驱动"></a>安装 Nvidia 驱动</h2><p>查看 Debian 上显卡安装情况。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">lspci -nn | egrep -i <span class="hljs-string">&quot;3d|display|vga&quot;</span>  <br><span class="hljs-number">01</span>:<span class="hljs-number">00.0</span> <span class="hljs-symbol">VGA</span> compatible controller [<span class="hljs-number">0300</span>]: <span class="hljs-symbol">NVIDIA</span> <span class="hljs-symbol">Corporation</span> <span class="hljs-symbol">AD102</span> [<span class="hljs-symbol">GeForce</span> <span class="hljs-symbol">RTX</span> <span class="hljs-number">4090</span>] [<span class="hljs-number">10</span>de:<span class="hljs-number">2684</span>] (rev a1)<br></code></pre></td></tr></table></figure><p>查看驱动安装具体的情况。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">lsmod</span> | grep nouveau  <br><span class="hljs-attribute">nouveau</span>              <span class="hljs-number">2433024</span>  <span class="hljs-number">0</span>  <br><span class="hljs-attribute">mxm_wmi</span>                <span class="hljs-number">16384</span>  <span class="hljs-number">1</span> nouveau  <br><span class="hljs-attribute">i2c_algo_bit</span>           <span class="hljs-number">16384</span>  <span class="hljs-number">1</span> nouveau  <br><span class="hljs-attribute">drm_display_helper</span>    <span class="hljs-number">184320</span>  <span class="hljs-number">1</span> nouveau  <br><span class="hljs-attribute">drm_ttm_helper</span>         <span class="hljs-number">16384</span>  <span class="hljs-number">1</span> nouveau  <br><span class="hljs-attribute">ttm</span>                    <span class="hljs-number">94208</span>  <span class="hljs-number">2</span> drm_ttm_helper,nouveau  <br><span class="hljs-attribute">drm_kms_helper</span>        <span class="hljs-number">204800</span>  <span class="hljs-number">2</span> drm_display_helper,nouveau  <br><span class="hljs-attribute">drm</span>                   <span class="hljs-number">614400</span>  <span class="hljs-number">5</span> drm_kms_helper,drm_display_helper,drm_ttm_helper,ttm,nouveau  <br><span class="hljs-attribute">video</span>                  <span class="hljs-number">65536</span>  <span class="hljs-number">2</span> asus_wmi,nouveau  <br><span class="hljs-attribute">wmi</span>                    <span class="hljs-number">36864</span>  <span class="hljs-number">5</span> video,asus_wmi,wmi_bmof,mxm_wmi,nouveau  <br><span class="hljs-attribute">button</span>                 <span class="hljs-number">24576</span>  <span class="hljs-number">1</span> nouveau<br></code></pre></td></tr></table></figure><p>看来安装的是开源版本的驱动 <code>nouveau</code>，需要先禁用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;blacklist nouveau&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/modprobe.d/nouveau-blacklist.conf<br>sudo update-initramfs -u<br>sudo update-grub<br>sudo reboot<br></code></pre></td></tr></table></figure><p>重启后，执行 <code>lsmod | grep nouveau</code>  发现已经返回为空了，成功禁用。</p><p>执行命令<code> sudo apt install nvidia-driver firmware-misc-nonfree</code> 安装 NVIDIA Proprietary Driver 报错。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Consult</span> /var/lib/dkms/nvidia-current/<span class="hljs-number">525</span>.<span class="hljs-number">147</span>.<span class="hljs-number">05</span>/build/make.log for more information.  <br><span class="hljs-attribute">dpkg</span>: error processing package nvidia-kernel-dkms (--configure):  <br><span class="hljs-attribute">installed</span> nvidia-kernel-dkms package post-installation script subprocess returned error exit status <span class="hljs-number">10</span>  <br><span class="hljs-attribute">dpkg</span>: dependency problems prevent configuration of nvidia-driver:  <br><span class="hljs-attribute">nvidia</span>-driver depends <span class="hljs-literal">on</span> nvidia-kernel-dkms (= <span class="hljs-number">525</span>.<span class="hljs-number">147</span>.<span class="hljs-number">05</span>-<span class="hljs-number">4</span>~deb12u1) | nvidia-kernel-<span class="hljs-number">525</span>.<span class="hljs-number">147</span>.<span class="hljs-number">05</span> | nvidia-open-kernel-<span class="hljs-number">525</span>.<span class="hljs-number">147</span>.<span class="hljs-number">05</span> | nvidia-open-kernel-<span class="hljs-number">525</span>.<span class="hljs-number">147</span>.<span class="hljs-number">05</span>; however:  <br> <span class="hljs-attribute">Package</span> nvidia-kernel-dkms is not configured yet.  <br> <span class="hljs-attribute">Package</span> nvidia-kernel-<span class="hljs-number">525</span>.<span class="hljs-number">147</span>.<span class="hljs-number">05</span> is not installed.  <br> <span class="hljs-attribute">Package</span> nvidia-kernel-dkms which provides nvidia-kernel-<span class="hljs-number">525</span>.<span class="hljs-number">147</span>.<span class="hljs-number">05</span> is not configured yet.  <br> <span class="hljs-attribute">Package</span> nvidia-open-kernel-<span class="hljs-number">525</span>.<span class="hljs-number">147</span>.<span class="hljs-number">05</span> is not installed.  <br> <span class="hljs-attribute">Package</span> nvidia-open-kernel-<span class="hljs-number">525</span>.<span class="hljs-number">147</span>.<span class="hljs-number">05</span> is not installed.  <br>  <br><span class="hljs-attribute">dpkg</span>: error processing package nvidia-driver (--configure):  <br><span class="hljs-attribute">dependency</span> problems - leaving unconfigured  <br><span class="hljs-attribute">Processing</span> triggers for libc-bin (<span class="hljs-number">2</span>.<span class="hljs-number">36</span>-<span class="hljs-number">9</span>+deb12u4) ...  <br><span class="hljs-attribute">Processing</span> triggers for initramfs-tools (<span class="hljs-number">0</span>.<span class="hljs-number">142</span>) ...  <br><span class="hljs-attribute">update</span>-initramfs: Generating /boot/initrd.img-<span class="hljs-number">6</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-<span class="hljs-number">18</span>-amd64  <br><span class="hljs-attribute">Processing</span> triggers for update-glx (<span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span>) ...  <br><span class="hljs-attribute">Processing</span> triggers for glx-alternative-nvidia (<span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span>) ...  <br><span class="hljs-attribute">update</span>-alternatives: using /usr/lib/nvidia to provide /usr/lib/glx (glx) in auto mode  <br><span class="hljs-attribute">Processing</span> triggers for glx-alternative-mesa (<span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span>) ...  <br><span class="hljs-attribute">Processing</span> triggers for libc-bin (<span class="hljs-number">2</span>.<span class="hljs-number">36</span>-<span class="hljs-number">9</span>+deb12u4) ...  <br><span class="hljs-attribute">Processing</span> triggers for initramfs-tools (<span class="hljs-number">0</span>.<span class="hljs-number">142</span>) ...  <br><span class="hljs-attribute">update</span>-initramfs: Generating /boot/initrd.img-<span class="hljs-number">6</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-<span class="hljs-number">18</span>-amd64  <br><span class="hljs-attribute">Errors</span> were encountered while processing:  <br><span class="hljs-attribute">nvidia</span>-kernel-dkms  <br><span class="hljs-attribute">nvidia</span>-driver  <br><span class="hljs-attribute">E</span>: Sub-process /usr/bin/dpkg returned an error code (<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>确认 debian 版本 <code>lsb_release -a</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-literal">No</span> <span class="hljs-string">LSB</span> <span class="hljs-string">modules</span> <span class="hljs-string">are</span> <span class="hljs-string">available.</span>  <br><span class="hljs-attr">Distributor ID:</span> <span class="hljs-string">Debian</span>  <br><span class="hljs-attr">Description:</span>    <span class="hljs-string">Debian</span> <span class="hljs-string">GNU/Linux</span> <span class="hljs-number">12</span> <span class="hljs-string">(bookworm)</span>  <br><span class="hljs-attr">Release:</span>        <span class="hljs-number">12</span>  <br><span class="hljs-attr">Codename:</span>       <span class="hljs-string">bookworm</span><br></code></pre></td></tr></table></figure><p>根据 stackexchange 上的回答 ，安全升级 Debian 内核的方法是使用 backports 安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://deb.debian.org/debian bookworm-backports main&quot;</span> | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/debian-backports.list<br>sudo apt update<br>sudo apt install -t bookworm-backports linux-image-amd64<br>sudo reboot<br></code></pre></td></tr></table></figure><p>重新启动后，执行 <code>uname -a</code>  发现内核已经成功升级了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">uname</span> -a                                                                          <br><span class="hljs-attribute">Linux</span> debian <span class="hljs-number">6</span>.<span class="hljs-number">7</span>.<span class="hljs-number">12</span>+bpo-amd64 #<span class="hljs-number">1</span> SMP PREEMPT_DYNAMIC Debian <span class="hljs-number">6</span>.<span class="hljs-number">7</span>.<span class="hljs-number">12</span>-<span class="hljs-number">1</span>~bpo12+<span class="hljs-number">1</span> (<span class="hljs-number">2024</span>-<span class="hljs-number">05</span>-<span class="hljs-number">06</span>) x86_64 GNU/Linux<br></code></pre></td></tr></table></figure><p>重新安装 NVIDIA Proprietary Driver <code>sudo apt install nvidia-driver firmware-misc-nonfree</code> ，这次没有报错了。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvidia</span>-smi    <br><br><span class="hljs-attribute">NVIDIA</span>-SMI <span class="hljs-number">525</span>.<span class="hljs-number">147</span>.<span class="hljs-number">05</span>   Driver Version: <span class="hljs-number">525</span>.<span class="hljs-number">147</span>.<span class="hljs-number">05</span>   CUDA Version: <span class="hljs-number">12</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>NVIDIA Proprietary Driver 525 感觉有问题，过了一段时间后机器出现重启现象，dmesg 显示错误 <code>ACPI BIOS Error (bug)</code> 。 </p><p>上网搜索错误，有人反馈是 525 驱动问题（不确定）。Debain 系统 Nvidia 驱动有更新，执行 <code>apt upgrade</code> 后成功升级到 535 。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># nvidia-smi</span><br><br><span class="hljs-attribute">NVIDIA</span>-SMI <span class="hljs-number">535</span>.<span class="hljs-number">183</span>.<span class="hljs-number">01</span>             Driver Version: <span class="hljs-number">535</span>.<span class="hljs-number">183</span>.<span class="hljs-number">01</span>   CUDA Version: <span class="hljs-number">12</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>升级 Nvidia 驱动到 535 后，暂未出现重启现象。</p><h2 id="安装-ollama"><a href="#安装-ollama" class="headerlink" title="安装 ollama"></a>安装 ollama</h2><p>执行下面的命令安装 Ollama</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -fsSL https://ollama.com/install.sh | sh<br></code></pre></td></tr></table></figure><p>下载速度很慢，还是挂线路。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">export</span> https_proxy=http:<span class="hljs-comment">//127.0.0.1:7890</span><br><span class="hljs-keyword">export</span> http_proxy=http:<span class="hljs-comment">//127.0.0.1:7890</span><br>curl -fsSL https:<span class="hljs-comment">//ollama.com/install.sh | sh</span><br></code></pre></td></tr></table></figure><p>挂上线路后，很快 Ollama 就安装成功了。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean">&gt;&gt;&gt; Downloading ollama...  <br>######################################################################## <span class="hljs-number">100.0</span>%#=#=-#  #                                                                        <br>&gt;&gt;&gt; Installing ollama to /usr/local/bin...  <br>&gt;&gt;&gt; Creating ollama user...  <br>&gt;&gt;&gt; Adding ollama user to render group...  <br>&gt;&gt;&gt; Adding ollama user to video group...  <br>&gt;&gt;&gt; Adding current user to ollama group...  <br>&gt;&gt;&gt; Creating ollama systemd service...  <br>&gt;&gt;&gt; Enabling and starting ollama service...  <br>Created symlink /etc/systemd/<span class="hljs-keyword">system</span>/default.target.wants/ollama.service → /etc/systemd/<span class="hljs-keyword">system</span>/ollama.service.  <br>&gt;&gt;&gt; NVIDIA GPU installed.<br></code></pre></td></tr></table></figure><p>ollama 下载 llama3 8b 和 qwen2 7b 模型，执行下面的命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ollama</span> pull llama3<br><span class="hljs-attribute">ollama</span> pull qwen2:<span class="hljs-number">7</span>b<br></code></pre></td></tr></table></figure><p>测试 llama3 模型，运行正常。</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">ollama run llama3  <br>&gt;&gt;&gt; hi  <br>Hi! It<span class="hljs-comment">&#x27;s nice to meet you. Is there something I can help you with or would you like to chat?</span><br></code></pre></td></tr></table></figure><h2 id="升级-Ollama"><a href="#升级-Ollama" class="headerlink" title="升级 Ollama"></a>升级 Ollama</h2><p>Ollama 0.3.0 支持通过 llama3.1 进行工具调用，有必要升级。参见 [4]</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo curl -L https://ollama.com/download/ollama-linux-amd64 -o /usr/local/bin/ollama<br>sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/ollama<br></code></pre></td></tr></table></figure><p>升级完毕，需要重启 Ollama 服务。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl daemon-reload<br>sudo systemctl restart ollama<br></code></pre></td></tr></table></figure><h2 id="配置-Ollama"><a href="#配置-Ollama" class="headerlink" title="配置 Ollama"></a>配置 Ollama</h2><p>如果需要在浏览器插件（比如沉浸翻译）中调用 Ollama api，涉及 Cross-Origin 访问，需要修改 Ollama 配置。</p><p>官方文档提到了相关的设置 [5]，用 vim 直接修改 &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;ollama.service 中，添加下面内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;OLLAMA_HOST=*&quot;</span><br></code></pre></td></tr></table></figure><p>重启 Ollama 服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl daemon-reload<br>sudo systemctl restart ollama<br></code></pre></td></tr></table></figure><p>在远程主机上，查看 Ollama 端口侦听情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt install net-tools<br>netstat -antp | grep -i ollama  <br></code></pre></td></tr></table></figure><p>Ollama 默认侦听 127.0.0.1:11434</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tcp</span>        <span class="hljs-number">0</span>      <span class="hljs-number">0</span> <span class="hljs-number">127.0.0.1:11434</span>         <span class="hljs-number">0.0.0.0</span>:*               LISTEN      <span class="hljs-number">50508</span>/ollama<br></code></pre></td></tr></table></figure><p>利用 SSH 将远程主机 Ollama 侦听的端口 11434 转发到本地 127.0.0.1:11434</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh -N -g -L 127.0.0.1:11434:127.0.0.1:11434 root@1.1.1.1  <span class="hljs-comment"># 将 1.1.1.1 替换成你的 ip</span><br></code></pre></td></tr></table></figure><h2 id="卸载-Ollama"><a href="#卸载-Ollama" class="headerlink" title="卸载 Ollama"></a>卸载 Ollama</h2><p>停止 Ollama 服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl stop ollama<br>sudo systemctl <span class="hljs-built_in">disable</span> ollama<br>sudo <span class="hljs-built_in">rm</span> /etc/systemd/system/ollama.service<br></code></pre></td></tr></table></figure><p>删除二进制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">rm</span> $(<span class="hljs-built_in">which</span> ollama)<br></code></pre></td></tr></table></figure><p>删除 Ollama 用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">rm</span> -r /usr/share/ollama<br>sudo userdel ollama<br>sudo groupdel ollama<br></code></pre></td></tr></table></figure><h2 id="OpenAI-Translator-配置"><a href="#OpenAI-Translator-配置" class="headerlink" title="OpenAI Translator 配置"></a>OpenAI Translator 配置</h2><p>在 OpenAI Translator 中填入下面的配置，即可正常使用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Default service provider :</span> <span class="hljs-string">OpenAI</span><br><span class="hljs-attr">API Key:</span> <span class="hljs-string">ollama</span><br><span class="hljs-attr">API Model:</span> <span class="hljs-string">Custom</span><br><span class="hljs-attr">Custom Model Name:</span> <span class="hljs-string">Your</span> <span class="hljs-string">Model</span> <span class="hljs-string">Name</span><br><span class="hljs-attr">API URL:</span> <span class="hljs-string">http://127.0.0.1:11434</span><br><span class="hljs-attr">API URL Path:</span> <span class="hljs-string">/v1/chat/completions</span><br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[0] NvidiaGraphicsDrivers<br><a href="https://wiki.debian.org/NvidiaGraphicsDrivers">https://wiki.debian.org/NvidiaGraphicsDrivers</a></p><p>[1] Debain backports Instructions<br><a href="https://backports.debian.org/Instructions/">https://backports.debian.org/Instructions/</a></p><p>[2] Ollama on Linux<br><a href="https://github.com/ollama/ollama/blob/main/docs/linux.md">https://github.com/ollama/ollama/blob/main/docs/linux.md</a></p><p>[3] Is it possible &amp; safe to use latest kernel with Debian?<br><a href="https://unix.stackexchange.com/questions/725783/is-it-possible-safe-to-use-latest-kernel-with-debian">https://unix.stackexchange.com/questions/725783/is-it-possible-safe-to-use-latest-kernel-with-debian</a></p><p>[4] Ollama v0.3.0 release note<br><a href="https://github.com/ollama/ollama/releases/tag/v0.3.0">https://github.com/ollama/ollama/releases/tag/v0.3.0</a></p><p>[5] Ollama FAQ<br><a href="https://github.com/ollama/ollama/blob/main/docs/faq.md#how-do-i-configure-ollama-server">https://github.com/ollama/ollama/blob/main/docs/faq.md#how-do-i-configure-ollama-server</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;根据同事反馈，高版本的 NVIDIA 驱动兼容性有问题，需要安装 Nvidia 驱动 525.147.05 ，过程中可能需要升级内核。&lt;/p&gt;
&lt;h2 id=&quot;安装-Nvidia-驱动&quot;&gt;&lt;a href=&quot;#安装-Nvidia-驱动&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="linux" scheme="https://usmacd.com/tags/linux/"/>
    
    <category term="ai" scheme="https://usmacd.com/tags/ai/"/>
    
  </entry>
  
  <entry>
    <title>马斯克的哲学</title>
    <link href="https://usmacd.com/cn/elon_philosophy/"/>
    <id>https://usmacd.com/cn/elon_philosophy/</id>
    <published>2024-07-24T16:00:00.000Z</published>
    <updated>2024-07-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="马斯克的五步工作法"><a href="#马斯克的五步工作法" class="headerlink" title="马斯克的五步工作法"></a>马斯克的五步工作法</h2><p>马斯克提炼出了一个五步工作法，称之为“算法”，自称每天的工作就是「算法复读机」😄️</p><p>这五个步骤按顺序分别是:</p><p><strong>1）质疑每项需求，让要求不那么愚蠢</strong></p><ul><li>提出任何一项要求时，都应该附上提出这一要求的人。</li><li>永远不要接受一项来自某个部门的要求，比如来自“法务部门”的要求。</li></ul><p><strong>2）删除要求当中所有你能删除的部分和流程</strong></p><ul><li>虽然你可能还得把它们加回来，如果最后加来的部分还不到删除部分的10%，那就说明删减得还不够。</li></ul><p><strong>3）简化和优化</strong></p><ul><li>这应该放在第2步之后，因为人们常犯的错误就是简化和优化一个原本不应该存在的部分或者流程。</li></ul><p><strong>4）加快周转时间</strong></p><ul><li>每个流程都可以加快，但只有遵循了前三个步骤之后才能这么做。</li></ul><p><strong>5）自动化</strong></p><ul><li>过早的自动化会产生问题，自动化是最后一个步骤，在此之前必须经过质疑、删除、简化等步骤</li></ul><h2 id="马斯克五步工作法的重要推论"><a href="#马斯克五步工作法的重要推论" class="headerlink" title="马斯克五步工作法的重要推论"></a>马斯克五步工作法的重要推论</h2><ul><li>所有技术经理都必须有实战经验，软件团队的管理人员至少花 20% 的时间编程</li><li>犯错没关系，但错了还不肯低头就不行</li><li>唯一要遵守的规则就是物理学定律能推导出来的规则，其他一切都只是建议</li><li>深度调研需要跨级沟通，直接和你下属的下属交流，不要只和你直接管理的相关负责人聊</li><li>招聘工作态度端正的人，技能可以教，但是工作态度要改变很困难</li><li>你好，我好，大家好，是很危险的，人们从此不会质疑同事的工作成果</li><li>永远不要要求团队做你自己都不愿意做的事</li><li>疯狂的紧迫感是我们公司运作的法则</li></ul><h2 id="我的讨论"><a href="#我的讨论" class="headerlink" title="我的讨论"></a>我的讨论</h2><p>上面的五个步骤，可以分别用一个单词来表示，分别为:</p><ol><li>Question&#x2F;提问</li><li>Delete&#x2F;删除</li><li>Optimize&#x2F;优化</li><li>Accelerate&#x2F;加速</li><li>Automate&#x2F;自动化</li></ol><p>马斯克在接受采访时，一半的时间用在解释前 2 个步骤，可见这两个步骤在他心目中是最重要的。</p><p>他说我们最经常犯的错误是「尝试去优化一个本来不应该存在的事情」</p><blockquote><p>Optimize a thing that should not exist.</p></blockquote><p>马斯克认为，我们有这种僵化思维的原因是，上学期间长时间养成的「解题思维」，如果你在上大学的时候质疑教授的问题很愚憃，那么你将会挂科 🤣</p><blockquote><p>You got to answer the question.</p></blockquote><p>第 1 个步骤「提问」，是为了克服人们的僵化思维而设置的，尤其是当问题是权威人士提出时更要提高警惕，需要克服崇拜权威的心理因素。</p><p>第 2 个步骤「删除」，是因为很多部件或流程的存在只是为了预防万一，你为了预防万一，付出了「复杂」的代价。</p><p>第 3 个步骤才是「优化」，然而对多数人来说优化是第一个步骤 …</p><p>五步工作法的重要推论，很少见人讨论。其实这些建议更加具体，对于从事管理的人来说，这些建议颇具参考价值。</p><p>比如，软件团队的管理人员至少花 20% 的时间编程。</p><p>国内公司软件团队的管理人员基本不写代码，开会是主要任务。我比较欣赏一个技术管理人员的说法：「作为一个技术管理，你应该能胜任往下三级的工作」</p><div class="note note-info">            <p>本文来自 「曼福吉的分享」<a href="https://xiaobot.net/p/MindForge">https://xiaobot.net/p/MindForge</a> 小报童专栏 </p><p>详情请见：<a href="https://www.usmacd.com/cn/share_knowledge/">付费专栏：《曼福吉的分享》</a></p>          </div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;马斯克的五步工作法&quot;&gt;&lt;a href=&quot;#马斯克的五步工作法&quot; class=&quot;headerlink&quot; title=&quot;马斯克的五步工作法&quot;&gt;&lt;/a&gt;马斯克的五步工作法&lt;/h2&gt;&lt;p&gt;马斯克提炼出了一个五步工作法，称之为“算法”，自称每天的工作就是「算法复读机」😄️</summary>
      
    
    
    
    
    <category term="KNOWLEDGE" scheme="https://usmacd.com/tags/KNOWLEDGE/"/>
    
  </entry>
  
  <entry>
    <title>Fedora 使用日常小记</title>
    <link href="https://usmacd.com/cn/Fedora_usage/"/>
    <id>https://usmacd.com/cn/Fedora_usage/</id>
    <published>2024-07-23T16:00:00.000Z</published>
    <updated>2024-08-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一份很久远的笔记，质量也不高，以我现在的标准看是不合格的笔记。</p><p>但我觉得有些信息对大家可能还是能有一些帮助，不完善的地方，需要自行上网搜索，见谅！</p><h2 id="☆-如何切换默认的桌面管理器"><a href="#☆-如何切换默认的桌面管理器" class="headerlink" title="☆ 如何切换默认的桌面管理器"></a>☆ 如何切换默认的桌面管理器</h2><p>Fedora 16 后使用新的方法来切换默认的桌面管理器。</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">sudo <span class="hljs-params">system</span>ctl enable --<span class="hljs-literal">force</span> lightdm.service<br></code></pre></td></tr></table></figure><p>在以前的版本需要使用 &#x2F;etc&#x2F;sysconfig&#x2F;desktop 文件来切换。</p><p>参考链接 : <a href="https://docs.fedoraproject.org/en-US/Fedora/18/html/Release_Notes/sect-Release_Notes-Changes_for_Desktop.html">https://docs.fedoraproject.org/en-US/Fedora/18/html/Release_Notes/sect-Release_Notes-Changes_for_Desktop.html</a></p><h2 id="☆-如何为-dnf-设置代理"><a href="#☆-如何为-dnf-设置代理" class="headerlink" title="☆ 如何为 dnf 设置代理"></a>☆ 如何为 dnf 设置代理</h2><p>方法1: 使用环境变量设置 socks5 代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo http_proxy=socks5h://localhost:9999 dnf update<br></code></pre></td></tr></table></figure><p>方法2: 修改文件设置 socks5 代码</p><p>编辑 <code>/etc/dnf/dnf.conf</code> 添加下面几行</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[main]</span><br><span class="hljs-attr">proxy</span>=socks5://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9999</span><br><span class="hljs-comment">#proxy=http://proxy.tylersguides.com:3128</span><br><span class="hljs-comment">#proxy_username=dnf</span><br><span class="hljs-comment">#proxy_password=password</span><br><span class="hljs-comment">#proxy_auth_method=basic</span><br></code></pre></td></tr></table></figure><h2 id="☆-dnf-设置-fastmirror-等插件"><a href="#☆-dnf-设置-fastmirror-等插件" class="headerlink" title="☆ dnf 设置 fastmirror 等插件"></a>☆ dnf 设置 fastmirror 等插件</h2><p>在 dnf 的配置文件 &#x2F;etc&#x2F;dnf&#x2F;dnf.conf 添加下面两行:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">fastestmirror</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">deltarpm</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="☆-Fedora-如何安全删除老内核"><a href="#☆-Fedora-如何安全删除老内核" class="headerlink" title="☆ Fedora 如何安全删除老内核"></a>☆ Fedora 如何安全删除老内核</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo dnf remove --oldinstallonly --<span class="hljs-built_in">setopt</span> installonly_limit=2 kernel<br></code></pre></td></tr></table></figure><p>如果想删除某个版本的内核</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">ls</span> -l /boot/vmlinuz*<br>sudo dnf remove <span class="hljs-string">&#x27;kernel*4.19.2-300*&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="☆-Fedora-中文乱码"><a href="#☆-Fedora-中文乱码" class="headerlink" title="☆ Fedora 中文乱码"></a>☆ Fedora 中文乱码</h2><p>升级Fedora 28 发现终端乱码，经过一翻排查后发现是语言支持升级的时候不知道怎么  被卸载了。</p><p>执行下面的命令可以解决这个问题：<br><code>sudo dnf install langpacks-zh_CN</code></p><h2 id="☆-升级-Fedora-报错-100"><a href="#☆-升级-Fedora-报错-100" class="headerlink" title="☆ 升级 Fedora 报错  /   100%"></a>☆ 升级 Fedora 报错  <code>/</code>   100%</h2><p>升级 fedora 29 的时候遇到，经过一番研究发现是 dnf 的设置问题。</p><p>cat &#x2F;etc&#x2F;dnf&#x2F;dnf.conf </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[main]</span><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">installonly_limit</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">clean_requirements_on_remove</span>=<span class="hljs-literal">True</span><br><span class="hljs-attr">keepcache</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">fastestmirror</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">deltarpm</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>keepcache &#x3D; 1 保留更新的rpm 包，浪费大量空间。 使用 <code>dnf clean packages</code>  可以删除多余的工具包。</p><p>注意查看 &#x2F;usr&#x2F;local 下有无体积巨大的软件包，可以删除。 一些 Linux 系统设置保存程序崩溃的 core 文件，这些文件可能非常大，需要注意。</p><h2 id="☆-Fedora-开启-rc-local"><a href="#☆-Fedora-开启-rc-local" class="headerlink" title="☆ Fedora 开启 rc.local"></a>☆ Fedora 开启 rc.local</h2><p>fedora 默认没有开启 rc.local.service, 也没有创建 &#x2F;etc&#x2F;rc.local 文件，可以使用下面的命令启用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> rc-local.service<br><span class="hljs-built_in">chmod</span> a+x /etc/rc.local<br><br>sudo <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;#! /bin/bash&#x27;</span> &gt; /etc/rc.local<br>sudo <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;exit 0&#x27;</span> &gt;&gt; /etc/rc.local<br></code></pre></td></tr></table></figure><h2 id="☆-Fedora-XFCE-thunar-无法右键解压"><a href="#☆-Fedora-XFCE-thunar-无法右键解压" class="headerlink" title="☆ Fedora XFCE thunar 无法右键解压"></a>☆ Fedora XFCE thunar 无法右键解压</h2><p>需要安装两个程序</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo dnf instal xarchiver<br>sudo dnf install thunar-archive-plugin<br></code></pre></td></tr></table></figure><h2 id="☆-Fedora-如何开启-XFCE-的声音"><a href="#☆-Fedora-如何开启-XFCE-的声音" class="headerlink" title="☆ Fedora 如何开启 XFCE 的声音"></a>☆ Fedora 如何开启 XFCE 的声音</h2><p>fedora xfce 默认没有安装声音套件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum -y install xfce4-volumed<br></code></pre></td></tr></table></figure><p>需要将当前用户加入audio组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo usermod -aG audio user<br></code></pre></td></tr></table></figure><h2 id="☆-升级内核后，Virtualbox-不能正常启动"><a href="#☆-升级内核后，Virtualbox-不能正常启动" class="headerlink" title="☆  升级内核后，Virtualbox 不能正常启动"></a>☆  升级内核后，Virtualbox 不能正常启动</h2><p>需要重新安装virutalbox的内核模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum search kmod-VirtualBox <br>sudo systemctl restart systemd-modules-load.service<br></code></pre></td></tr></table></figure><h2 id="☆-升级系统后-Virtualbox-无法启动虚拟机"><a href="#☆-升级系统后-Virtualbox-无法启动虚拟机" class="headerlink" title="☆ 升级系统后, Virtualbox 无法启动虚拟机"></a>☆ 升级系统后, Virtualbox 无法启动虚拟机</h2><p>原因是 vbox 的内核模块没有加载上，执行下面的命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo /usr/sbin/akmods --force<br>sudo systemctl restart systemd-modules-load.service<br></code></pre></td></tr></table></figure><h2 id="☆-Fedora-如何升级最新的-Docker"><a href="#☆-Fedora-如何升级最新的-Docker" class="headerlink" title="☆ Fedora 如何升级最新的 Docker"></a>☆ Fedora 如何升级最新的 Docker</h2><p>1）移除老的 Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dnf remove docker \<br>                 docker-client \<br>                 docker-client-latest \<br>                 docker-common \<br>                 docker-latest \<br>                 docker-latest-logrotate \<br>                 docker-logrotate \<br>                 docker-selinux \<br>                 docker-engine-selinux \<br>                 docker-engine<br></code></pre></td></tr></table></figure><ol start="2"><li>安装 Docker 仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dnf -y install dnf-plugins-core<br>sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo<br></code></pre></td></tr></table></figure><ol start="3"><li>安装 Docker 引擎</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><p>检查 GPG key 是否为 <code>060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35</code>, 是的话，accept it</p><ol start="4"><li>重启 Docker 服务</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start docker<br></code></pre></td></tr></table></figure><p><a href="https://docs.docker.com/engine/install/fedora/#set-up-the-repository">https://docs.docker.com/engine/install/fedora/#set-up-the-repository</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一份很久远的笔记，质量也不高，以我现在的标准看是不合格的笔记。&lt;/p&gt;
&lt;p&gt;但我觉得有些信息对大家可能还是能有一些帮助，不完善的地方，需要自行上网搜索，见谅！&lt;/p&gt;
&lt;h2 id=&quot;☆-如何切换默认的桌面管理器&quot;&gt;&lt;a href=&quot;#☆-如何切换默认的桌面管理器&quot; </summary>
      
    
    
    
    
    <category term="linux" scheme="https://usmacd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>付费专栏：《曼福吉的分享》第一季</title>
    <link href="https://usmacd.com/cn/share_knowledge/"/>
    <id>https://usmacd.com/cn/share_knowledge/</id>
    <published>2024-07-20T16:00:00.000Z</published>
    <updated>2024-09-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>2024 年，我尝试小报童《曼福吉的分享》专栏写作，分享平日的 读书笔记、心得体会、经历经验。</p><p>主要关注：金融投资，知识管理，产品开发，生产效率，和个人成长。因为不是公开分享，信息量比推上公开分享要大。</p><p>如果您觉得我分享的内容对您有帮助，欢迎以订阅专栏的形式支持我。这样，您在打赏的同时，还能收获高价值专栏内容。</p><p>小报童的 newsletter 功能可以直接将内容发到您的邮箱，方便您日后查看。</p><p>定价   ：30 元，一次性买断</p><p>保底 60 篇，1 篇对您有帮助，就值回票价。感谢您的支持 ☕️</p><p>专栏地址: <a href="https://xiaobot.net/p/MindForge">曼福吉的分享</a> , 目前已包含的内容：</p><ul><li><a href="https://xiaobot.net/post/4780a1ab-0234-4a4b-bae1-b7e008146745">@57 两种增长曲线</a></li><li><a href="https://xiaobot.net/post/61cac39f-1d10-4bf5-97d7-27e2e0df470d">@56 破解 Exploration-expoitation 困境的3个策略</a></li><li><a href="https://xiaobot.net/post/10cb8373-7759-4725-b04f-6778df35e96a">@55 高手的信息管理方法</a></li><li><a href="https://xiaobot.net/post/349a3d5e-184f-4edd-8bb5-4cabcdfb34f9">@54 精选 - 09242024</a></li><li><a href="https://xiaobot.net/post/907a40a4-9b27-49e1-a32a-9fac57bbe3d0">@53 如何理解发散思维</a></li><li><a href="https://xiaobot.net/post/f24a9a00-26a1-4a3e-913a-efb004898920">@52 破除思维定势的四种方法</a></li><li><a href="https://xiaobot.net/post/0b53a94b-95b5-4323-a7f5-5324141699ee">@51 如何破除写博客的焦虑</a></li><li><a href="https://xiaobot.net/post/f3ce3183-ca90-40bb-9434-3048b6dda8ce">@50 思维导图的使用方法</a></li><li><a href="https://xiaobot.net/post/5347a3aa-1dff-4e37-a33d-7347b1a44f7b">@49 刻意练习的方法</a></li><li><a href="https://xiaobot.net/post/820ae54a-cb00-40b6-8576-009ae8384397">@48 精选 - 09&#x2F;06&#x2F;2024</a></li><li><a href="https://xiaobot.net/post/6ed3f9b1-864d-4d7b-9fce-7bd656bed745">@47 怎样做事才能事半功倍</a></li><li><a href="https://xiaobot.net/post/9278558e-afec-44cd-8067-1851cf7d155f">@46 极简笔记法则</a></li><li><a href="https://xiaobot.net/post/d853c443-13fa-4c92-aa39-ca1f9d4804e4">@45 知识管理的效率陷阱</a></li><li><a href="https://xiaobot.net/post/607b57ea-5b40-4bd1-99e7-3724d33ddd98">@44 坚持的秘诀</a></li><li><a href="https://xiaobot.net/post/85bb7d34-a5f0-492e-a953-2d002fbcea87">@43 精选 - 08&#x2F;30&#x2F;2024</a></li><li><a href="https://xiaobot.net/post/600ac4fd-ca5f-4ee7-99b9-67873bd6a275">@42 认知科学角度的写作八原则</a></li><li><a href="https://xiaobot.net/post/b508a075-44b6-445a-b3b6-d1bdeb0429c9">@41 最简单的科学决策方法</a></li><li><a href="https://xiaobot.net/post/d7451fa1-f42a-4bb7-9d3d-a954009b5c74">@40 决策都有哪些方法</a></li><li><a href="https://xiaobot.net/post/9995a30c-6ba9-4dca-985e-0124b4292d4a">@39 如何证伪自己</a></li><li><a href="https://xiaobot.net/post/fc05d684-796e-46d6-932a-bfd467c9da1d">@38 精选 - 08&#x2F;23&#x2F;2024</a></li><li><a href="https://xiaobot.net/post/1fed3653-62ec-4b2c-a1d8-fbdf199b99f2">@37 如何理解演化论的思想</a></li><li><a href="https://xiaobot.net/post/64032a2d-2407-4581-83fa-ebc110d253b5">@36 如何正确的理解第一性原理</a></li><li><a href="https://xiaobot.net/post/74763193-6785-438f-9cf6-8ace155aaf20">@35 认知不易，循环反馈</a></li><li><a href="https://xiaobot.net/post/9bcae57e-5f7c-4c68-a870-427ed94a5b99">@34 最快速的学习方法</a></li><li><a href="https://xiaobot.net/post/7996e4fc-e81d-474f-b433-3c6107fb6a71">@33 如何在市场经济下赚钱</a></li><li><a href="https://xiaobot.net/post/1d59e5ca-39e3-49a9-aa0f-8117c1e6501f">@32 笔记到底应该记录哪些内容？</a></li><li><a href="https://xiaobot.net/post/3740e9cb-9dd3-4f85-b3c5-ae3c824961a4">@31 如何写好一篇技术笔记</a></li><li><a href="https://xiaobot.net/post/3a5453d4-6a7a-4357-87ba-5e5da9fa90ac">@30 如何判断一个人的观点</a></li><li><a href="https://xiaobot.net/post/08eecd40-e085-4d9a-8ef1-f28270f621ef">@29 如何设定一个好目标</a></li><li><a href="https://xiaobot.net/post/310d32f6-18c5-4265-be50-b294335e543e">@28 金融投资中的定投策略</a></li><li><a href="https://xiaobot.net/post/708530cb-e7ae-41c6-b783-7b36ef551e82">@27 端粒效应</a></li><li><a href="https://xiaobot.net/creator/MindForge/edit/ca6b2639-d9cd-4a64-b820-325ba7285c05">@26 真的不需要一年读 100 本书</a></li><li><a href="https://xiaobot.net/post/5d5b4403-1ab9-4dfa-ab83-7a43e1d1208c">@25 几秒钟内整理数字生活的系统</a></li><li><a href="https://xiaobot.net/post/b43df2f0-884d-4259-84dd-5f842db2610a">@24 市场如何运动</a></li><li><a href="https://xiaobot.net/post/cc326212-bcc4-4267-86be-8ca847ee0221">@23 战略性休息的方法</a></li><li><a href="https://xiaobot.net/post/0a98373b-a12c-46f8-a940-16e4e1f19315">@22 如何获取优质的信息</a></li><li><a href="https://xiaobot.net/post/98b049b4-5d03-47f6-a5b0-b36a10fab14d">@21 J 曲线 - 先下降后上升</a></li><li><a href="https://xiaobot.net/post/7b0c77e9-c245-4402-b773-f450ecef915c">@20 万维钢的强力研读笔记法</a></li><li><a href="https://xiaobot.net/post/4f91d3d8-836c-4b52-8922-4aa30daea47f">@19 如果语言学习只能做一件事</a></li><li><a href="https://xiaobot.net/post/72e49065-30a8-46ff-9aae-0a73b9824385">@18 提升创造力的麦吉弗方法</a></li><li><a href="https://xiaobot.net/post/0c0b0492-bd2d-4c64-9ebe-b0b34e105055">@17 金融投资中的预期思维</a></li><li><a href="https://xiaobot.net/post/541abc4f-f6a3-4843-ae9d-f2cde0f046c5">@16 马斯克的哲学</a></li><li><a href="https://xiaobot.net/post/86bb243c-5143-4947-ab5a-bacc9e54b29e">@15 林彪的阅读习惯</a></li><li><a href="https://xiaobot.net/post/a60d6d1b-deb1-4782-bd46-d3f9ca622e21">@14 定期回顾笔记的好处</a></li><li><a href="https://xiaobot.net/post/8787e7ff-5605-454a-84a9-282fb70a2181">@13 可理解输入英语学习法的补充</a></li><li><a href="https://xiaobot.net/post/860775b0-39db-4144-b3d2-ccbdb5bb75a5">@12 可理解输入英语学习方法</a></li><li><a href="https://xiaobot.net/post/766e30d8-ff07-4211-a43c-6b1a3dbe5b1e">@11 成功是成功之母</a></li><li><a href="https://xiaobot.net/post/dbcc22a0-db08-4b4d-8bf3-06bef4a6ab4b">@10 良好的睡眠都有哪些作用</a></li><li><a href="https://xiaobot.net/post/4b10b829-d3e5-4e9f-b8fb-5e6189cf3740">@9  如何提升自己的稀缺性</a></li><li><a href="https://xiaobot.net/post/94ca63c3-626e-4dee-a9c2-239a184bcdf4">@8  如何拥有源源不断的行动力？</a></li><li><a href="https://xiaobot.net/post/736b562a-c1f4-41f9-b84c-64a0aeebadce">@7  反脆弱式的学习方法</a></li><li><a href="https://xiaobot.net/post/fcd124fc-8c41-49ec-a6a8-f0c33f61a197">@6  两种有效的学习模型</a></li><li><a href="https://xiaobot.net/post/0e59685c-b7c4-465a-b7e4-c84fcedd15db">@5  成长中的七条原则</a></li><li><a href="https://xiaobot.net/post/7d03f5d5-78f8-48bb-b676-5583051b6b5c">@4  斯多葛哲学的控制二分法</a></li><li><a href="https://xiaobot.net/post/168864d5-221d-4600-91bc-377b8ffc8dd8">@3  如何讲好一个故事</a></li><li><a href="https://xiaobot.net/post/b53fd18b-0768-4dfd-b351-e8c12bf945b1">@2  原则的力量</a></li><li><a href="https://xiaobot.net/post/15be83c4-37b6-47f8-930c-1d557e783363">@1  若干基本原则和市场箴言</a></li></ul><div class="note note-secondary">            <p>本博客内容永久免费，如果博客的文章对您有所帮助，欢迎以订阅专栏的方式支持我。您的支持是我坚持写作的极大动力！再次感谢!</p>          </div><p>TL;DR:</p><h2 id="专栏的名字"><a href="#专栏的名字" class="headerlink" title="专栏的名字"></a>专栏的名字</h2><p>专栏名字 - 曼福吉的分享，说明了专栏的目的，主要是分享有价值的信息。</p><p>曼福吉是 MindForge id 的中文谐音，MindForge 可以拆分为两个单词 Mind 和 Forge，是思维锻造的意思。</p><p>在人的一生中，需要不断地锤炼自己的思维，用现在流行的话讲，叫「认知升级」。</p><p>开专栏是为了更加深度的分享，和公开分享不同，我希望可以更加自由地表达自己的所思所想。</p><h2 id="我会写些什么？"><a href="#我会写些什么？" class="headerlink" title="我会写些什么？"></a>我会写些什么？</h2><p>这不一个垂直分类的专栏，我很欣赏一句话「人生很精彩，内容不垂直」，写什么内容主要是根据我的兴趣，看什么文章读什么书也是根据我自己的品位决定。</p><p>大体上会写 金融投资，知识管理，产品开发，生产效率，和个人成长这几个主题，计算机科学，网络安全估计也会写一些。</p><p>专栏里每篇的篇幅不会很长，尽量保持在两、三百字以内精炼内容。和公开分享不同，公开分享我尽量做到理性客观，专栏里的内容个人色彩会浓重一些。</p><p>当专栏里相关的内容足够丰富后，会整理成一篇博客文章，但整体思考的过程只在专栏里保留。</p><p>更新频率：主要取决与个人的状态，状态好就多发，以保证质量为前提。</p><p>专栏有免费的文章，可以查看大致的分享形式。</p><h2 id="您能得到什么"><a href="#您能得到什么" class="headerlink" title="您能得到什么?"></a>您能得到什么?</h2><ol><li><p>改变三观的硬知识，通用的软技能</p></li><li><p>读书和学习方法的分享</p></li><li><p>每日阅读和思考的核心内容，精中取精</p></li></ol><h2 id="不要期待什么？"><a href="#不要期待什么？" class="headerlink" title="不要期待什么？"></a>不要期待什么？</h2><p>一、没有社群，没有圈子，没有连接。你不会因为订阅这个专栏而获得人脉。（开放留言，和作者交流是可以的）</p><p>二、只是较为零碎的观察和记录，不会是成体系的大规模输出。你不会立刻获得可落地执行的方法论。</p><p>三、这是一个完全兴趣导向的专栏，输出内容完全取决于我的兴趣所在。</p><h2 id="如何订阅？"><a href="#如何订阅？" class="headerlink" title="如何订阅？"></a>如何订阅？</h2><p>扫码打开专栏，点击页面底部的订阅。</p><img src="https://www.usmacd.com/img/MindForge.jpeg" width="400"/><p><a href="https://xiaobot.net/p/MindForge">https://xiaobot.net/p/MindForge</a> </p><p>订阅后，记得关注公众号，内容更新会有提醒。默认每周五汇总投递一次，也可改为每日汇总投递。</p><p>「小报童投递」微信公众号，可以设置开启「邮箱投递」，开启后小报童会给你发送更新的专栏内容。 利用邮箱提供的搜索功能，在邮件中搜索专栏名字，即可随时查阅。</p><p>路径：小报童投递 -&gt; 开始阅读 -&gt; 投递设置</p><h2 id="如何退款-？"><a href="#如何退款-？" class="headerlink" title="如何退款 ？"></a>如何退款 ？</h2><p>为了保障读者和创作者双方的权益，读者可以在购买专栏后 24 小时内申请退款，超时后将无法退款。</p><p>小报童工作人员会在 48 小时内审核。通过后费用将会原路退回。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2024 年，我尝试小报童《曼福吉的分享》专栏写作，分享平日的 读书笔记、心得体会、经历经验。&lt;/p&gt;
&lt;p&gt;主要关注：金融投资，知识管理，产品开发，生产效率，和个人成长。因为不是公开分享，信息量比推上公开分享要大。&lt;/p&gt;
&lt;p&gt;如果您觉得我分享的内容对您有帮助，欢迎以订</summary>
      
    
    
    
    
    <category term="KNOWLEDGE" scheme="https://usmacd.com/tags/KNOWLEDGE/"/>
    
  </entry>
  
  <entry>
    <title>读《运气与努力》有感</title>
    <link href="https://usmacd.com/cn/luck_and_success/"/>
    <id>https://usmacd.com/cn/luck_and_success/</id>
    <published>2024-06-15T16:00:00.000Z</published>
    <updated>2024-07-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我感觉《运气与努力》这篇博客是 2024 年看过的最好的几篇之一，在终生学习，成功与运气等多方面产生了共鸣，我们面对的是一个复杂的世界，能够把握的东西只是极少数。</p><h2 id="关于成功的要素"><a href="#关于成功的要素" class="headerlink" title="关于成功的要素"></a>关于成功的要素</h2><p>这些年看了很多关于成功学方法论的文章，答案是没有银弹 (No silver bullet) ，没有什么秘技可以一步登天。</p><p>单伟建在母校旧金山大学的一次演讲中说，在任何领域取得成功，最重要的是三方面：</p><ol><li>坚持终生学习 (keep learning)</li><li>好的判断力（good judgement）</li><li>运气 (good luck)</li></ol><p>这和我前段时间发的「工程师把事情做好的三条边」中的说法有关联，工程师要把事情做好必须从最下面的基线，沿着绳索向上爬。</p><div class="note note-info">            <ul><li>最下面一条线是基线，可以理解为人类所掌握的工程知识</li><li>最上面一条线是极限，极限是理论给出的，极限无法突破</li><li>中间那条线是从基线向极限向上攀登的绳索。</li></ul>          </div><p>虽然文中说的是工程师，生活中的很多事也是适用的。终生学习是为了提高自己的基线，以增加自己正确判断方向的概率，至于编制的绳索能爬多高，真要靠点运气。</p><p>运气很难以捉摸，到底是时势造英雄，还是英雄造时势，也挺难说清楚 ？承认运气让人更加谦虚，大多成功都是个人碰运气加努力奋斗的结果。但是机会总是垂青有准备的人，当运气来的时候，就看能不能抓住了。</p><p><strong>故事</strong></p><p>OpenAI 是一个很好的例子，选对了方向大模型，从 GPT-1 开始，GPT-2, GPT-3, 一直到 GPT-3.5 一鸣惊人，用一句话总结：OpenAI 做对选择并坚持了下去，期间找到“贵人”微软相助守住了这份少年意气 ：)</p><h2 id="关于毅力-grit"><a href="#关于毅力-grit" class="headerlink" title="关于毅力 (grit)"></a>关于毅力 (grit)</h2><p>文中还提及一点， Angela Duckworth 强调的毅力（grit）在成功中所起的作用。grit 一词中文翻译含义丰富，有「勇气、坚毅、坚定」的意思，我一般用词 “坚持不懈”，坚持很重要。坚持不懈的力量很容易被忽略，就像人们总是强调「刻意练习」而不怎么提「一万小时定律」一样。</p><p>时间是最公平的，每个人一天都只有 24 小时，你把时间花在哪里，哪里就会有进步，虽然进步可大可小，但几乎总是比不花时间要好。</p><p><strong>故事</strong></p><p>得到课程《香帅的北大金融学课》是一门热门课程，参加学习的人很多大概有 36 万。</p><p>从「01 金融世界观」开始，每节课程平均有 30 多万人学习，到最后的「09 金融思维方法论」，每节课平均会有多少人学习 ？ 答案是 10 万人左右，差不多有 2&#x2F;3 的人没有学完（保守估算，香帅老师的这门课程是 2017 年 12 月开课，到现在已经6 年多了）。</p><h2 id="关于付费群"><a href="#关于付费群" class="headerlink" title="关于付费群"></a>关于付费群</h2><p>关于付费群值不值得加入的问题，我有些不同的看法，我认为绝大多数付费群不值得加入。</p><p>有的群卖的是真的「信息差」，这些资料在互联网上是公开的，可以免费获取，即使获得了也用处不大。</p><p>一些行业内的大咖，互联网知名人士的课程，还是有一些意义的，有些业内人士认为的「常识」，对普通人也是有帮助的，但还是需要很强的鉴别能力，倘若价格不菲真要考虑值不值得。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p>运气与努力 - 江宏,  May 31, 2024<br><a href="https://1byte.io/articles/luck/">https://1byte.io/articles/luck/</a></p></li><li><p>尤雨溪谈成功和运气<br><a href="https://www.usmacd.com/cn/youyuxi/">https://www.usmacd.com/cn/youyuxi/</a></p></li><li><p>公开写作的好处和坚持不懈<br><a href="https://www.usmacd.com/cn/public_writing/">https://www.usmacd.com/cn/public_writing/</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我感觉《运气与努力》这篇博客是 2024 年看过的最好的几篇之一，在终生学习，成功与运气等多方面产生了共鸣，我们面对的是一个复杂的世界，能够把握的东西只是极少数。&lt;/p&gt;
&lt;h2 id=&quot;关于成功的要素&quot;&gt;&lt;a href=&quot;#关于成功的要素&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Misc" scheme="https://usmacd.com/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>为 tmux 设置真彩色</title>
    <link href="https://usmacd.com/cn/tmux_truecolor/"/>
    <id>https://usmacd.com/cn/tmux_truecolor/</id>
    <published>2024-06-11T16:00:00.000Z</published>
    <updated>2024-06-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在 tmux 中使用 vim onedark theme，总是觉得怪怪的，黑色显示偏灰。无意中发现 <code>joshdick/onedark.vim</code> 中提到需要为 tmux 设置真彩色。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">- Plain ASCII<br>- ANSI escape codes: 16 color codes with bold/italic and background<br>- 256 color palette: 216 colors + 16 ANSI + 24 gray (colors are 24-bit)<br>- 24-bit truecolor: &quot;888&quot; colors (aka 16 million)<br></code></pre></td></tr></table></figure><p>检查终端是否支持真彩色，可以使用脚本 <a href="https://raw.githubusercontent.com/gnachman/iTerm2/master/tests/24-bit-color.sh">24-bit-color.sh</a></p><p><code>bash ./24-bit-color.sh</code> 如果终端颜色是连贯的则支持了真彩色，如果颜色是分块的则没有支持。</p><p>修改 ~&#x2F;.tmux.conf 加上两行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">set -g default-terminal &quot;tmux-256color&quot;<br>set-option -ga terminal-overrides &quot;,$&#123;TERM&#125;:Tc&quot;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs text">default-terminal terminal<br>        Set the default terminal for new windows created in this session - the default value of the TERM environment variable.  For tmux to work correctly, this must be  set  to<br>        ‘screen’, ‘tmux’ or a derivative of them.<br><br><br>terminal-overrides[] string<br>        Allow  terminal  descriptions  read  using  terminfo(5)  to  be  overridden.   Each  entry  is a colon-separated string made up of a terminal type pattern (matched using<br>        fnmatch(3)) and a set of name=value entries.<br><br>        For example, to set the ‘clear’ terminfo(5) entry to ‘\e[H\e[2J’ for all terminal types matching ‘rxvt*’:<br><br>                rxvt*:clear=\e[H\e[2J<br><br>        The terminal entry value is passed through strunvis(3) before interpretation.<br></code></pre></td></tr></table></figure><p>要让 tmux 重新加载 <code>~/.tmux.conf</code> 需要退出所有的 tmux 进程后，重新执行 tmux 。最后，检查你的 tmux 是否开启了真彩色，可以使用下面的命令行：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">tmux info | grep Tc<br> 227: Tc: (flag) true<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Adding 24-bit TrueColor RGB escape sequences to tmux - Suraj N. Kurapati , 29 January 2016<br><a href="https://sunaku.github.io/tmux-24bit-color.html#usage">https://sunaku.github.io/tmux-24bit-color.html#usage</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在 tmux 中使用 vim onedark theme，总是觉得怪怪的，黑色显示偏灰。无意中发现 &lt;code&gt;joshdick/onedark.vim&lt;/code&gt; 中提到需要为 tmux 设置真彩色。&lt;/p&gt;
&lt;figure class=&quot;highlight tex</summary>
      
    
    
    
    
    <category term="linux" scheme="https://usmacd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Android 系统的 USB Tethering 功能</title>
    <link href="https://usmacd.com/cn/android_usb_tethering/"/>
    <id>https://usmacd.com/cn/android_usb_tethering/</id>
    <published>2024-05-05T16:00:00.000Z</published>
    <updated>2024-05-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android 系统的 USB Tethering 可以共享 Android 手机的 Internet 连接，使用这个功能后，如果 Android 能够通过 Wi-Fi上网或者移动数据网络上网，则你的电脑也能够通过USB数据线共享网络上网了。</p><p>Android 手机的设置方法：Settings &#x3D;&gt; Network &amp; internet &#x3D;&gt; Hotspot &amp; tethering &#x3D;&gt; USB tethering</p><p>不同厂商的系统名字可能不同，ColorOS 上叫 「USB 网络共享」。</p><p>用 USB 数据线连接 Android 手机和 PC 后，在 Android 系统中开启 USB 网络共享，我的Fedora linux 可以利用 Android 的网络上网了（Windows 系统应该也可以）。Fedora linux 自动添加了一个网络连接， linux  PC 和 Android 手机处于同一局域网下。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx">        <span class="hljs-attribute">IPv4</span> 地址：<span class="hljs-number">192.168.203.204</span><br>    IPv4 默认网关：<span class="hljs-number">192.168.203.74</span><br>IPv4 主域名服务器：<span class="hljs-number">192.168.203.74</span><br></code></pre></td></tr></table></figure><p>Androd 手机可以通过 192.168.203.204 访问 PC 。linux 和 Android 在同一局域网下，文件传输就很多办法了。有推油提示， 在 PC 端执行 python -m http.server 手机端可以用浏览器访问下载 PC 上的文件。</p><p>注：Windows 系统和 Fedora Linux 不同的是系统会弹出一个提示，点击确认后才会和 Android 手机建立网络连接。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Share a mobile connection by hotspot or tethering on Android<br><a href="https://support.google.com/android/answer/9059108?hl=en">https://support.google.com/android/answer/9059108?hl=en</a></p><p>What is USB Tethering and How to Enable it?    12 Mar, 2021<br><a href="https://www.geeksforgeeks.org/what-is-usb-tethering-and-how-to-enable-it/">https://www.geeksforgeeks.org/what-is-usb-tethering-and-how-to-enable-it/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android 系统的 USB Tethering 可以共享 Android 手机的 Internet 连接，使用这个功能后，如果 Android 能够通过 Wi-Fi上网或者移动数据网络上网，则你的电脑也能够通过USB数据线共享网络上网了。&lt;/p&gt;
&lt;p&gt;Android </summary>
      
    
    
    
    
    <category term="Android" scheme="https://usmacd.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>知识管理的效率陷阱</title>
    <link href="https://usmacd.com/cn/PKM_faults/"/>
    <id>https://usmacd.com/cn/PKM_faults/</id>
    <published>2024-04-21T16:00:00.000Z</published>
    <updated>2024-09-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识管理的困境"><a href="#知识管理的困境" class="headerlink" title="知识管理的困境"></a>知识管理的困境</h2><p>知识管理（Knowledge Management ）是近几年的热门词汇，几乎成为高效率人士的必备技能。</p><p>知识管理软件和笔记方法，也是层出不穷。</p><p>笔记软件：EverNote、Apple Note、Notion、Roam research、Obsidian、Logseq、AFFiNE、Heptabase</p><p>笔记方法：康奈尔笔记法、大纲笔记法、思维导图笔记法、子弹笔记法、卡片笔记法、长青笔记法 …</p><p>And more is coming ….</p><p>从宣传标语，看知识管理赛道的演变，也有饶有趣味。</p><p>Note taking system -&gt; Knowledge management system -&gt; Next generation knowledge management -&gt; Ai</p><p>写到这，你可能已经发现，我也是一个知识管理爱好者。</p><p>我用知识管理系统，管理着大量「知识管理」的知识。🤣</p><h2 id="完美工具陷阱-the-perfect-tool-trap"><a href="#完美工具陷阱-the-perfect-tool-trap" class="headerlink" title="完美工具陷阱 (the perfect tool trap)"></a>完美工具陷阱 (the perfect tool trap)</h2><p>我使用过 EverNote，WizNote，VNote、Logseq 等工具记笔记，疲于尝试各种知识管理技巧，学习各种知识管理知识，最终只造成笔记零散地存储在多个工具中。</p><p>我也尝试过使用纯文本, orgmode, markdown，富文本等多种格式记笔记，最终只造成各种格式转换烦恼。</p><p>现实中并不存在一个 All in One 的完美工具，每个工具都有其长处和短处，接受工具的不完美，哪个工具合适就用哪个工具。</p><p>新的工具层出不穷，不断吸引你去使用它。使用一个新工具并不能提高你的工作效率，只是新鲜的刺激感让你感觉良好。</p><h2 id="过度优化陷阱-the-optimization-trap"><a href="#过度优化陷阱-the-optimization-trap" class="headerlink" title="过度优化陷阱 (the optimization trap)"></a>过度优化陷阱 (the optimization trap)</h2><h3 id="打造完美系统"><a href="#打造完美系统" class="headerlink" title="打造完美系统"></a>打造完美系统</h3><p>对笔记的外在表现形式的关注，远远大于对知识内容本身。试图设计复杂的标签系统，笔记层次，笔记方法，来打造一个完美的系统。</p><p>真相是，复杂的系统让你觉得自己很「聪明」，不断优化的知识管理系统（效率系统），拖延了项目的进度。</p><h3 id="频繁整理笔记"><a href="#频繁整理笔记" class="headerlink" title="频繁整理笔记"></a>频繁整理笔记</h3><p>大量堆积的杂乱笔记，让我们产生整理笔记的冲动。</p><p>试图将每条笔记精确地放到每个分类，把多条笔记错综复杂地彼此连接。</p><p>数字笔记系统最大的优势在于你可以使用「搜索」功能来查找笔记内容，适度保持笔记的混杂度，将大大降低心智负担。</p><p>真相是，一旦记录的笔记可以为你所用，你将不再执着于某种「先进」的笔记组织形式。</p><h2 id="什么是「好」的知识管理系统"><a href="#什么是「好」的知识管理系统" class="headerlink" title="什么是「好」的知识管理系统"></a>什么是「好」的知识管理系统</h2><ul><li>知识管理系统随着笔记数量的增加，变得越来越有用</li><li>不同的笔记很容易整合到一起，从而形成新的想法</li><li>使用知识管理系统后，工作能力&#x2F;输出能力得到显著提升</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] Stop Procrastinating With Note-Taking Apps Like Obsidian, Roam, Logseq - Sam Matla<br><a href="https://www.youtube.com/watch?v=baKCC2uTbRc">https://www.youtube.com/watch?v=baKCC2uTbRc</a></p><p>[2] How to Take Smart Notes - Sönke Ahrens</p><p>[3] Build a second brain - Tiago Forte</p><div class="note note-info">            <p>本文来自 「曼福吉的分享」<a href="https://xiaobot.net/p/MindForge">https://xiaobot.net/p/MindForge</a> 小报童专栏 </p><p>详情请见：<a href="https://www.usmacd.com/cn/share_knowledge/">付费专栏：《曼福吉的分享》</a></p>          </div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;知识管理的困境&quot;&gt;&lt;a href=&quot;#知识管理的困境&quot; class=&quot;headerlink&quot; title=&quot;知识管理的困境&quot;&gt;&lt;/a&gt;知识管理的困境&lt;/h2&gt;&lt;p&gt;知识管理（Knowledge Management ）是近几年的热门词汇，几乎成为高效率人士的必备技</summary>
      
    
    
    
    
    <category term="PKM" scheme="https://usmacd.com/tags/PKM/"/>
    
  </entry>
  
  <entry>
    <title>也许学校根本没有教你如何学习：论什么是真正的自学</title>
    <link href="https://usmacd.com/cn/learn_method/"/>
    <id>https://usmacd.com/cn/learn_method/</id>
    <published>2024-04-14T16:00:00.000Z</published>
    <updated>2024-04-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一则笔记，总结了少数派原文的要点，该文章中谈及了学习的两个原始模型，对我有较大启发，分享出来，希望对大家有所帮助。分享方法的文章是真正的「授人以渔」，难能可贵，供大家参考。</p><p><a href="https://sspai.com/post/87551">https://sspai.com/post/87551</a></p><h2 id="学习的两个原始模型"><a href="#学习的两个原始模型" class="headerlink" title="学习的两个原始模型"></a>学习的两个原始模型</h2><p>应试学习和自主学习，两者完全不同。情境和体验，两项对学习至关重要的因素，长久以来在应试体系中是严重缺位的。很多学生在上学时，都有这样困惑，我学这些知识是用来干啥的 ？</p><p>人类学习的有两个原始模型：<br>1）实验，试错，反复纠正，总结实验的结果<br>2）模仿有经验的人，有问题就去请教，直到自己成为有经验的人。</p><p>做实验和当学徒，两种模式是启发和反馈的开放模型。自主学习应该以体验为核心，将学习目标和实际效用联系起来，最好能立刻看到目标对应的结果。</p><p>学编程：✖️ 天书般的知识体系  ✔️ 先搞一个简单的个人网站<br>学英语：✖️ 语法攻略，单词大全  ✔️ 从最基本的高频核心单词入手，输入大量语料，开着字幕看自己喜欢的简单英语视频<br>学运营：✖️ 价值 998 的全套手把手教程 ✔️ 明确自己要做的方向 ，找一些这些方向的头部号，看它里面最好的那几篇内容，分析它为什么好</p><h2 id="如何提高学习效率"><a href="#如何提高学习效率" class="headerlink" title="如何提高学习效率"></a>如何提高学习效率</h2><p>每天完成三个周期，每个周期一个半小时，这是一个成年人可以维持高注意力的平均时长。<br>20 分钟热身期 + 1 个小时左右的专注期 &#x3D; 一个半小时完整学习周期。</p><h2 id="如何制定一个好目标"><a href="#如何制定一个好目标" class="headerlink" title="如何制定一个好目标"></a>如何制定一个好目标</h2><p>目标最小化原则: 一个具体的目标，越小越好，执行起来越不费劲越好<br>Done than perfect: 克服完美主义，以完成任务为目标。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一则笔记，总结了少数派原文的要点，该文章中谈及了学习的两个原始模型，对我有较大启发，分享出来，希望对大家有所帮助。分享方法的文章是真正的「授人以渔」，难能可贵，供大家参考。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://sspai.com/post/87551&quot;&gt;ht</summary>
      
    
    
    
    
    <category term="KNOWLEDGE" scheme="https://usmacd.com/tags/KNOWLEDGE/"/>
    
  </entry>
  
  <entry>
    <title>李录谈价值投资</title>
    <link href="https://usmacd.com/cn/lilu/"/>
    <id>https://usmacd.com/cn/lilu/</id>
    <published>2024-04-02T16:00:00.000Z</published>
    <updated>2024-04-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="价值投资是大道"><a href="#价值投资是大道" class="headerlink" title="价值投资是大道"></a>价值投资是大道</h2><p>价值投资的理念只有四个。</p><p>1）买股票是投资一个公司：股票是公司的所有权，公司在创造价值的过程中，作为部分所有者，拥有的部分价值也会增长</p><p>2）忽略短期波动：市场不能告诉你价值，只能告诉你价格，你只能把它当作一个可以利用的工具</p><p>3）注重安全边际：因为无法对未来预测，做判断是要预留很大空间，买入价格要大大低于内在价值</p><p>4）建立能力圈：通过不断努力，在某些行业获得比几乎所有人更深认识，从而能对公司长期表现作出比所有其他人更准确的判断</p><p>前三条自来本杰明·格雷厄姆，最后一条来自沃伦·巴菲特。</p><h2 id="价值投资的难点"><a href="#价值投资的难点" class="headerlink" title="价值投资的难点"></a>价值投资的难点</h2><p>1）价值投资虽然是通向成功的大路，但是这个道路太长了。也许你买的时候价格远低于内在价值，但你不知道市场什么时候变得理性。同时公司的价值要增长，要公司管理层和上上下下的人员共同努力，是一个很艰难的过程。</p><p>2）你对未来的判断也很难，投资的本事是对未来的预测。真正了解一个公司，一个行业，要能够去判断它未来的5年，10年。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;价值投资是大道&quot;&gt;&lt;a href=&quot;#价值投资是大道&quot; class=&quot;headerlink&quot; title=&quot;价值投资是大道&quot;&gt;&lt;/a&gt;价值投资是大道&lt;/h2&gt;&lt;p&gt;价值投资的理念只有四个。&lt;/p&gt;
&lt;p&gt;1）买股票是投资一个公司：股票是公司的所有权，公司在创造价值</summary>
      
    
    
    
    
    <category term="investment" scheme="https://usmacd.com/tags/investment/"/>
    
  </entry>
  
  <entry>
    <title>AFL++ 漏洞挖掘实例</title>
    <link href="https://usmacd.com/cn/AFL++%20%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%AE%9E%E4%BE%8B/"/>
    <id>https://usmacd.com/cn/AFL++%20%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%AE%9E%E4%BE%8B/</id>
    <published>2024-03-31T16:00:00.000Z</published>
    <updated>2024-03-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="☆-1-模糊测试工具-AFL-AFL-介绍"><a href="#☆-1-模糊测试工具-AFL-AFL-介绍" class="headerlink" title="☆ 1. 模糊测试工具 AFL &#x2F; AFL++介绍"></a>☆ 1. 模糊测试工具 AFL &#x2F; AFL++介绍</h2><p>模糊测试是一种黑盒测试方法，它通过向软件输入随机或异常的数据，来触发软件中的错误或异常。AFL 是 Google 开发的一款 fuzz 工具，它最初由 Michal Zalewski 开发，被设计为一种模糊测试工具，用于自动发现程序中的漏洞。</p><p>在 AFL 之前，模糊测试工具大多采用随机生成输入数据的方法。这种方法虽然简单，但效率低下，很难发现软件中的隐藏路径。AFL 引入了覆盖率导向的模糊测试方法，它会根据软件的执行路径来优化输入数据。这种方法可以有效地提高模糊测试的效率，并更容易发现软件中的隐藏路径。</p><p>AFL 的发布，标志着模糊测试工具进入了新的时代。AFL 的成功，激发了许多其他研究人员和开发人员对模糊测试工具的改进和研究。它对软件安全领域产生了深远的影响。AFL 的成功，证明了模糊测试是一种有效的软件安全测试方法。</p><p>AFL 在模糊测试工具发展史上的具体贡献主要有：<br>1）开创了覆盖率导向模糊测试的新时代<br>2）极大地提高了模糊测试的效率和效果<br>3）激发了其他研究人员和开发人员对模糊测试工具的改进和研究</p><p>AFL作为一款开创性的模糊测试工具，通过不断的发展和改进，已经在网络安全领域取得了显著的历史地位。其自动化特性和有效的漏洞发现能力使其成为安全专业人员首选的工具之一，对软件安全性的提升产生了积极影响。AFL 的成功，证明了模糊测试是一种有效的软件安全测试方法。AFL 的出现，为软件安全领域提供了新的工具和手段，帮助开发人员和安全研究人员发现软件中的安全漏洞。</p><p>AFLplusplus （简称 AFL++）是 AFL 的一个分支，它由 Marc “van Hauser 和其他开发者开发。AFLplusplus 在 AFL 的基础上进行了许多改进，包括：</p><ul><li>更快的执行速度：AFLplusplus 使用了新的编译器插件和其他技术来提高 fuzz 的速度。</li><li>更强大的变异算法：AFLplusplus 提供了更强大的变异算法，可以生成更复杂的输入数据。</li><li>更全面的覆盖率：AFLplusplus 提供了更全面的覆盖率分析，可以帮助开发人员发现软件中的隐藏路径。</li></ul><p>目前 Google 的 oss-fuzz 项目已经使用 AFL++ 替换 AFL 作为其主要 fuzz 工具，AFL++ 在速度、变异算法和覆盖率分析方面都比 AFL 更优秀。</p><h2 id="☆-2-AFL-的安装"><a href="#☆-2-AFL-的安装" class="headerlink" title="☆ 2. AFL++ 的安装"></a>☆ 2. AFL++ 的安装</h2><p>AFL++ 的源码有两个分支，stable 分支 [2] 为发布分支，dev 分支 [3] 为开发分支。dev 分支代码的更新频率很高，也不是很稳定可能出现 bug，推荐使用 stable 分支的源码。以 ubuntu 18.04 为例介绍如何安装 AFLplusplus</p><p>下载源码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/AFLplusplus/AFLplusplus<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure><p><strong>git submodule</strong> 这条命令很重要，要不编译一些 AFL++ mode 的时候会因为缺少源码而报错。</p><p>要从源码编译 AFL++ 需要先安装系统的依赖库。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get update<br>sudo apt-get install -y build-essential python3-dev automake git flex bison libglib2.0-dev libpixman-1-dev python3-setuptools curl ninja-build<br></code></pre></td></tr></table></figure><p>AFL++ 在文档中推荐使用 llvm 13+ ,  所以先要升级 Ubuntu 系统的 llvm ，<a href="https://apt.llvm.org/">https://apt.llvm.org/</a> 提供了编译好的 llvm binary 可以下载，也提供了 llvm.sh 可以非常方面的安装新版本的 llvm，下面的例子演示安装 llvm 15</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://apt.llvm.org/llvm.sh<br><span class="hljs-built_in">chmod</span> +x llvm.sh<br>sudo ./llvm.sh 15 all<br></code></pre></td></tr></table></figure><p>编译 AFL++</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> LLVM_CONFIG=<span class="hljs-string">&quot;llvm-config-15&quot;</span><br>make distrib<br></code></pre></td></tr></table></figure><h2 id="☆-3-AFL-Linux-系统环境配置"><a href="#☆-3-AFL-Linux-系统环境配置" class="headerlink" title="☆ 3. AFL++ Linux 系统环境配置"></a>☆ 3. AFL++ Linux 系统环境配置</h2><p>为了使 AFL++ 在 fuzz 时获得更好的性能，可以使用 root 用户执行下面的脚本， 调整 linux 内核的参数。</p><p><code>sudo bash afl-init.sh</code> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> 1 &gt;/proc/sys/kernel/sched_child_runs_first<br><span class="hljs-built_in">echo</span> 1 &gt;/proc/sys/kernel/sched_autogroup_enabled<br><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/vm/overcommit_memory<br><span class="hljs-built_in">echo</span> core &gt;/proc/sys/kernel/core_pattern<br><span class="hljs-built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled<br><span class="hljs-built_in">test</span> -e /sys/devices/system/cpu/cpufreq/scaling_governor &amp;&amp; <span class="hljs-built_in">echo</span> performance | <span class="hljs-built_in">tee</span> /sys/devices/system/cpu/cpufreq/scaling_governor<br><span class="hljs-built_in">test</span> -e /sys/devices/system/cpu/cpufreq/policy0/scaling_governor &amp;&amp; <span class="hljs-built_in">echo</span> performance | <span class="hljs-built_in">tee</span> /sys/devices/system/cpu/cpufreq/policy*/scaling_governor<br><span class="hljs-built_in">test</span> -e /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor &amp;&amp; <span class="hljs-built_in">echo</span> performance | <span class="hljs-built_in">tee</span> /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor<br><span class="hljs-built_in">test</span> -e /sys/devices/system/cpu/cpufreq/boost &amp;&amp; <span class="hljs-built_in">echo</span> 1 &gt; /sys/devices/system/cpu/cpufreq/boost<br></code></pre></td></tr></table></figure><h2 id="☆-4-AFL-的基本使用方法"><a href="#☆-4-AFL-的基本使用方法" class="headerlink" title="☆ 4. AFL++ 的基本使用方法"></a>☆ 4. AFL++ 的基本使用方法</h2><h3 id="4-1-编译插桩模糊测试目标软件"><a href="#4-1-编译插桩模糊测试目标软件" class="headerlink" title="4.1 编译插桩模糊测试目标软件"></a>4.1 编译插桩模糊测试目标软件</h3><p>优先使用 llvm clang 对目标软件进行插桩，在最近几年的实战文章中已经很少看到使用 gcc 插桩目标软件的例子。AFL++ 提供了多种插桩方式，可以参考:<br><a href="https://github.com/AFLplusplus/AFLplusplus/tree/stable/instrumentation">https://github.com/AFLplusplus/AFLplusplus/tree/stable/instrumentation</a></p><p>使用  afl-clang-fast&#x2F;afl-clang-fast++ 或者 afl-clang-lto&#x2F;afl-clang-lto++ 可以应对大多数情况，afl-clang-lto&#x2F;afl-clang-lto++ 在编译大型程序的时候可能会失败，如果出现失败的情况，可以换用 afl-clang-fast&#x2F;afl-clang-fast++ 。 下面的示例分别针对三种不同编译系统情况，[a] 使用 Makefile , [b] 使用 cmake，[c] 使用 meson , 需要根据具体情况选择。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">CC=afl-cc CXX=afl-c++ ./configure --disable-shared <span class="hljs-comment"># [a]</span><br>cmake -DCMAKE_C_COMPILERC=afl-cc -DCMAKE_CXX_COMPILER=afl-c++ . <span class="hljs-comment"># [b]</span><br>CC=afl-cc CXX=afl-c++ meson <span class="hljs-comment"># [c]</span><br></code></pre></td></tr></table></figure><p>下载 Xpdf 3.02 作为 fuzz 目标。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://dl.xpdfreader.com/old/xpdf-3.02.tar.gz<br>tar -xvzf xpdf-3.02.tar.gz<br></code></pre></td></tr></table></figure><p>编译 Xpdf</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> xpdf<br>CC=afl-cc CXX=afl-c++ ./configure --disable-shared --prefix=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/fuzz_xpdf/install/&quot;</span><br>make<br>make install<br></code></pre></td></tr></table></figure><p>将得到我们的 fuzz 目标  <code>$HOME/fuzz_xpdf/install/bin/pdftotext</code></p><h3 id="4-2-AFL-的命令行参数"><a href="#4-2-AFL-的命令行参数" class="headerlink" title="4.2 AFL++ 的命令行参数"></a>4.2 AFL++ 的命令行参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">afl-fuzz -i <span class="hljs-variable">$HOME</span>/AFLplusplus/testcases/others/pdf -o <span class="hljs-variable">$HOME</span>/fuzz_xpdf/out/ -s 123 -- <span class="hljs-variable">$HOME</span>/fuzz_xpdf/install/bin/pdftotext @@ <span class="hljs-variable">$HOME</span>/fuzz_xpdf/output<br></code></pre></td></tr></table></figure><ul><li>-i  输入目录，用于存放初始 testcase</li><li>-o 输出目录，用于存放 afl-fuzz 生成的 testcase</li><li>– 后面接 fuzz 目标的命令行   @@ 代表文件，不写 @@ 代表是从标准输入读取数据</li><li>-s  RNG 的 seed</li></ul><h2 id="☆-5-实战-vim-漏洞挖掘"><a href="#☆-5-实战-vim-漏洞挖掘" class="headerlink" title="☆ 5. 实战 vim 漏洞挖掘"></a>☆ 5. 实战 vim 漏洞挖掘</h2><p>首先需要研究 vim 的命令行参数，默认的配置下 vim 启动速度慢，并且有可能执行外部shell 命令 （不安全），最终需要使用的命令行参数如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>-u NONE 跳过初始化<br><span class="hljs-bullet">- </span>-X 加快启动速度<br><span class="hljs-bullet">- </span>-s 安静模式<br><span class="hljs-bullet">- </span>-Z 受限模式 (All commands that make use of an external shell are disabled.)<br><span class="hljs-bullet">- </span>-e 以 Ex 模式运行 vim<br><span class="hljs-bullet">- </span>-S 加载第一个文件后执行文件 &lt;session&gt;<br><span class="hljs-bullet">- </span>-c &lt;command&gt; 加载第一个文件后执行 &lt;command&gt;<br><span class="hljs-bullet">- </span>-n 不使用交换文件，只使用内存<br><span class="hljs-bullet">- </span>-m Modifications not allowed to be written<br></code></pre></td></tr></table></figure><h3 id="5-0-vim-的-Ex-模式介绍"><a href="#5-0-vim-的-Ex-模式介绍" class="headerlink" title="5.0 vim 的 Ex 模式介绍"></a>5.0 vim 的 Ex 模式介绍</h3><p>Vim 编译器有三种模式：普通模式、插入模式和 ex 模式。ex 模式是 Vim 的底层命令模式，用于执行各种文件操作，如打开、编辑、保存、搜索、替换、排序等。要进入 ex 模式，可以按下 : 键。在 ex 模式下，可以输入各种命令来执行操作。命令由行号和命令组成，以回车键结束。</p><p>最基本的 ex 命令是 p 命令，用于打印指定行号的行。例如，要打印第 10 行，可以输入 10p。</p><p>其他常用的 ex 命令包括：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">e 命令：打开另一个文件<br>w 命令：保存当前文件<br>q 命令：退出 Vim<br>s 命令：将当前行替换为指定文本<br>g<span class="hljs-operator">/</span><span class="hljs-keyword">pattern</span><span class="hljs-operator">/</span>s<span class="hljs-operator">/</span><span class="hljs-keyword">old</span><span class="hljs-operator">/</span><span class="hljs-keyword">new</span><span class="hljs-operator">/</span> 命令：将所有匹配模式 <span class="hljs-keyword">pattern</span> 的行替换为 <span class="hljs-keyword">old</span> 替换为 <span class="hljs-keyword">new</span>。<br>:sort 命令：对当前文件进行排序。<br></code></pre></td></tr></table></figure><p>ex 模式的使用方法如下：在普通模式下，按下 : 键进入 ex 模式，输入命令，按下回车键执行命令。</p><p>以下是一些 ex 模式的使用示例：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 打开文件</span><br><span class="hljs-symbol">:e</span> test.txt<br><br><span class="hljs-comment"># 编辑文件</span><br><span class="hljs-number">10</span>iHello, world!<br><br><span class="hljs-comment"># 保存文件</span><br><span class="hljs-symbol">:w</span><br><br><span class="hljs-comment"># 退出 Vim</span><br><span class="hljs-symbol">:q</span><br></code></pre></td></tr></table></figure><p>ex 模式提供了丰富的命令，可以用于执行各种文件操作。熟练掌握 ex 模式可以提高 Vim 的使用效率。</p><h3 id="5-1-攻击面分析"><a href="#5-1-攻击面分析" class="headerlink" title="5.1 攻击面分析"></a>5.1 攻击面分析</h3><p>研究历史漏洞发现，vim 主要有两个攻击面， vim 正则表达式引擎和vim 脚本执行引擎。</p><h4 id="vim-的正则表达式引擎"><a href="#vim-的正则表达式引擎" class="headerlink" title="vim 的正则表达式引擎"></a>vim 的正则表达式引擎</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">./vim -u <span class="hljs-built_in">NONE</span> -i <span class="hljs-built_in">NONE</span> -X -Z -m -n -e -s -c <span class="hljs-string">&#x27;call search(getline(&quot;.&quot;))&#x27;</span> -c <span class="hljs-string">&#x27;:qa!&#x27;</span> ./poc<br></code></pre></td></tr></table></figure><h4 id="vim-的脚本执行引擎"><a href="#vim-的脚本执行引擎" class="headerlink" title="vim 的脚本执行引擎"></a>vim 的脚本执行引擎</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">vim -u <span class="hljs-built_in">NONE</span> -i <span class="hljs-built_in">NONE</span> -X -Z -m -n -e -s -S ./poc -c <span class="hljs-string">&#x27;:qa!&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-编译-vim"><a href="#5-2-编译-vim" class="headerlink" title="5.2 编译 vim"></a>5.2 编译 vim</h3><p>首先下载 vim 的源码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/vim/vim.git<br></code></pre></td></tr></table></figure><p>编译 vim ，使用 afl-cc 插桩</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> LLVM_CONFIG=<span class="hljs-string">&quot;llvm-config-15&quot;</span><br><span class="hljs-built_in">export</span> CFLAGS=<span class="hljs-string">&quot;-O1 -g -fno-omit-frame-pointer&quot;</span><br><span class="hljs-built_in">cd</span> vim<br>CC=afl-cc CXX=afl-c++ ./configure --with-features=huge --enable-gui=none --disable-shared<br>make<br></code></pre></td></tr></table></figure><h3 id="5-3-寻找-fuzz-vim-的-testcases-corpus"><a href="#5-3-寻找-fuzz-vim-的-testcases-corpus" class="headerlink" title="5.3 寻找 fuzz vim 的 testcases ( corpus)"></a>5.3 寻找 fuzz vim 的 testcases ( corpus)</h3><p>vim 官方仓库里有历史上造成 vim crash 的 poc ，正好拿来用。<br><a href="https://github.com/vim/vim/tree/master/src/testdir/crash">https://github.com/vim/vim/tree/master/src/testdir/crash</a></p><h3 id="5-4-fuzz-vim"><a href="#5-4-fuzz-vim" class="headerlink" title="5.4 fuzz vim"></a>5.4 fuzz vim</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/fuzz/vim<br><span class="hljs-built_in">mkdir</span> -p /tmp/afl++<br>afl-fuzz -i testdir/crash/ -o ~/fuzz/vim -mnone -p fast -- ./vim -u NONE -i NONE -X -Z -m -n -e -s -S @@ -c <span class="hljs-string">&#x27;:qa!&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>-x 指定字典文件</li><li>-mnone 不限制使用内存</li></ul><h3 id="5-5-fuzz-结果"><a href="#5-5-fuzz-结果" class="headerlink" title="5.5  fuzz 结果"></a>5.5  fuzz 结果</h3><p>经过 2天 16 小时的 fuzz， AFL++ 报告有 789 个 Crashes.</p><h3 id="5-6-调整和改进"><a href="#5-6-调整和改进" class="headerlink" title="5.6 调整和改进"></a>5.6 调整和改进</h3><p><code>~/fuzz/vim/default</code> 目录出现了大量的 <code> _cur_inp.*</code> 文件，这是 AFL++ 生成的的临时文件，为了取得更好的效果，需要把这些文件放到 &#x2F;tmp 目录。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> AFL_TMPDIR=/tmp/afl++<br></code></pre></td></tr></table></figure><p>使用 AFL++ 的 cmplog 特性，解决一些  fuzz 上的路径约束, 主要思路来自 <a href="https://github.com/RUB-SysSec/redqueen">https://github.com/RUB-SysSec/redqueen</a> 。<br><a href="https://github.com/AFLplusplus/AFLplusplus/blob/stable/instrumentation/README.cmplog.md">https://github.com/AFLplusplus/AFLplusplus/blob/stable/instrumentation/README.cmplog.md</a></p><p>要使用 cmplog，需要重新编译 vim，使用 <code>AFL_LLVM_CMPLOG</code> 环境变量，指定使用 cmplog 的编译。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> src/vim src/vim-afl<br>make distclean<br><br><span class="hljs-built_in">export</span> LLVM_CONFIG=<span class="hljs-string">&quot;llvm-config-15&quot;</span><br><span class="hljs-built_in">export</span> CFLAGS=<span class="hljs-string">&quot;-O1 -g -fno-omit-frame-pointer&quot;</span><br><span class="hljs-built_in">cd</span> vim-cmplog<br><span class="hljs-built_in">export</span> AFL_LLVM_CMPLOG=1<br>CC=afl-cc CXX=afl-c++ ./configure --with-features=huge --enable-gui=none<br>make<br><span class="hljs-built_in">mv</span> src/vim src/vim-cmplog<br></code></pre></td></tr></table></figure><p>编译完成后，将编译好的 vim 重命名成 vim-cmplog，可以使用下面的 AFL++ 命令行，启用 cmplog</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> AFL_TMPDIR=/tmp/afl++-cmplog<br>afl-fuzz -i testdir/crash/ -o ~/fuzz/vim -mnone -p fast -S cmplog -c ./vim-cmplog -- ./vim-afl -u NONE -i NONE -X -Z -m -n -e -s -S @@ -c <span class="hljs-string">&#x27;:qa!&#x27;</span><br></code></pre></td></tr></table></figure><p>同时运行两个 AFL++ 对 vim 进行 fuzz。</p><h2 id="Trophy"><a href="#Trophy" class="headerlink" title="Trophy"></a>Trophy</h2><p>历史上使用上述方法发现了许多 vim 漏洞，部分漏洞 vim 官方已经修复。</p><p><a href="https://github.com/vim/vim/commit/0fb375aae608d7306b4baf9c1f906961f32e2abf">https://github.com/vim/vim/commit/0fb375aae608d7306b4baf9c1f906961f32e2abf</a><br><a href="https://github.com/vim/vim/commit/b39b240c386a5a29241415541f1c99e2e6b8ce47">https://github.com/vim/vim/commit/b39b240c386a5a29241415541f1c99e2e6b8ce47</a><br><a href="https://github.com/vim/vim/commit/eec0c2b3a4cfab93dd8d4adaa60638d47a2bbc8a">https://github.com/vim/vim/commit/eec0c2b3a4cfab93dd8d4adaa60638d47a2bbc8a</a><br><a href="https://github.com/vim/vim/commit/abfa13ebe92d81aaf66669c428d767847b577453">https://github.com/vim/vim/commit/abfa13ebe92d81aaf66669c428d767847b577453</a></p><h2 id="☆-参考资料"><a href="#☆-参考资料" class="headerlink" title="☆  参考资料"></a>☆  参考资料</h2><p>[1]  <a href="https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/INSTALL.md">https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/INSTALL.md</a><br>[2]  <a href="https://github.com/AFLplusplus/AFLplusplus/tree/stable">AFL ++ stable branch</a><br>[3]  <a href="https://github.com/AFLplusplus/AFLplusplus/tree/dev">AFL++ dev branch</a><br>[4] <a href="https://github.com/AFLplusplus/AFLplusplus/blob/stable/instrumentation/README.llvm.md">https://github.com/AFLplusplus/AFLplusplus/blob/stable/instrumentation/README.llvm.md</a><br>[5] <a href="https://github.com/AFLplusplus/AFLplusplus/blob/stable/instrumentation/README.cmplog.md">https://github.com/AFLplusplus/AFLplusplus/blob/stable/instrumentation/README.cmplog.md</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;☆-1-模糊测试工具-AFL-AFL-介绍&quot;&gt;&lt;a href=&quot;#☆-1-模糊测试工具-AFL-AFL-介绍&quot; class=&quot;headerlink&quot; title=&quot;☆ 1. 模糊测试工具 AFL &amp;#x2F; AFL++介绍&quot;&gt;&lt;/a&gt;☆ 1. 模糊测试工具 AF</summary>
      
    
    
    
    
    <category term="Security" scheme="https://usmacd.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>我的 Logseq 使用实践</title>
    <link href="https://usmacd.com/cn/logseq_practice/"/>
    <id>https://usmacd.com/cn/logseq_practice/</id>
    <published>2024-03-30T16:00:00.000Z</published>
    <updated>2024-06-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>近两年陆陆续续发表了一系列关于 Logseq 实践的文字，零散不易查找阅读，抽空整理成一篇文章，希望能对大家有所帮助。</p><h2 id="Logseq-光速入门"><a href="#Logseq-光速入门" class="headerlink" title="Logseq 光速入门"></a>Logseq 光速入门</h2><p>Logseq 是个不错的工具，就是学习曲线有点陡峭，上手不太容易，最开始可以从 journal 开始，进行日常记事并使用任务管理功能安排日程。</p><p>Logseq 的高阶用法是利用 query 建立自己的工作流 （workflow），使用基于 Query 的 workflow 提示 next action 是 Logseq 最精华的功能，Logseq 的资深用户都是 Query base workflow 的爱好者。</p><p>但是入门还是建议从基础功能的使用开始 （日志，双链，大纲，本地存储 ）。我自己写过 Logseq 四篇，现在由于笔记系统上手熟练，输出反倒不如从前，有点惭愧。</p><p><a href="https://www.usmacd.com/cn/logseq/">Logseq 试用报告</a><br><a href="https://www.usmacd.com/cn/logseq2/">Logseq 使用小结（二）</a><br><a href="https://www.usmacd.com/cn/logseq3/">Logseq 使用小结（三）</a><br><a href="https://www.usmacd.com/cn/logseq_plugins/">我正在使用的 Logseq Plugin</a></p><p>关于 Logseq 的使用，Luhmann 写了不少高质量的 Logseq 文章，放在他个人的网站上 <a href="https://luhmann-logseq.notion.site/">https://luhmann-logseq.notion.site</a> 可以阅读一下。</p><p>Luhmann 写的经典文章 三个强大的工具和三个选择，内容非常得好，使用 Logseq 前阅读一遍可以少走许多弯路。尤其是三个选择这篇，在使用 Logseq 前如果不仔细思考，后期要推翻重来的话就非常麻烦了。</p><div class="note note-info">            <p><a href="https://discuss.logseq.com/t/three-power-tools-i-wish-id-known-about-when-i-started-using-logseq/1683">Three power-tools I wish I’d known about when I started using Logseq</a></p><ul><li>Templates</li><li>Aliases</li><li>Page-tags</li></ul><p><a href="https://discuss.logseq.com/t/three-choices-new-users-need-to-make/3411">Three Choices New Users Need to Make</a></p><ul><li>First choice: to use a daily journal or not?</li><li>Second Choice: tags, hierarchy, or page-tags?</li><li>Third choice: One graph for everything, or multiple graphs?</li></ul>          </div><h2 id="Logseq-同步功能的情况"><a href="#Logseq-同步功能的情况" class="headerlink" title="Logseq 同步功能的情况"></a>Logseq 同步功能的情况</h2><p>只有赞助用户（Logseq Discord 服务器 Backer 角色）可以使用Logseq 官方提供的同步功能，但是 Logseq 官方提供的同步功能不太稳定。我在 Discord 上看到了太多数据丢失的例子，所以我不敢用。</p><p>同步导致数据丢失的情况在 Logseq 多端同步的用户中最为常见，多端同步指多个设备之间数据同步，比如 MacBook 和 iPhone 之间的数据同步。</p><p>我使用第三方网盘单向同步，只有一个设备和网盘自动同步（写网盘），其他设备读网盘后，手动复制一份数据。</p><p>最近看到许多 Community 用户使用 <a href="https://syncthing.net/">Syncthing</a> 进行多端同步，效果好像不错，但我自己没有尝试这种方法。(推友 Mengxin Liu 反馈，Syncthing 同步效果也不太好)</p><h2 id="Journal-or-Page-？"><a href="#Journal-or-Page-？" class="headerlink" title="Journal or Page ？"></a>Journal or Page ？</h2><p>Logseq 用户经常会遇上一个问题，究竟是在 journal 写笔记还是新开一个 page 写。community Luhmann 用户给出他的 flowchat，我觉得写得非常好。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/logseq5_1.jpeg" alt="Journal or Page"></p><p>我自己的用法可以简单的概括为，在 Journal 记录较为零散的片段，在 Page 中对 Journal 中的片段进行重新组合Organize（聚合、重组、整合）。</p><p>Page 中保存较为正式的文字，Journal 中则会较为杂乱地记录想法。按照第二大脑 CODE 的说法，Journal 里 Capture ，Page 里 Organize 。</p><h2 id="Journal-该写点啥-？"><a href="#Journal-该写点啥-？" class="headerlink" title="Journal 该写点啥 ？"></a>Journal 该写点啥 ？</h2><p>哪些内容值得记录，是非常常见的问题。蒂亚戈•福特在《打造第二大脑》一书说认为，值得记录的内容一般有两类。</p><div class="note note-info">            <p><strong>一类，直接从外部世界中获得</strong>，比如：<br>    - 标记的重点：书籍或文章高亮（highlight）的内容<br>    - 引用的佳句：播客或有声读物中令人印象深刻的内容<br>    - 语音备忘：移动设备上记录的语音片段<br>    - 书签或收藏夹：你感兴趣的网页或社交媒体的链接<br>    - 课程要点：参加课程，会议，演讲等活动收获的启示<br>    - 图片：启发灵感的或有趣的照片或者图片</p><p><strong>一类，从内部世界获得</strong>，比如：<br>    - 故事：发生在你自己或者别人的趣事<br>    - 洞见：对事物小的和大的见解<br>    - 记忆：生活中不想忘记的经历<br>    - 反思：写在日记上的个人想法和人生教训<br>    - 沉思：随机在脑海里浮现想法（比如洗澡时）</p>          </div><p>虽然内心世界的感悟很珍贵，但是引起共鸣的内容（原文）也很有价值。原文的价值主要在下面两点：</p><ol><li>溯源：使我们的思考有坚实的基础，有利于构建思考链条</li><li>启发：让我们产生共鸣的内容，可能再次给我们带来启发</li></ol><p>我在 Logseq 的 Journal 中有两个保留内容 [[生活随记]] 和 [[每日心得]]，在回顾笔记的过程中觉得这些内容还是挺有意义的。</p><p>这些内容从某种意义上来说相当于日记，每天都对自己的经历进行记录就像照镜子一般，「每日三省吾身」 值得坚持。对待同一事物，不同时期的心境并不相同。记录下当下的感受，后期再回过来看感触还是挺大的。</p><h2 id="使用-Logseq-进行时间登记"><a href="#使用-Logseq-进行时间登记" class="headerlink" title="使用 Logseq 进行时间登记"></a>使用 Logseq 进行时间登记</h2><p>受图拉鼎的影响，利用 Logseq 启用严格的时间登记，效果不错。方法很简单，支持 markdown 的编辑器理论上都可行。</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-comment">## Time-block Grid</span><br><span class="hljs-literal">-</span> DONE task1  <span class="hljs-comment"># projectx   09:00 am</span><br><span class="hljs-literal">-</span> DONE task2  <span class="hljs-comment"># projectx   10:00 am</span><br><span class="hljs-literal">-</span> TODO task3  <span class="hljs-comment"># projecty   1:00 pm</span><br></code></pre></td></tr></table></figure><p>关于为什么要时间登记，可以阅读采访图拉鼎的播客 <a href="https://www.usmacd.com/cn/tulading/">图拉鼎谈独立开发</a></p><h2 id="使用-Logseq-定期回顾笔记"><a href="#使用-Logseq-定期回顾笔记" class="headerlink" title="使用 Logseq 定期回顾笔记"></a>使用 Logseq 定期回顾笔记</h2><p>定期回顾自己的笔记大体有下面几个好处:</p><ul><li>对抗遗忘曲线：尤其是文献笔记等自己不熟悉的笔记</li><li>推动知识内化，想法迭代：知识结构优化，新旧知识连接</li><li>遇见过去的自己： 挺好玩，挺有趣</li><li>影响现实：促进自我审视，提供思路和线索</li></ul><p>Logseq 软件没有内置随机浏览笔记的插件，第三方提供的 Plugin 可以实现这个目的，从 MarketPlace 下载 logseq-random-note 或者 Logseq Banners plugin 即可。</p><p>在我的知识管理工作流（workflow）中定期回顾笔记是非常重要的一个部分，经常都有意想不到的收获，在 <a href="https://www.usmacd.com/cn/note_review/">定期回顾笔记的好处</a> 中有更加具体的阐述。</p><h2 id="利用-Logseq-来实践卡片笔记工作流"><a href="#利用-Logseq-来实践卡片笔记工作流" class="headerlink" title="利用 Logseq 来实践卡片笔记工作流"></a>利用 Logseq 来实践卡片笔记工作流</h2><p>总体思路</p><ul><li>利用模板自动化输入笔记格式，完成闪念笔记、文献笔记、引用笔记、 永久笔记的输入的标准化</li><li>利用 query 来自动提示下一步的操作，使得整个工作流 actionable</li></ul><p>fleeting note</p><ul><li>在 daily journal 里利用模板写闪念笔记，将闪念笔记标记为 TODO （意味着后续需要采取行动），当闪念笔记被丢弃或者转为永久笔记后标记为 DONE</li><li>利用 query 在 journal 自动提示未完成的 闪念笔记，自动提示标记 TODO 的闪念笔记</li></ul><p>reference note</p><ul><li>在 daily journal 里利用模板写 reference 笔记，所有阅读过的资料都记录一条 reference 笔记</li><li>对于 reference 中的文章、论文、或书籍，需要深入分析的话，就新建一个页面在里面写笔记</li><li>利用 query 列出所有 reference 笔记，相当于拥有了个人的图书馆 (索引)</li></ul><p>permanent note</p><ul><li>在 daily query 页面利用模板写永久笔记，永久笔记自编号</li><li>在单独的页面写永久笔记具体内容，在永久笔记页面纪录来源，父永久笔记</li></ul><p>使用 Logseq 时一定要多用 Template 功能，这是保证笔记格式一致性的关键，可以自动提示应该记录的信息，具体内容可以参考我前段时间写的 <a href="https://www.usmacd.com/cn/zel_note_flow">卡片盒笔记法总体思路与工作流</a></p><h2 id="Zettelkasten-PARA-的-Logseq-实践"><a href="#Zettelkasten-PARA-的-Logseq-实践" class="headerlink" title="Zettelkasten + PARA 的 Logseq 实践"></a>Zettelkasten + PARA 的 Logseq 实践</h2><p>自从使用 Logseq 实践 Zettelkasten 后，我大致发了 1000 条推文，其中有阅读的文献笔记，也有自己思考的永久笔记。我在这两年的时间思考了大量的问题，受益匪浅。 写卡片笔记的目的是为了促进思考，目前正在实践的 PARA 又证明可以推动项目的进展。</p><p>笔记工具有没有用，关键在于人，需要有方法论的支撑，如果没有方法论的指导，认为使用一个工具就可以解决所有问题，世界上没有这么神奇的工具。</p><p>PARA 使用分类的方法将所有的信息分成四类：Projects (可操作的短期目标)，Areas (持续关注的长期目标)，Resources (感兴趣的主题)，Archives (前三类中不活跃的)</p><div class="note note-info">            <ul><li>Projects：短期目标，有截止时间 ： 购买新电脑，写研究报告，设置新客厅家具 等</li><li>Areas：长期目标和负责的内容：如 父亲，产品管理，健康，财务 等</li><li>Resources： 感兴趣的主题：呼吸练习，摄影，咖啡，金融投资 等</li><li>Archives ：不再活跃的前三类：完成或暂停的项目，不再活跃的领域，不感兴趣的主题 等</li></ul>          </div><p> PARA 并不是将东西放进文件夹的分类，而是识别你所负责的工作和生活的结构。关于 PARA 方法，我使用 Claude 翻译了 Tiago Forte 的文章 <a href="https://www.usmacd.com/cn/PARA/">一秒钟内整理数字生活的系统</a>，文章里有更加详细的介绍 。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/logseq5_2.jpeg" alt="Logseq graph"></p><h2 id="不要神话双链笔记方法"><a href="#不要神话双链笔记方法" class="headerlink" title="不要神话双链笔记方法"></a>不要神话双链笔记方法</h2><p>用了两年的 Logseq 后，神奇的发现我好像不怎么使用双链了。</p><p>Journal 的好处是可以随时输入一个较为完整的文字片段，心智负担很小。 但如果要真正对某个主题有较为深刻的理解，需要将零碎片段的完整逻辑和前后关系串连起来。</p><p>真正可以实现这个目标的是写文章，而不是依靠双向链接。 只要写文章的时候，你需要的所有内容都在同一个地方，具体的是用使用标签，还是文件夹都不是重要。</p><p>知识体系的构建是通过不断学习和自我迭代来实现，边界的延伸则可以跟随着自己的好奇心，学习真的是一件很有趣的事情。</p><p>最近有一个体会，工具真的不重要，底层方法论才是重要的东西。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.usmacd.com/cn/zel_note_flow/">卡片盒笔记法总体思路与工作流</a></li><li><a href="https//wilde-at-heart.garden/pages/my-zettelkasten-workflow-from-start-to-finish/">My Zettelkasten workflow from start to finish</a></li><li><a href="https://www.usmacd.com/cn/note_review/">定期回顾笔记的好处</a></li><li><a href="https://www.usmacd.com/cn/PARA/">一秒钟内整理数字生活的系统</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;近两年陆陆续续发表了一系列关于 Logseq 实践的文字，零散不易查找阅读，抽空整理成一篇文章，希望能对大家有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;Logseq-光速入门&quot;&gt;&lt;a href=&quot;#Logseq-光速入门&quot; class=&quot;headerlink&quot; title=&quot;Log</summary>
      
    
    
    
    
    <category term="PKM" scheme="https://usmacd.com/tags/PKM/"/>
    
    <category term="Software" scheme="https://usmacd.com/tags/Software/"/>
    
  </entry>
  
  <entry>
    <title>Some Logseq plugins I&#39;m currently using</title>
    <link href="https://usmacd.com/en/logseq_plugins_en/"/>
    <id>https://usmacd.com/en/logseq_plugins_en/</id>
    <published>2024-03-25T16:00:00.000Z</published>
    <updated>2024-03-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recommend some Logseq plugins I’m currently using. The functions of these plugins are very practical. You can refer to my previous article <a href="https://www.usmacd.com/cn/logseq2/">Logseq Usage Summary (Two)</a> for the method of installing Logseq plugins.</p><h2 id="logseq-random-note"><a href="#logseq-random-note" class="headerlink" title="logseq-random-note"></a>logseq-random-note</h2><p><a href="https://github.com/TankCool/logseq-random-note">https://github.com/TankCool/logseq-random-note</a></p><p>A plugin for randomly browsing notes in Logseq. The fact that Logseq doesn’t have a default random note feature may be an oversight, in contrast, Obsidian has a built-in “open random note” Core Plugin. Regarding the benefits of randomly discovering notes, I have written a dedicated article on <a href="https://www.usmacd.com/cn/note_review/">the advantages of periodically reviewing notes</a>. In my Logseq workflow, regularly reviewing notes is an essential part, often leading to unexpected gains.</p><p>The logseq random note plugin has an issue during usage, it uses the JavaScript <code>math.random</code> function to generate random numbers, which is of low quality, causing the random note plugin to frequently access the same note. I submitted a pull request to the plugin github repository, but the original author did not merge it. If you encounter the issue I mentioned during use, you can try my modified version of the plugin <a href="https://github.com/henices/logseq-random-note">https://github.com/henices/logseq-random-note</a></p><h2 id="logseq-Banners-plugin"><a href="#logseq-Banners-plugin" class="headerlink" title="logseq Banners plugin"></a>logseq Banners plugin</h2><p><a href="https://github.com/yoyurec/logseq-banners-plugin">https://github.com/yoyurec/logseq-banners-plugin</a></p><p>Displays banners in Logseq’s Journal or other pages. The banner can include Calendar, Weather, Pomodoro, and Random quote widgets, providing customization and free combination. I only use the random note feature, allowing me to see my previous notes unintentionally every day, which feels great.</p><p><img src="https://raw.githubusercontent.com/yoyurec/logseq-banners-plugin/main/screenshots/widgets-light-01.png" alt="banner plugin"></p><h2 id="logseq-page-tags-and-Hierarchy"><a href="#logseq-page-tags-and-Hierarchy" class="headerlink" title="logseq page-tags and Hierarchy"></a>logseq page-tags and Hierarchy</h2><p><a href="https://github.com/YU000jp/logseq-page-tags-and-hierarchy">https://github.com/YU000jp/logseq-page-tags-and-hierarchy</a></p><p>A plugin that visually displays Page-tags and Hierarchy in a page, without needing to scroll to the bottom of the page. Logseq’s Page-tags and namespace features are not as well-known as other features. Regrettably, I couldn’t find a clear explanation in Logseq’s documentation.</p><p>The namespace defines the hierarchical relationship between pages, and you can see the hierarchy at the bottom of a page. The namespace has two representation methods:</p><ul><li><code>#topic/topic0/topic1</code></li><li><code>[[topic/topic0/topic1]]</code></li></ul><p>I generally use the former expression, as it’s simpler. When I type <code>#topic</code>, Logseq automatically suggests <code>#topic/topic0</code> and <code>#topic/topic0/topic1</code>, which is very convenient.</p><p>Page-tags are a special property in the first block of a page, using <code>tags:: #topic</code> will make this page visible at the bottom of the <code>topic</code> page in reverse.</p><p>During actual usage, once a page’s content grows, checking Page-tags and the namespace Hierarchy requires scrolling to the bottom of the page, which is very inconvenient. This plugin was developed to solve this issue.</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/logseq4-page-tags.png" alt="page-tags"></p><h2 id="logseq-assets-plus"><a href="#logseq-assets-plus" class="headerlink" title="logseq-assets-plus"></a>logseq-assets-plus</h2><p><a href="https://github.com/xyhp915/logseq-assets-plus">https://github.com/xyhp915/logseq-assets-plus</a></p><p>A plugin for conveniently inserting assets, with the shortcut <code>ctrl/cmd+Shift+o</code>. In Logseq, the method to insert an asset is to use the <code>/upload a asset</code> command, press enter, and a dialog box will pop up for you to select the file you want to save. However, to insert an existing asset into a block, you can only search by name. Logseq assets plus provides richer filtering methods.</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/logseq4-asset-plus.png" alt="asset-plus"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>Logseq 使用小结 （二）<a href="https://www.usmacd.com/cn/logseq2/">https://www.usmacd.com/cn/logseq2/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Recommend some Logseq plugins I’m currently using. The functions of these plugins are very practical. You can refer to my previous articl</summary>
      
    
    
    
    
    <category term="Software" scheme="https://usmacd.com/tags/Software/"/>
    
  </entry>
  
  <entry>
    <title>我正在使用的 Logseq Plugin (插件)</title>
    <link href="https://usmacd.com/cn/logseq_plugins/"/>
    <id>https://usmacd.com/cn/logseq_plugins/</id>
    <published>2024-03-18T16:00:00.000Z</published>
    <updated>2024-03-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>推荐一些我正在使用的 <a href="https://github.com/logseq/logseq">Logseq</a> 插件，这些插件的功能都非常实用。Logseq 安装插件的方法可以参考我以前写的文章 <a href="https://www.usmacd.com/cn/logseq2/">Logseq 使用小结 （二）</a> 。</p><h2 id="logseq-random-note"><a href="#logseq-random-note" class="headerlink" title="logseq-random-note"></a>logseq-random-note</h2><p><a href="https://github.com/TankCool/logseq-random-note">https://github.com/TankCool/logseq-random-note</a></p><p>在 Logseq 中随机浏览笔记的插件。Logseq 没有默认的随机笔记功能可能是一个失误，反观 Obsidian 就有内置 open random note 的功能。关于随机发现笔记的作用，我专门写过一篇文章 <a href="https://www.usmacd.com/cn/note_review/">定期回顾笔记的好处</a>。在我的 Logseq 工作流(workflow) 中，定期回顾笔记是非常重要的部分，经常都能获得意想不到的收获。</p><p>logseq random note 插件在使用中有一个问题，生成随机数时使用了 javascript math.random 函数，这个函数生成的随机数质量不高，导致 random note 插件经常会访问同一个笔记。我向原仓库提交了修改后的源码，但是原作者没有合并。如果在使用的时候遇上我说的这个问题，可以试试我的修改版插件 <a href="https://github.com/henices/logseq-random-note">https://github.com/henices/logseq-random-note</a></p><h2 id="Logseq-Banners-plugin"><a href="#Logseq-Banners-plugin" class="headerlink" title="Logseq Banners plugin"></a>Logseq Banners plugin</h2><p><a href="https://github.com/yoyurec/logseq-banners-plugin">https://github.com/yoyurec/logseq-banners-plugin</a><br>在 Logseq 的 Journal 或者其他页面显示 banner 。Banner 中可以添加 Calendar，Weather，Pomodoro，Random quote 小组件，提供自定义功能，可以自由组合。我只使用了 random note 的功能，每天都可以不经意的看到以前的笔记，感觉非常不错。</p><p><img src="https://raw.githubusercontent.com/yoyurec/logseq-banners-plugin/main/screenshots/widgets-light-01.png" alt="banner plugin"></p><h2 id="Page-tags-and-Hierarchy"><a href="#Page-tags-and-Hierarchy" class="headerlink" title="Page-tags and Hierarchy"></a>Page-tags and Hierarchy</h2><p><a href="https://github.com/YU000jp/logseq-page-tags-and-hierarchy">https://github.com/YU000jp/logseq-page-tags-and-hierarchy</a></p><p>在页面中直观得看见 Page-tags 和 Hierarchy，不用滚动到页面底部的插件。Logseq Page-tags 和 namespace 特性，并不像其他特性被人们熟知。比较遗憾的是我没有在 Logseq 的文档中找到明确的说明。</p><p>namespace 定义了 page 之间的层级关系，可以在一个页面的底部看出层级关系。namespace 有两种表示方式：</p><ul><li><code>#topic/topic0/topic1</code></li><li><code>[[topic/topic0/topic1]]</code></li></ul><p>我一般都使用前面的表达方式，比较简单，输入 <code>#topic</code> Logseq 就会自动提示 <code>#topic/topic0</code> 和 <code>#topic/topic0/topic1</code> 非常方便。</p><p>Page-tags 是一个特殊的属性，在一个 page 的第一个block 使用 <code>tags:: #topic</code> 可以在topic 页面底部反向查看到这个 page。</p><p>实际使用的过程中会发现，一旦页面的内容多了，要查看 Page-tags 和 namespace 的 Hierarchy 必须滚动到页面底部非常费事，这个插件就是为了解决这个问题而开发的。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/logseq4-page-tags.png" alt="page-tags"></p><h2 id="logseq-assets-plus"><a href="#logseq-assets-plus" class="headerlink" title="logseq-assets-plus"></a>logseq-assets-plus</h2><p><a href="https://github.com/xyhp915/logseq-assets-plus">https://github.com/xyhp915/logseq-assets-plus</a></p><p>方便插入资源 asset 的插件，快捷键  ctrl&#x2F;cmd+Shift+O 。在Logseq 中插入 asset 的方法是，使用 &#x2F;upload a asset 命令，回车后会弹出一个对话框选择你要保存的文件即可。但是要在一个 block 中插入一个已有的 asset ，只能使用名字搜索，Logseq assets plus 提供了更加丰富的过滤方法。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/logseq4-asset-plus.png" alt="asset-plus"></p><h2 id="logseq-plugin-mark-map"><a href="#logseq-plugin-mark-map" class="headerlink" title="logseq-plugin-mark-map"></a>logseq-plugin-mark-map</h2><p><a href="https://github.com/vipzhicheng/logseq-plugin-mark-map">https://github.com/vipzhicheng/logseq-plugin-mark-map</a></p><p>将大纲笔记展示为思维导图插件，触发快捷键 mm 。将大纲笔记转化为思维导图，对内容记忆有一些帮助。</p><p><img src="https://github.com/henices/pictures/raw/master/logseq3_5.png" alt="mark-map"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>Logseq 使用小结 （二）<a href="https://www.usmacd.com/cn/logseq2/">https://www.usmacd.com/cn/logseq2/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;推荐一些我正在使用的 &lt;a href=&quot;https://github.com/logseq/logseq&quot;&gt;Logseq&lt;/a&gt; 插件，这些插件的功能都非常实用。Logseq 安装插件的方法可以参考我以前写的文章 &lt;a href=&quot;https://www.usmacd.co</summary>
      
    
    
    
    
    <category term="Software" scheme="https://usmacd.com/tags/Software/"/>
    
  </entry>
  
</feed>
